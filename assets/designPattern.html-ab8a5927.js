const e=JSON.parse('{"key":"v-54ed8064","path":"/docs/01-csbase/designPattern.html","title":"设计模式","lang":"zh-CN","frontmatter":{"sidebar_position":2,"author":"zeanzai","title":"设计模式","category":["计算机基础"],"description":"1. 研究方式 1. 提出目标： 为了使软件具有更高的可维护性、可读性、可重用性，实现高内聚、低耦合的目标 2. 评判标准： 设计模式的七大原则 3. 解决方案： 在实践过程中，不断总结和完善，之后形成固定的模式，并推广使用之 2. 学习方法 根据现实生活中的开发样例所具备的问题，进行改造，改造之后进行总结。 需要了解相关的Java使用方式。最主要是：...","head":[["meta",{"property":"og:url","content":"https://zeanzai.github.io/java-tips/java-tips/docs/01-csbase/designPattern.html"}],["meta",{"property":"og:site_name","content":"java-tips"}],["meta",{"property":"og:title","content":"设计模式"}],["meta",{"property":"og:description","content":"1. 研究方式 1. 提出目标： 为了使软件具有更高的可维护性、可读性、可重用性，实现高内聚、低耦合的目标 2. 评判标准： 设计模式的七大原则 3. 解决方案： 在实践过程中，不断总结和完善，之后形成固定的模式，并推广使用之 2. 学习方法 根据现实生活中的开发样例所具备的问题，进行改造，改造之后进行总结。 需要了解相关的Java使用方式。最主要是：..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-02T09:12:06.000Z"}],["meta",{"property":"article:author","content":"zeanzai"}],["meta",{"property":"article:modified_time","content":"2024-09-02T09:12:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-02T09:12:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zeanzai\\"}]}"]]},"headers":[{"level":2,"title":"1. 研究方式","slug":"_1-研究方式","link":"#_1-研究方式","children":[]},{"level":2,"title":"2. 学习方法","slug":"_2-学习方法","link":"#_2-学习方法","children":[]},{"level":2,"title":"3. 设计模式的原则","slug":"_3-设计模式的原则","link":"#_3-设计模式的原则","children":[]},{"level":2,"title":"4. 类与类之间的关系","slug":"_4-类与类之间的关系","link":"#_4-类与类之间的关系","children":[]},{"level":2,"title":"5. 单例模式","slug":"_5-单例模式","link":"#_5-单例模式","children":[{"level":3,"title":"5.1. 饿汉式-静态常量方式","slug":"_5-1-饿汉式-静态常量方式","link":"#_5-1-饿汉式-静态常量方式","children":[]},{"level":3,"title":"5.2. 饿汉式-静态代码块方式","slug":"_5-2-饿汉式-静态代码块方式","link":"#_5-2-饿汉式-静态代码块方式","children":[]},{"level":3,"title":"5.3. 懒汉式（线程不安全）-无同步措施方式","slug":"_5-3-懒汉式-线程不安全-无同步措施方式","link":"#_5-3-懒汉式-线程不安全-无同步措施方式","children":[]},{"level":3,"title":"5.4. 懒汉式（线程安全）-同步方法","slug":"_5-4-懒汉式-线程安全-同步方法","link":"#_5-4-懒汉式-线程安全-同步方法","children":[]},{"level":3,"title":"5.5. 懒汉式（线程不安全）-同步代码块","slug":"_5-5-懒汉式-线程不安全-同步代码块","link":"#_5-5-懒汉式-线程不安全-同步代码块","children":[]},{"level":3,"title":"5.6. 双重锁校验（DCL）","slug":"_5-6-双重锁校验-dcl","link":"#_5-6-双重锁校验-dcl","children":[]},{"level":3,"title":"5.7. 静态内部类","slug":"_5-7-静态内部类","link":"#_5-7-静态内部类","children":[]},{"level":3,"title":"5.8. 枚举类","slug":"_5-8-枚举类","link":"#_5-8-枚举类","children":[]},{"level":3,"title":"5.9. 单例模式在jdk中的使用","slug":"_5-9-单例模式在jdk中的使用","link":"#_5-9-单例模式在jdk中的使用","children":[]}]},{"level":2,"title":"6. 建造者模式","slug":"_6-建造者模式","link":"#_6-建造者模式","children":[{"level":3,"title":"6.1. 业务场景","slug":"_6-1-业务场景","link":"#_6-1-业务场景","children":[]},{"level":3,"title":"6.2. 垃圾实现","slug":"_6-2-垃圾实现","link":"#_6-2-垃圾实现","children":[]},{"level":3,"title":"6.3. 建造者模式实现","slug":"_6-3-建造者模式实现","link":"#_6-3-建造者模式实现","children":[]},{"level":3,"title":"6.4. 实际应用","slug":"_6-4-实际应用","link":"#_6-4-实际应用","children":[]},{"level":3,"title":"6.5. 参考","slug":"_6-5-参考","link":"#_6-5-参考","children":[]}]},{"level":2,"title":"7. 模板方法模式","slug":"_7-模板方法模式","link":"#_7-模板方法模式","children":[{"level":3,"title":"7.1. 业务场景","slug":"_7-1-业务场景","link":"#_7-1-业务场景","children":[]},{"level":3,"title":"7.2. 垃圾实现","slug":"_7-2-垃圾实现","link":"#_7-2-垃圾实现","children":[]},{"level":3,"title":"7.3. 模板方法实现","slug":"_7-3-模板方法实现","link":"#_7-3-模板方法实现","children":[]},{"level":3,"title":"7.4. 使用","slug":"_7-4-使用","link":"#_7-4-使用","children":[]},{"level":3,"title":"7.5. 其他","slug":"_7-5-其他","link":"#_7-5-其他","children":[]},{"level":3,"title":"7.6. 思路扩展","slug":"_7-6-思路扩展","link":"#_7-6-思路扩展","children":[]}]},{"level":2,"title":"8. 策略模式","slug":"_8-策略模式","link":"#_8-策略模式","children":[{"level":3,"title":"8.1. 业务场景","slug":"_8-1-业务场景","link":"#_8-1-业务场景","children":[]},{"level":3,"title":"8.2. 策略模式的实现","slug":"_8-2-策略模式的实现","link":"#_8-2-策略模式的实现","children":[]},{"level":3,"title":"8.3. 使用","slug":"_8-3-使用","link":"#_8-3-使用","children":[]},{"level":3,"title":"8.4. 其他","slug":"_8-4-其他","link":"#_8-4-其他","children":[]}]},{"level":2,"title":"9. 责任链模式","slug":"_9-责任链模式","link":"#_9-责任链模式","children":[{"level":3,"title":"9.1. 业务场景","slug":"_9-1-业务场景","link":"#_9-1-业务场景","children":[]},{"level":3,"title":"9.2. 垃圾实现","slug":"_9-2-垃圾实现","link":"#_9-2-垃圾实现","children":[]},{"level":3,"title":"9.3. 责任链模式","slug":"_9-3-责任链模式","link":"#_9-3-责任链模式","children":[]},{"level":3,"title":"9.4. 使用","slug":"_9-4-使用","link":"#_9-4-使用","children":[]}]}],"git":{"createdTime":1725268326000,"updatedTime":1725268326000,"contributors":[{"name":"zeanzai","email":"zeanzai.me@gmail.com","commits":1}]},"readingTime":{"minutes":20.22,"words":6065},"filePathRelative":"docs/01-csbase/designPattern.md","localizedDate":"2024年9月2日","autoDesc":true,"excerpt":""}');export{e as data};
