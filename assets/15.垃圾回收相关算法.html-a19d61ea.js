import{_ as n,W as s,X as a,a2 as e}from"./framework-6a3aa88c.js";const p="/java-tips/assets/05420507845893400127893f4ce82e37-4ffda4bb.webp",t="/java-tips/assets/53ca9932c22c3e5cf7915da3bbf03cd9-ea2fb5cb.webp",o="/java-tips/assets/4a6924289ae33fffd29bd121fd6ebda3-d2717a91.webp",c="/java-tips/assets/b109bc700f66f044281574f3b86b1dfd-bca0951e.webp",l="/java-tips/assets/696cd6a17dca1a1d2f760596caa333c2-abd625ec.webp",i="/java-tips/assets/image-20220306151728075-ae405930.webp",u="/java-tips/assets/image-20220306152130246-444e2432.webp",r="/java-tips/assets/image-20220306152104781-db5ab0e7.webp",k="/java-tips/assets/image-20220306152534926-7b6e20ba.webp",d="/java-tips/assets/image-20220306152603223-057757e3.webp",m="/java-tips/assets/image-20220306152637816-e289354e.webp",b="/java-tips/assets/image-20220306152800014-c3e1b386.webp",v="/java-tips/assets/image-20220306153530111-c8adcff7.webp",g="/java-tips/assets/image-20220306154142694-83372585.webp",f="/java-tips/assets/38a8c16d6ee09d6e9b55c87c44c77a94-902d1b1e.webp",h="/java-tips/assets/image-20220306155051717-fa2b6c4a.webp",y="/java-tips/assets/4bf277baeebecf3149932efcd0b633e1-cd402d51.webp",w={},x=e('<p>[TOC]</p><h1 id="标记阶段-引用计数算法" tabindex="-1"><a class="header-anchor" href="#标记阶段-引用计数算法" aria-hidden="true">#</a> 标记阶段：引用计数算法</h1><h2 id="垃圾标记阶段-对象存活判断" tabindex="-1"><a class="header-anchor" href="#垃圾标记阶段-对象存活判断" aria-hidden="true">#</a> 垃圾标记阶段：对象存活判断</h2><ul><li>在堆里存放着几乎所有的 Java 对象实例，在 GC 执行垃圾回收之前，首先需要区分出内存中哪些是存活对象，哪些是已经死亡的对象。只有被标记为己经死亡的对象，GC 才会在执行垃圾回收时，释放掉其所占用的内存空间，因此这个过程我们可以称为垃圾标记阶段。</li><li>那么在 JVM 中究竟是如何标记一个死亡对象呢？简单来说，当一个对象已经不再被任何的存活对象继续引用时，就可以宣判为已经死亡。</li><li>判断对象存活一般有两种方式：引用计数算法和可达性分析算法。</li></ul><h2 id="引用计数算法" tabindex="-1"><a class="header-anchor" href="#引用计数算法" aria-hidden="true">#</a> 引用计数算法</h2><ul><li>引用计数算法（Reference Counting）比较简单，对每个对象保存一个整型的引用计数器属性。用于记录对象被引用的情况。</li><li>对于一个对象 A，只要有任何一个对象引用了 A，则 A 的引用计数器就加 1；当引用失效时，引用计数器就减 1。只要对象 A 的引用计数器的值为 0，即表示对象 A 不可能再被使用，可进行回收。</li><li>优点：实现简单，垃圾对象便于辨识；判定效率高，回收没有延迟性。</li><li>缺点： <ul><li>它需要单独的字段存储计数器，这样的做法增加了存储空间的开销</li><li>每次赋值都需要更新计数器，伴随着加法和减法操作，这增加了时间开销</li><li>引用计数器有一个严重的问题，即无法处理循环引用的情况。这是一条致命缺陷，导致在 Java 的垃圾回收器中没有使用这类算法。</li></ul></li></ul><blockquote><p>何为<strong>循环引用</strong>？</p></blockquote><p>当 p 的指针断开的时候，内部的引用形成一个循环，这就是循环引用</p><figure><img src="'+p+`" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><blockquote><p>代码实例：测试 Java 中是否采用的是引用计数算法</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * -XX:+PrintGCDetails
 * 证明：java使用的不是引用计数算法
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RefCountGC</span> <span class="token punctuation">{</span>

    <span class="token comment">//这个成员属性唯一的作用就是占用一点内存</span>
    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bigSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//5MB</span>

    <span class="token class-name">Object</span> reference <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RefCountGC</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RefCountGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RefCountGC</span> obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RefCountGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        obj1<span class="token punctuation">.</span>reference <span class="token operator">=</span> obj2<span class="token punctuation">;</span>
        obj2<span class="token punctuation">.</span>reference <span class="token operator">=</span> obj1<span class="token punctuation">;</span>

        obj1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        obj2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">//显式的执行垃圾回收行为</span>
        <span class="token comment">//这里发生GC，obj1和obj2能否被回收？</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不使用最后一行的gc()</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Heap</span>
 <span class="token class-name">PSYoungGen</span>      total <span class="token number">75776</span>K<span class="token punctuation">,</span> used <span class="token number">15459</span>K <span class="token punctuation">[</span><span class="token number">0x000000076bd00000</span><span class="token punctuation">,</span> <span class="token number">0x0000000771180000</span><span class="token punctuation">,</span> <span class="token number">0x00000007c0000000</span><span class="token punctuation">)</span>
  eden space <span class="token number">65024</span>K<span class="token punctuation">,</span> <span class="token number">23</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x000000076bd00000</span><span class="token punctuation">,</span><span class="token number">0x000000076cc18ee8</span><span class="token punctuation">,</span><span class="token number">0x000000076fc80000</span><span class="token punctuation">)</span>
  from space <span class="token number">10752</span>K<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x0000000770700000</span><span class="token punctuation">,</span><span class="token number">0x0000000770700000</span><span class="token punctuation">,</span><span class="token number">0x0000000771180000</span><span class="token punctuation">)</span>
  <span class="token keyword">to</span>   <span class="token namespace">space</span> <span class="token number">10752</span>K<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x000000076fc80000</span><span class="token punctuation">,</span><span class="token number">0x000000076fc80000</span><span class="token punctuation">,</span><span class="token number">0x0000000770700000</span><span class="token punctuation">)</span>
 <span class="token class-name">ParOldGen</span>       total <span class="token number">173568</span>K<span class="token punctuation">,</span> used <span class="token number">0</span>K <span class="token punctuation">[</span><span class="token number">0x00000006c3600000</span><span class="token punctuation">,</span> <span class="token number">0x00000006cdf80000</span><span class="token punctuation">,</span> <span class="token number">0x000000076bd00000</span><span class="token punctuation">)</span>
  object space <span class="token number">173568</span>K<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x00000006c3600000</span><span class="token punctuation">,</span><span class="token number">0x00000006c3600000</span><span class="token punctuation">,</span><span class="token number">0x00000006cdf80000</span><span class="token punctuation">)</span>
 <span class="token class-name">Metaspace</span>       used <span class="token number">3294</span>K<span class="token punctuation">,</span> capacity <span class="token number">4496</span>K<span class="token punctuation">,</span> committed <span class="token number">4864</span>K<span class="token punctuation">,</span> reserved <span class="token number">1056768</span>K
  <span class="token keyword">class</span> space    used <span class="token number">358</span>K<span class="token punctuation">,</span> capacity <span class="token number">388</span>K<span class="token punctuation">,</span> committed <span class="token number">512</span>K<span class="token punctuation">,</span> reserved <span class="token number">1048576</span>K
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时把GC开起来</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">[</span><span class="token constant">GC</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token class-name">PSYoungGen</span><span class="token operator">:</span> <span class="token number">14158</span>K<span class="token operator">-&gt;</span><span class="token function">744K</span><span class="token punctuation">(</span><span class="token number">75776</span>K<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token number">14158</span>K<span class="token operator">-&gt;</span><span class="token function">752K</span><span class="token punctuation">(</span><span class="token number">249344</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0015050</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token class-name">Times</span><span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.00</span> sys<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">,</span> real<span class="token operator">=</span><span class="token number">0.00</span> secs<span class="token punctuation">]</span> 
<span class="token punctuation">[</span><span class="token class-name">Full</span> <span class="token constant">GC</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token class-name">PSYoungGen</span><span class="token operator">:</span> <span class="token number">744</span>K<span class="token operator">-&gt;</span><span class="token function">0K</span><span class="token punctuation">(</span><span class="token number">75776</span>K<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token class-name">ParOldGen</span><span class="token operator">:</span> <span class="token number">8</span>K<span class="token operator">-&gt;</span><span class="token function">601K</span><span class="token punctuation">(</span><span class="token number">173568</span>K<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token number">752</span>K<span class="token operator">-&gt;</span><span class="token function">601K</span><span class="token punctuation">(</span><span class="token number">249344</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name">Metaspace</span><span class="token operator">:</span> <span class="token number">3287</span>K<span class="token operator">-&gt;</span><span class="token function">3287K</span><span class="token punctuation">(</span><span class="token number">1056768</span>K<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0.0040297</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token class-name">Times</span><span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.00</span> sys<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">,</span> real<span class="token operator">=</span><span class="token number">0.00</span> secs<span class="token punctuation">]</span> 
<span class="token class-name">Heap</span>
 <span class="token class-name">PSYoungGen</span>      total <span class="token number">75776</span>K<span class="token punctuation">,</span> used <span class="token number">3251</span>K <span class="token punctuation">[</span><span class="token number">0x000000076bd00000</span><span class="token punctuation">,</span> <span class="token number">0x0000000771180000</span><span class="token punctuation">,</span> <span class="token number">0x00000007c0000000</span><span class="token punctuation">)</span>
  eden space <span class="token number">65024</span>K<span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x000000076bd00000</span><span class="token punctuation">,</span><span class="token number">0x000000076c02ce68</span><span class="token punctuation">,</span><span class="token number">0x000000076fc80000</span><span class="token punctuation">)</span>
  from space <span class="token number">10752</span>K<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x000000076fc80000</span><span class="token punctuation">,</span><span class="token number">0x000000076fc80000</span><span class="token punctuation">,</span><span class="token number">0x0000000770700000</span><span class="token punctuation">)</span>
  <span class="token keyword">to</span>   <span class="token namespace">space</span> <span class="token number">10752</span>K<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x0000000770700000</span><span class="token punctuation">,</span><span class="token number">0x0000000770700000</span><span class="token punctuation">,</span><span class="token number">0x0000000771180000</span><span class="token punctuation">)</span>
 <span class="token class-name">ParOldGen</span>       total <span class="token number">173568</span>K<span class="token punctuation">,</span> used <span class="token number">601</span>K <span class="token punctuation">[</span><span class="token number">0x00000006c3600000</span><span class="token punctuation">,</span> <span class="token number">0x00000006cdf80000</span><span class="token punctuation">,</span> <span class="token number">0x000000076bd00000</span><span class="token punctuation">)</span>
  object space <span class="token number">173568</span>K<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x00000006c3600000</span><span class="token punctuation">,</span><span class="token number">0x00000006c36964f0</span><span class="token punctuation">,</span><span class="token number">0x00000006cdf80000</span><span class="token punctuation">)</span>
 <span class="token class-name">Metaspace</span>       used <span class="token number">3307</span>K<span class="token punctuation">,</span> capacity <span class="token number">4496</span>K<span class="token punctuation">,</span> committed <span class="token number">4864</span>K<span class="token punctuation">,</span> reserved <span class="token number">1056768</span>K
  <span class="token keyword">class</span> space    used <span class="token number">360</span>K<span class="token punctuation">,</span> capacity <span class="token number">388</span>K<span class="token punctuation">,</span> committed <span class="token number">512</span>K<span class="token punctuation">,</span> reserved <span class="token number">1048576</span>K
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>逻辑整理：</p><ol><li>因为引用计数算法如果遇到这种类型（两个相互指向循环）就不会发生回收的状态</li><li>而上述没有使用GC的状态为：15459K， 使用了GC的状态为744K，说明这种循环状态被回收了</li><li>由此可以判断Java没有使用引用计数算法</li></ol><figure><img src="`+t+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>引用计数算法，是很多语言的资源回收选择，例如因人工智能而更加火热的 Python，它更是同时支持引用计数和垃圾收集机制。</p><p>具体哪种最优是要看场景的，业界有大规模实践中仅保留引用计数机制，以提高吞吐量的尝试。</p><p>Java 并没有选择引用计数，是因为其存在一个基本的难题，也就是很难处理循环引用关系。</p><p>Python 如何解决循环引用？</p><ul><li>手动解除：很好理解，就是在合适的时机，解除引用关系。</li><li>使用弱引用 weakref，weakref 是 Python 提供的标准库，旨在解决循环引用</li></ul><h1 id="标记阶段-可达性分析算法" tabindex="-1"><a class="header-anchor" href="#标记阶段-可达性分析算法" aria-hidden="true">#</a> 标记阶段：可达性分析算法</h1><h2 id="可达性分析算法-根搜索算法、追踪性垃圾收集" tabindex="-1"><a class="header-anchor" href="#可达性分析算法-根搜索算法、追踪性垃圾收集" aria-hidden="true">#</a> 可达性分析算法（根搜索算法、追踪性垃圾收集）</h2><ul><li>相对于引用计数算法而言，可达性分析算法不仅同样具备实现简单和执行高效等特点，更重要的是该算法可以有效地解决在引用计数算法中循环引用的问题，防止内存泄漏的发生。</li><li>相较于引用计数算法，这里的可达性分析就是 Java、C# 选择的。这种类型的垃圾收集通常也叫作追踪性垃圾收集（Tracing Garbage Collection）</li><li>所谓 &quot;GCRoots” 根集合就是一组必须活跃的引用。</li></ul><blockquote><p>基本思路</p></blockquote><ul><li>可达性分析算法是以根对象集合（GCRoots）为起始点，按照从上至下的方式搜索被根对象集合所连接的目标对象是否可达。</li><li>使用可达性分析算法后，内存中的存活对象都会被根对象集合直接或间接连接着，搜索所走过的路径称为引用链（Reference Chain）。</li><li>如果目标对象没有任何引用链相连，则是不可达的，就意味着该对象己经死亡，可以标记为垃圾对象。</li><li>在可达性分析算法中，只有能够被根对象集合直接或者间接连接的对象才是存活对象。</li></ul><figure><img src="'+o+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><h2 id="gc-roots【面试高频】" tabindex="-1"><a class="header-anchor" href="#gc-roots【面试高频】" aria-hidden="true">#</a> GC Roots【面试高频】</h2><blockquote><p><strong>在 Java 语言中，GC Roots 包括以下几类元素：</strong></p></blockquote><ul><li>虚拟机栈中引用的对象 <ul><li>比如：各个线程被调用的方法中使用到的参数、局部变量等。</li></ul></li><li>本地方法栈内 JNI（通常说的本地方法）引用的对象</li><li>方法区中类静态属性引用的对象 <ul><li>比如：Java 类的引用类型静态变量</li></ul></li><li>方法区中常量引用的对象 <ul><li>比如：字符串常量池（String Table）里的引用</li></ul></li><li>所有被同步锁 synchronized 持有的对象</li><li>Java 虚拟机内部的引用。</li><li>基本数据类型对应的 Class 对象，一些常驻的异常对象（如：<code>NullPointerException</code>、<code>OutOfMemoryError</code>），系统类加载器。</li><li>反映 java 虚拟机内部情况的 JMXBean、JVMTI 中注册的回调、本地代码缓存等。</li><li>除了这些固定的 GC Roots 集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域不同，<u>还可以有其他对象 “临时性” 地加入，共同构成完整 GC Roots 集合。比如：分代收集和局部回收</u>（PartialGC）。 <ul><li>如果只针对 Java 堆中的某一块区域进行垃圾回收（比如：典型的只针对新生代），必须考虑到内存区域是虚拟机自己的实现细节，更不是孤立封闭的，这个区域的对象完全有可能被其他区域的对象所引用，这时候就需要一并将关联的区域对象也加入 GCRoots 集合中去考虑，才能保证可达性分析的准确性。</li><li>典型的只针对新生代：因为新生代除外，还有关联的老年代，所以需要将老年代也一并加入 GC Roots 集合中</li></ul></li><li>小技巧 <ul><li>由于 Root 采用栈方式存放变量和指针，所以如果一个指针，它保存了堆内存里面的对象，但是自己又不存放在堆内存里面，那它就是一个 Root。</li></ul></li></ul><p>红色的都没有被 GC Roots 所引用，所以都是垃圾</p><figure><img src="'+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>注意</strong></p></blockquote><ul><li>如果要使用可达性分析算法来判断内存是否可回收，那么分析工作必须在一个能保障<strong>一致性</strong> (某一刻的静止状态) 的快照中进行。这点不满足的话分析结果的准确性就无法保证。</li><li>这点也是导致 GC 进行时必须 “stop The World” 的一个重要原因。 <ul><li>即使是号称（几乎）不会发生停顿的 CMS 收集器中，枚举根节点时也是必须要停顿的。</li></ul></li></ul><h1 id="对象的-finalization-机制" tabindex="-1"><a class="header-anchor" href="#对象的-finalization-机制" aria-hidden="true">#</a> 对象的 finalization 机制</h1><blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>protected void finalize()
                throws Throwable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当垃圾收集确定不再有对该对象的引用时，垃圾收集器在对象上调用该对象。一个子类覆盖了处理系统资源或执行其他清理的<code>finalize</code>方法。</p><p><code>finalize</code>的一般合同是，如果Java¢虚拟机已经确定不再有任何方法可以被任何尚未死亡的线程访问的方法被调用，除非是由于最后确定的其他对象或类的准备工作所采取的行动。 <code>finalize</code>方法可以采取任何行动，包括使此对象再次可用于其他线程; 然而， <code>finalize</code>的通常目的是在对象不可撤销地丢弃之前执行清除动作。 例如，表示输入/输出连接的对象的finalize方法可能会在对象被永久丢弃之前执行显式I / O事务来中断连接。</p><p>所述<code>finalize</code>类的方法<code>Object</code>执行任何特殊操作; 它只是返回正常。 Object的<code>Object</code>可以覆盖此定义。</p><p>Java编程语言不能保证哪个线程将为任何给定的对象调用<code>finalize</code>方法。 但是，确保调用finalize的线程在调用finalize时不会持有任何用户可见的同步锁。 如果finalize方法抛出未捕获的异常，则会忽略该异常，并终止该对象的定类。</p><p>在为对象调用<code>finalize</code>方法之后，在Java虚拟机再次确定不再有任何方式可以通过任何尚未被死亡的线程访问此对象的任何方法的情况下，将采取进一步的操作，包括可能的操作由准备完成的其他对象或类别，此时可以丢弃对象。</p><p><code>finalize</code>方法从不被任何给定对象的Java虚拟机调用多次。</p><p><code>finalize</code>方法抛出的任何异常都会导致该对象的终止被停止，否则被忽略。</p><ul><li><strong>异常</strong></li></ul><p><code>Throwable</code> - 这个方法提出的 <code>异常</code></p><ul><li><strong>另请参见：</strong></li></ul><p><code>WeakReference</code> ， <code>PhantomReference</code></p><ul><li><strong>See The Java™ Language Specification:</strong></li></ul><p>12.6类实例的定稿</p></blockquote><ul><li>Java 语言提供了对象终止（finalization）机制来允许开发人员提供对象被销毁之前的自定义处理逻辑。</li><li>当垃圾回收器发现没有引用指向一个对象，即：垃圾回收此对象之前，总会先调用这个对象的 <code>finalize( )</code> 方法。</li><li><code>finalize( )</code> 方法允许在子类中被重写，用于在对象被回收时进行资源释放。通常在这个方法中进行一些资源释放和清理的工作，比如关闭文件、套接字和数据库连接等。</li><li>永远不要主动调用某个对象的 finalize ( ) 方法，应该交给垃圾回收机制调用。理由包括下面三点： <ul><li>在 <code>finalize( )</code> 执行时可能会导致对象复活。</li><li><code>finalize( )</code> 方法的执行时间是没有保障的，它完全由 GC 线程决定，极端情况下，若不发生 GC，则 <code>finalize( )</code> 方法将没有执行机会。</li><li>一个糟糕的 <code>finalize( )</code> 会严重影响 GC 的性能。</li></ul></li><li>从功能上来说，<code>finalize( )</code> 方法与 C++ 中的析构函数比较相似，但是 Java 采用的是基于垃圾回收器的自动内存管理机制，所以 <code>finalize( )</code> 方法在本质上不同于 C++ 中的析构函数。</li><li>由于 <code>finalize( )</code> 方法的存在，虚拟机中的对象一般处于三种可能的状态。</li></ul><h2 id="三种可能的状态" tabindex="-1"><a class="header-anchor" href="#三种可能的状态" aria-hidden="true">#</a> 三种可能的状态</h2><ul><li>如果从所有的根节点都无法访问到某个对象，说明对象己经不再使用了。一般来说，此对象需要被回收。但事实上，也并非是 “非死不可” 的，这时候它们暂时处于 “缓刑” 阶段。一个无法触及的对象有可能在某一个条件下 “复活” 自己，如果这样，那么对它的回收就是不合理的，为此，定义虚拟机中的对象可能的三种状态。如下： <ul><li><strong>可触及的</strong>：从根节点开始，可以到达这个对象。（===&gt; 不是垃圾）</li><li><strong>可复活的</strong>：对象的所有引用都被释放，但是对象有<u>可能</u>在 <code>finalize()</code> 中<u>复活</u>。</li><li><strong>不可触及的</strong>：对象的 <code>finalize()</code> 被调用，并且<u>没有复活</u>，那么就会进入不可触及状态。不可触及的对象不可能被复活，因为 <code>finalize()</code> 只会被调用一次。</li></ul></li><li>以上 3 种状态中，是由于 <code>finalize()</code> 方法的存在，进行的区分。只有在对象不可触及时才可以被回收。</li></ul><h2 id="具体过程" tabindex="-1"><a class="header-anchor" href="#具体过程" aria-hidden="true">#</a> 具体过程</h2><p>判定一个对象 objA 是否可回收，至少要经历两次标记过程：</p><ol><li><p>如果对象 objA 到 GC Roots 没有引用链，则进行第一次标记。</p></li><li><p>进行筛选，判断此对象是否有必要执行</p></li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>finalize()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>方法</p><ol><li><p>如果对象 objA 没有重写 <code>finalize()</code> 方法，或者 <code>finalize()</code> 方法已经被虚拟机调用过，则虚拟机视为 “没有必要执行”，objA 被判定为不可触及的。</p></li><li><p>如果对象 objA 重写了 <code>finalize()</code> 方法，且还未执行过，那么 objA 会被插入到 <code>F-Queue</code> 队列中，由一个虚拟机自动创建的、低优先级的 <code>Finalizer</code> 线程触发其 <code>finalize()</code> 方法执行。</p></li><li><p><code>finalize()</code> 方法是对象逃脱死亡的最后机会，稍后 GC 会对 F-Queue 队列中的对象进行第二次标记。如果 objA 在 <code>finalize()</code> 方法中与引用链上的任何一个对象建立了联系，那么在第二次标记时，objA 会被移出 “即将回收” 集合。之后，对象如果再次出现没有引用存在的情况。在这个情况下， <code>finalize()</code> 方法不会被再次调用，对象会直接变成不可触及的状态，也就是说，<strong>一个对象的 <code>finalize()</code> 方法只会被调用一次。</strong></p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RefCountGC</span> <span class="token punctuation">{</span>

    <span class="token comment">//这个成员属性唯一的作用就是占用一点内存</span>
    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bigSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//5MB</span>

    <span class="token class-name">Object</span> reference <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RefCountGC</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RefCountGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RefCountGC</span> obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RefCountGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        obj1<span class="token punctuation">.</span>reference <span class="token operator">=</span> obj2<span class="token punctuation">;</span>
        obj2<span class="token punctuation">.</span>reference <span class="token operator">=</span> obj1<span class="token punctuation">;</span>

        obj1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        obj2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">//显式的执行垃圾回收行为</span>
        <span class="token comment">//这里发生GC，obj1和obj2能否被回收？</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+l+`" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><blockquote><p>代码示例</p></blockquote><p>重写 <code>finalize()</code> 方法，然后在方法的内部，重写将其存放到 GC Roots 中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 测试Object类中finalize()方法，即对象的finalization机制。
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CanReliveObj</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CanReliveObj</span> obj<span class="token punctuation">;</span> <span class="token comment">//类变量，属于 GC Root</span>

    <span class="token comment">//此方法只能被调用一次</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;调用当前类重写的finalize()方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        obj <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token comment">//当前待回收的对象在finalize()方法中与引用链上的一个对象obj建立了联系</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CanReliveObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 对象第一次成功拯救自己</span>
            obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用垃圾回收器</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-----------------第一次gc操作------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 因为Finalizer线程优先级很低，暂停2秒，以等待它</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;obj is dead&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;obj is still alive&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-----------------第二次gc操作------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 下面这段代码与上面的完全相同，但是这次自救却失败了</span>
            obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 因为Finalizer线程优先级很低，暂停2秒，以等待它</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;obj is dead&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;obj is still alive&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序运行结果</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-----------------第一次gc操作------------
调用当前类重写的finalize()方法
obj is still alive
-----------------第二次gc操作------------
obj is dead
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在进行第一次清除的时候，我们会执行 <code>finalize()</code> 方法，然后对象进行了一次自救操作，但是因为 <code>finalize()</code> 方法只会被调用一次，因此第二次该对象将会被垃圾清除。</p><h1 id="mat-与-jprofiler-的-gc-roots-溯源" tabindex="-1"><a class="header-anchor" href="#mat-与-jprofiler-的-gc-roots-溯源" aria-hidden="true">#</a> MAT 与 JProfiler 的 GC Roots 溯源</h1><h2 id="jprofiler-的-gc-roots-溯源" tabindex="-1"><a class="header-anchor" href="#jprofiler-的-gc-roots-溯源" aria-hidden="true">#</a> JProfiler 的 GC Roots 溯源</h2><p>我们在实际的开发中，一般不会查找全部的 GC Roots，可能只是查找某个对象的整个链路，或者称为 GC Roots 溯源，这个时候，我们就可以使用 JProfiler。</p><blockquote><p>代码示例</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GCRootsTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> numList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Date</span> birth <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            numList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;数据添加完毕，请操作：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        numList <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        birth <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;numList、birth已置空，请操作：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以查看当前值，然后条就会变成绿色</p><figure><img src="`+i+'" alt="image-20220306151728075" tabindex="0" loading="lazy"><figcaption>image-20220306151728075</figcaption></figure><figure><img src="'+u+'" alt="image-20220306152130246" tabindex="0" loading="lazy"><figcaption>image-20220306152130246</figcaption></figure><p>可以查看选中的的堆，在引用中可以查看来源引用、追溯</p><figure><img src="'+r+`" alt="image-20220306152104781" tabindex="0" loading="lazy"><figcaption>image-20220306152104781</figcaption></figure><h2 id="jprofiler-查看oom" tabindex="-1"><a class="header-anchor" href="#jprofiler-查看oom" aria-hidden="true">#</a> JProfiler 查看OOM</h2><blockquote><p>代码示例</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 内存溢出排查
 * -Xms8m -Xmx8m -XX:+HeapDumpOnOutOfMemoryError
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapOOM</span> <span class="token punctuation">{</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//1MB</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HeapOOM</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HeapOOM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                count<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;count = &quot;</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>结果</p></blockquote><figure><img src="`+k+'" alt="image-20220306152534926" tabindex="0" loading="lazy"><figcaption>image-20220306152534926</figcaption></figure><p>可以看到已经保存了dump，使用jprofiler打开后可以看到，有一个大对象</p><figure><img src="'+d+'" alt="image-20220306152603223" tabindex="0" loading="lazy"><figcaption>image-20220306152603223</figcaption></figure><p>然后我们通过线程，还能够定位到哪里出现 OOM</p><figure><img src="'+m+'" alt="image-20220306152637816" tabindex="0" loading="lazy"><figcaption>image-20220306152637816</figcaption></figure><p>然后就可以定位到代码位置</p><figure><img src="'+b+'" alt="image-20220306152800014" tabindex="0" loading="lazy"><figcaption>image-20220306152800014</figcaption></figure><h1 id="清除阶段-标记-清除算法-mark-sweep" tabindex="-1"><a class="header-anchor" href="#清除阶段-标记-清除算法-mark-sweep" aria-hidden="true">#</a> 清除阶段：标记 - 清除算法（Mark-Sweep）</h1><p>当成功区分出内存中存活对象和死亡对象后，GC 接下来的任务就是执行垃圾回收，释放掉无用对象所占用的内存空间，以便有足够的可用内存空间为新对象分配内存。目前在 JVM 中比较常见的三种垃圾收集算法是：</p><ul><li>标记一清除算法（Mark-Sweep）</li><li>复制算法（Copying）</li><li>标记 - 压缩算法（Mark-Compact）</li></ul><blockquote><p>背景</p></blockquote><p>标记 - 清除算法（Mark-Sweep）是一种非常基础和常见的垃圾收集算法，该算法被 J.McCarthy 等人在 1960 年提出并并应用于 Lisp 语言。</p><blockquote><p>执行过程</p></blockquote><p>当堆中的有效内存空间（Available Memory）被耗尽的时候，就会停止整个程序（也被称为 Stop The World），然后进行两项工作，第一项则是标记，第二项则是清除。</p><ul><li><p>标记</p><p>：Collector 从引用根节点开始遍历，</p><p>标记所有被引用的对象</p><p>。一般是在对象的 Header 中记录为可达对象。</p><ul><li><strong>标记的是引用的对象，不是垃圾！！</strong></li></ul></li><li><p><strong>清除</strong>：Collector 对堆内存从头到尾进行线性的遍历，如果发现某个对象在其 Header 中没有标记为可达对象，则将其回收。</p></li></ul><figure><img src="'+v+'" alt="image-20220306153530111" tabindex="0" loading="lazy"><figcaption>image-20220306153530111</figcaption></figure><blockquote><p>缺点</p></blockquote><ul><li>效率不算高（相当于进行了两次的全遍历，O(n)级别）</li><li>在进行 GC 的时候，需要停止整个应用程序，导致用户体验较差</li><li>这种方式清理出来的空闲内存是不连续的，产生<strong>内存碎片</strong>，需要维护一个空闲列表（空闲列表在创建对象的那一章讲过）</li></ul><blockquote><p>注意：何为清除？</p></blockquote><ul><li>这里所谓的<u>清除并不是真的置空</u>，而是把<u>需要清除的对象地址保存在空闲的地址列表里</u>。下次有新对象需要加载时，判断垃圾的位置空间是否够，如果够，就存放覆盖原有的地址。</li><li>关于空闲列表是在为对象分配内存的时候： <ul><li>如果内存规整 <ul><li>采用指针碰撞的方式进行内存分配</li></ul></li><li>如果内存不规整 <ul><li>虚拟机需要维护一个列表</li><li>空闲列表分配</li></ul></li></ul></li></ul><h1 id="清除阶段-复制算法-copying" tabindex="-1"><a class="header-anchor" href="#清除阶段-复制算法-copying" aria-hidden="true">#</a> 清除阶段：复制算法（Copying）</h1><blockquote><p>背景</p></blockquote><p>为了解决标记 - 清除算法在垃圾收集效率方面的缺陷，M.L.Minsky 于 1963 年发表了著名的论文，“使用双存储区的 Lisp 语言垃圾收集器 CA LISP Garbage Collector Algorithm Using Serial Secondary Storage）”。M.L.Minsky 在该论文中描述的算法被人们称为复制（Copying）算法，它也被 M.L.Minsky 本人成功地引入到了 Lisp 语言的一个实现版本中。</p><blockquote><p>核心思想</p></blockquote><p>将活着的内存空间分为两块，每次只使用其中一块，在垃圾回收时将正在使用的内存中的存活对象复制到未被使用的内存块中，之后清除正在使用的内存块中的所有对象，交换两个内存的角色，最后完成垃圾回收</p><figure><img src="'+g+'" alt="image-20220306154142694" tabindex="0" loading="lazy"><figcaption>image-20220306154142694</figcaption></figure><blockquote><p>优点</p></blockquote><ul><li>没有标记和清除过程，实现简单，<strong>运行高效</strong></li><li>复制过去以后保证空间的连续性，不会出现 “碎片” 问题</li></ul><blockquote><p>缺点</p></blockquote><ul><li>此算法的缺点也是很明显的，就是需要<strong>两倍</strong>的内存空间。</li><li>对于 G1 这种拆分成为大量 region 的 GC，复制而不是移动，意味着 GC 需要维护 region 之间对象的引用关系，不管是内存占用或者时间开销也不小</li></ul><blockquote><p>注意</p></blockquote><ul><li>如果系统中的垃圾对象非常多，复制算法可能不会很理想</li><li>复制算法需要复制的存活对象数量并不会太大，或者说非常低才行</li></ul><blockquote><p>应用场景</p></blockquote><p>在<strong>新生代</strong>，对常规应用的垃圾回收，一次通常可以回收 70% - 99% 的内存空间。回收性价比很高。所以现在的商业虚拟机都是用这种收集算法回收新生代。</p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="清除阶段-标记-压缩-整理-算法-mark-compact" tabindex="-1"><a class="header-anchor" href="#清除阶段-标记-压缩-整理-算法-mark-compact" aria-hidden="true">#</a> 清除阶段：标记 - 压缩（整理）算法（Mark - Compact）</h1><blockquote><p>背景</p></blockquote><ul><li>复制算法的高效性是建立在存活对象少、垃圾对象多的前提下的。这种情况在新生代经常发生，但是在老年代，更常见的情况是大部分对象都是存活对象。如果依然使用复制算法，由于存活对象较多，复制的成本也将很高。因此，<strong>基于老年代垃圾回收的特性，需要使用其他的算法。</strong></li><li>标记 - 清除算法的确可以应用在老年代中，但是该算法不仅执行效率低下，而且在执行完内存回收后还会产生内存碎片，所以 JVM 的设计者需要在此基础之上进行改进。标记 - 压缩（Mark-Compact）算法由此诞生。</li><li>1970 年前后，G.L.Steele、C.J.Chene 和 D.s.Wise 等研究者发布标记 - 压缩算法。在许多现代的垃圾收集器中，人们都使用了标记 - 压缩算法或其改进版本。</li></ul><blockquote><p>执行过程</p></blockquote><ul><li>第一阶段和标记清除算法一样，从根节点开始标记所有被引用对象</li><li>第二阶段将所有的存活对象压缩到内存的一端，按顺序排放。</li><li>之后，清理边界外所有的空间。</li></ul><figure><img src="'+h+'" alt="image-20220306155051717" tabindex="0" loading="lazy"><figcaption>image-20220306155051717</figcaption></figure><blockquote><p>标记清除和标记压缩的区别</p></blockquote><ul><li>标记 - 压缩算法的最终效果等同于标记 - 清除算法执行完成后，再进行一次内存碎片整理，因此，也可以把它称为<strong>标记 - 清除 - 压缩（Mark-Sweep-Compact）算法。</strong></li><li>二者的本质差异在于标记 - 清除算法是一种<strong>非移动式的回收算法</strong>，标记 - 压缩是<strong>移动式的</strong>。是否移动回收后的存活对象是一项优缺点并存的风险决策。</li><li>可以看到，标记的存活对象将会被整理，按照内存地址依次排列，而未被标记的内存会被清理掉。如此一来，当我们需要给新对象分配内存时，JVM 只需要持有一个内存的起始地址即可，这比维护一个空闲列表显然少了许多开销</li></ul><blockquote><p>标记压缩算法内部使用指针碰撞</p></blockquote><p>如果内存空间以规整和有序的方式分布，即已用和未用的内存都各自一边，彼此之间维系着一个记录下一次分配起始点的标记指针，当为新对象分配内存时，只需要通过修改指针的偏移量将新对象分配在第一个空闲内存位置上，这种分配方式就叫做指针碰撞（Bump the Pointer）</p><blockquote><p>优点</p></blockquote><ul><li>消除了标记 - 清除算法当中，内存区域分散的缺点，我们需要给新对象分配内存时，JVM 只需要持有一个内存的起始地址即可。</li><li>消除了复制算法当中，内存减半的高额代价。</li></ul><blockquote><p>缺点</p></blockquote><ul><li>从效率上来说，标记 - 整理算法要低于复制算法，甚至要低于标记 - 清除算法</li><li>移动对象的同时，如果对象被其他对象引用，则还需要调整引用的地址</li><li>移动过程中，需要全程暂停用户应用程序。即：STW</li></ul><h1 id="小结-1" tabindex="-1"><a class="header-anchor" href="#小结-1" aria-hidden="true">#</a> 小结</h1><table><thead><tr><th></th><th>标记清除（Mark-Sweep）</th><th>标记整理（Mark-Compact）</th><th>复制（Copying）</th></tr></thead><tbody><tr><td>速率</td><td>中等</td><td>最慢</td><td>最快</td></tr><tr><td>空间开销</td><td>少（但会堆积碎片）</td><td>少（不堆积碎片）</td><td>通常需要活对象的 2 倍空间（不堆积碎片）</td></tr><tr><td>移动对象</td><td>否</td><td>是</td><td>是</td></tr></tbody></table><ul><li>效率上来说，复制算法是当之无愧的老大，但是却浪费了太多内存。</li><li>而为了尽量兼顾上面提到的三个指标，标记 - 整理算法相对来说更平滑一些，但是效率上不尽如人意，它比复制算法多了一个标记的阶段，比标记 - 清除多了一个整理内存的阶段。</li><li>综合我们可以看到，没有最好的算法，只有最合适的算法</li></ul><h1 id="分代收集算法" tabindex="-1"><a class="header-anchor" href="#分代收集算法" aria-hidden="true">#</a> 分代收集算法</h1><ul><li>前面所有这些算法中，并没有一种算法可以完全替代其他算法，它们都具有自己独特的优势和特点。分代收集算法应运而生。</li><li>分代收集算法，是基于这样一个事实：不同的对象的生命周期是不一样的。因此，不同生命周期的对象可以采取不同的收集方式，以便提高回收效率。一般是把 Java 堆分为新生代和老年代，这样就可以根据各个年代的特点使用不同的回收算法，以提高垃圾回收的效率。</li><li>在 Java 程序运行的过程中，会产生大量的对象，其中有些对象是与业务信息相关，比如 <strong>Http 请求中的 Session 对象、线程、Socket 连接</strong>，这类对象跟业务直接挂钩，因此生命周期比较长。但是还有一些对象，主要是程序运行过程中生成的临时变量，这些对象生命周期会比较短，比如：<strong>String 对象</strong>，由于其不变类的特性，系统会产生大量的这些对象，有些对象甚至只用一次即可回收。</li></ul><blockquote><p><strong>目前几乎所有的 GC 都采用分代收集算法执行垃圾回收的。</strong></p></blockquote><p>在 HotSpot 中，基于分代的概念，GC 所使用的内存回收算法必须结合年轻代和老年代各自的特点。</p><ul><li><strong>年轻代（Young Gen）</strong></li></ul><p>年轻代特点：区域相对老年代较小，对象生命周期短、存活率低，回收频繁。</p><p>这种情况<strong>复制算法</strong>的回收整理，速度是最快的。复制算法的效率只和当前存活对象大小有关，因此很适用于年轻代的回收。而复制算法内存利用率不高的问题，通过 HotSpot 中的两个 Survivor 的设计得到缓解。</p><ul><li><strong>老年代（Tenured Gen）</strong></li></ul><p>老年代特点：区域较大，对象生命周期长、存活率高，回收不及年轻代频繁。</p><p>这种情况存在大量存活率高的对象，复制算法明显变得不合适。<strong>一般是由标记 - 清除或者是标记 - 清除与标记 - 整理的混合实现</strong>。</p><ul><li>Mark 阶段的开销与存活对象的数量成正比。</li><li>Sweep 阶段的开销与所管理区域的大小成正相关。</li><li>Compact 阶段的开销与存活对象的数据成正比。</li></ul><p>以 HotSpot 中的 CMS 回收器（老年代回收器）为例，CMS 是基于 Mark-Sweep 实现的，对于对象的回收效率很高。而对于碎片问题，CMS 采用基于 Mark-Compact 算法的 Serial Old 回收器作为补偿措施：当内存回收不佳（碎片导致的 Concurrent Mode Failure 时），将采用 Serial Old 执行 Full GC 以达到对老年代内存的整理。</p><p>分代的思想被现有的虚拟机广泛使用，几乎所有的垃圾回收器都区分新生代和老年代。</p><h1 id="增量收集算法" tabindex="-1"><a class="header-anchor" href="#增量收集算法" aria-hidden="true">#</a> 增量收集算法</h1><blockquote><p>概述</p></blockquote><p>上述现有的算法，在垃圾回收过程中，应用软件将处于一种 Stop the World 的状态。在 Stop the World 状态下，应用程序所有的线程都会挂起，暂停一切正常的工作，等待垃圾回收的完成。如果垃圾回收时间过长，应用程序会被挂起很久，将严重影响用户体验或者系统的稳定性。为了解决这个问题，即对实时垃圾收集算法的研究直接导致了增量收集（Incremental Collecting）算法的诞生。</p><blockquote><p>基本思想</p></blockquote><ul><li>如果一次性将所有的垃圾进行处理，需要造成系统长时间的停顿，那么就可以让垃圾收集线程和应用程序线程<strong>交替执行</strong>。每次，<strong>垃圾收集线程只收集一小片区域的内存空间，接着切换到应用程序线程。依次反复，直到垃圾收集完成。</strong></li><li>总的来说，增量收集算法的基础仍是传统的标记 - 清除和复制算法。<strong>增量收集算法通过对线程间冲突的妥善处理允许垃圾收集线程以分阶段的方式完成标记、清理或复制工作。</strong></li></ul><blockquote><p>缺点</p></blockquote><p>使用这种方式，由于在垃圾回收过程中，间断性地还执行了应用程序代码，所以能减少系统的停顿时间。但是，因为线程切换和上下文转换的消耗，会使得垃圾回收的总体成本上升，<strong>造成系统吞吐量的下降</strong>。</p><h1 id="分区算法" tabindex="-1"><a class="header-anchor" href="#分区算法" aria-hidden="true">#</a> 分区算法</h1><ul><li>一般来说，在相同条件下，堆空间越大，一次 GC 时所需要的时间就越长，有关 GC 产生的停顿也越长。为了更好地控制 GC 产生的停顿时间，将一块大的内存区域分割成多个小块，根据目标的停顿时间，每次合理地回收若干个小区间，而不是整个堆空间，从而减少一次 GC 所产生的停顿。</li><li>分代算法将按照对象的生命周期长短划分成两个部分，分区算法将整个堆空间划分成连续的不同小区间。</li><li>每一个小区间都独立使用，独立回收。这种算法的好处是可以控制一次回收多少个小区间。</li></ul><figure><img src="'+y+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure>',145),j=[x];function C(q,z){return s(),a("div",null,j)}const G=n(w,[["render",C],["__file","15.垃圾回收相关算法.html.vue"]]);export{G as default};
