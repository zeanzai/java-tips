import{_ as n,W as s,X as a,a2 as e}from"./framework-6a3aa88c.js";const t="/java-tips/assets/image-20220809110526087-379aff3a.webp",p="/java-tips/assets/image-20220809171520308-d0e659fa.webp",o="/java-tips/assets/image-20220810163454521-c3fd0f48.webp",l="/java-tips/assets/image-20220810194304356-b49ae43f.webp",c="/java-tips/assets/image-20220810235032740-5457191d.webp",i="/java-tips/assets/image-20220919172117338-9e02ef65.webp",u="/java-tips/assets/image-20220919174842822-dc1274bb.webp",r="/java-tips/assets/image-20220919175051480-4239fab6.webp",k="/java-tips/assets/image-20220920091657937-5cc25623.webp",d="/java-tips/assets/image-20220924133546730-dc1cf1e7.webp",v="/java-tips/assets/image-20220924135345615-306a6ab4.webp",m="/java-tips/assets/image-20220924141434215-c1e9c7d5.webp",b="/java-tips/assets/QQ截图20220924192536-9c5a4521.webp",g="/java-tips/assets/image-20220925112803220-43a2fb91.webp",h="/java-tips/assets/image-20220925113035776-dde090c7.webp",y={},f=e(`<h2 id="基础知识" tabindex="-1"><a class="header-anchor" href="#基础知识" aria-hidden="true">#</a> 基础知识</h2><h3 id="基础类型" tabindex="-1"><a class="header-anchor" href="#基础类型" aria-hidden="true">#</a> 基础类型</h3><p>Java中基本类型声明</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> <span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token string">&quot;Hello Java&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对照Kotlin中的声明：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> a<span class="token operator">:</span>Int <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">val</span> b<span class="token operator">:</span>String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello Kotlin&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="long类型" tabindex="-1"><a class="header-anchor" href="#long类型" aria-hidden="true">#</a> long类型</h3><p>Java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">long</span> c <span class="token operator">=</span> <span class="token number">12345678910l</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> d <span class="token operator">=</span> <span class="token number">12345678910L</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> c <span class="token operator">=</span> 12345678910l <span class="token comment">// error</span>
<span class="token keyword">val</span> d <span class="token operator">=</span> <span class="token number">12345678910L</span> <span class="token comment">// fine</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数值转换" tabindex="-1"><a class="header-anchor" href="#数值转换" aria-hidden="true">#</a> 数值转换</h3><p>Java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> e <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> f <span class="token operator">=</span> e<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> e<span class="token operator">:</span>Int <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">val</span> f<span class="token operator">:</span>Long <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">toLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="无符号类型" tabindex="-1"><a class="header-anchor" href="#无符号类型" aria-hidden="true">#</a> 无符号类型</h3><p>Java没有，但是kotlin有</p><figure><img src="`+t+`" alt="image-20220809110526087" tabindex="0" loading="lazy"><figcaption>image-20220809110526087</figcaption></figure><h3 id="字符串模板" tabindex="-1"><a class="header-anchor" href="#字符串模板" aria-hidden="true">#</a> 字符串模板</h3><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> j <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;I Love China&quot;</span></span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Value of String j is: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">j</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="比较运算" tabindex="-1"><a class="header-anchor" href="#比较运算" aria-hidden="true">#</a> 比较运算</h3><p>在Java中<mark>比较引用，<code>equals()</code>比较内容，而在Kotlin中</mark>=比较的是引用，==比较的是内容</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token operator">==</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token operator">===</span>m<span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span>k<span class="token operator">==</span>m<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h3><figure><img src="`+p+`" alt="image-20220809171520308" tabindex="0" loading="lazy"><figcaption>image-20220809171520308</figcaption></figure><h4 id="数组的创建" tabindex="-1"><a class="header-anchor" href="#数组的创建" aria-hidden="true">#</a> 数组的创建</h4><p>Java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Kotlin</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> c0 <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> c1 <span class="token operator">=</span> <span class="token function">IntArray</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>it <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数组的长度" tabindex="-1"><a class="header-anchor" href="#数组的长度" aria-hidden="true">#</a> 数组的长度</h4><p>Java中使用length来计算</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin则使用size</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> a <span class="token operator">=</span> <span class="token function">IntArray</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>size<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数组的遍历" tabindex="-1"><a class="header-anchor" href="#数组的遍历" aria-hidden="true">#</a> 数组的遍历</h4><p>Java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">float</span> element <span class="token operator">:</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> e <span class="token operator">=</span> <span class="token function">floatArrayOf</span><span class="token punctuation">(</span><span class="token number">1f</span><span class="token punctuation">,</span> <span class="token number">3f</span><span class="token punctuation">,</span> <span class="token number">5f</span><span class="token punctuation">,</span> <span class="token number">7f</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>element <span class="token keyword">in</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">or</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
e<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> element <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数组的包含关系" tabindex="-1"><a class="header-anchor" href="#数组的包含关系" aria-hidden="true">#</a> 数组的包含关系</h4><p>Java中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">float</span> element<span class="token operator">:</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">==</span> <span class="token number">1f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;1f exists in variale &#39;e&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1f</span> <span class="token keyword">in</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;1f exists in variale &#39;e&#39;&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="区间" tabindex="-1"><a class="header-anchor" href="#区间" aria-hidden="true">#</a> 区间</h3><h4 id="符号" tabindex="-1"><a class="header-anchor" href="#符号" aria-hidden="true">#</a> ..符号</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> intRange <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">10</span>
<span class="token comment">/*for (i in intRange) {
        println(i)
    }*/</span>
<span class="token keyword">val</span> charRange <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token operator">..</span><span class="token char">&#39;z&#39;</span>
<span class="token keyword">val</span> longRange <span class="token operator">=</span> <span class="token number">1L</span><span class="token operator">..</span><span class="token number">10L</span>
<span class="token keyword">val</span> floatRange <span class="token operator">=</span> <span class="token number">1f</span><span class="token operator">..</span><span class="token number">10f</span>
<span class="token keyword">val</span> doubleRange <span class="token operator">=</span> <span class="token number">1.0</span><span class="token operator">..</span><span class="token number">2.0</span>
<span class="token function">println</span><span class="token punctuation">(</span>intRange<span class="token punctuation">.</span><span class="token function">joinToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span>charRange<span class="token punctuation">.</span><span class="token function">joinToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>
<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span>
a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">,</span> g<span class="token punctuation">,</span> h<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> o<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> r<span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="步距step" tabindex="-1"><a class="header-anchor" href="#步距step" aria-hidden="true">#</a> 步距step</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> intRangeStep <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">10</span> step <span class="token number">2</span>
<span class="token keyword">val</span> charRangeStep <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token operator">..</span><span class="token char">&#39;z&#39;</span> step <span class="token number">2</span>
<span class="token function">println</span><span class="token punctuation">(</span>intRangeStep<span class="token punctuation">.</span><span class="token function">joinToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span>charRangeStep<span class="token punctuation">.</span><span class="token function">joinToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span>
<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span>
a<span class="token punctuation">,</span> c<span class="token punctuation">,</span> e<span class="token punctuation">,</span> g<span class="token punctuation">,</span> i<span class="token punctuation">,</span> k<span class="token punctuation">,</span> m<span class="token punctuation">,</span> o<span class="token punctuation">,</span> q<span class="token punctuation">,</span> s<span class="token punctuation">,</span> u<span class="token punctuation">,</span> w<span class="token punctuation">,</span> y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="until" tabindex="-1"><a class="header-anchor" href="#until" aria-hidden="true">#</a> until</h4><p>until和..的区别在于，它是右闭区间</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> intRangeUtil <span class="token operator">=</span> <span class="token number">1</span> until <span class="token number">10</span>
<span class="token keyword">val</span> charRangeUtil <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span> until <span class="token char">&#39;z&#39;</span>
<span class="token function">println</span><span class="token punctuation">(</span>intRangeUtil<span class="token punctuation">.</span><span class="token function">joinToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span>charRangeUtil<span class="token punctuation">.</span><span class="token function">joinToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>
<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span>
a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">,</span> g<span class="token punctuation">,</span> h<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> o<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> r<span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="倒数-downto" tabindex="-1"><a class="header-anchor" href="#倒数-downto" aria-hidden="true">#</a> 倒数：downTo</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> intRangeDownto <span class="token operator">=</span> <span class="token number">10</span> downTo <span class="token number">1</span>
<span class="token keyword">val</span> charRangeDownto <span class="token operator">=</span> <span class="token char">&#39;z&#39;</span> downTo <span class="token char">&#39;a&#39;</span>
<span class="token function">println</span><span class="token punctuation">(</span>intRangeDownto<span class="token punctuation">.</span><span class="token function">joinToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span>charRangeDownto<span class="token punctuation">.</span><span class="token function">joinToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="区间的遍历" tabindex="-1"><a class="header-anchor" href="#区间的遍历" aria-hidden="true">#</a> 区间的遍历</h4><p>在Java中遍历数组是可以是这样</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在kotlin中</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> array <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">0</span> until array<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更加简化的版本是</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">in</span> array<span class="token punctuation">.</span>indices<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="集合" tabindex="-1"><a class="header-anchor" href="#集合" aria-hidden="true">#</a> 集合</h3><figure><img src="`+o+`" alt="image-20220810163454521" tabindex="0" loading="lazy"><figcaption>image-20220810163454521</figcaption></figure><h4 id="list" tabindex="-1"><a class="header-anchor" href="#list" aria-hidden="true">#</a> List</h4><p>Java中创建ArrayList</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> intList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Kotlin中则分为可变List和不可变</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> intList<span class="token operator">:</span> List<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> intList2<span class="token operator">:</span> MutableList<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想像Java一样创建集合则</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> stringList <span class="token operator">=</span> ArrayList<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么它是如何实现创建集合和Java一样的呢？<strong>类型别名</strong></p><figure><img src="`+l+`" alt="image-20220810194304356" tabindex="0" loading="lazy"><figcaption>image-20220810194304356</figcaption></figure><h5 id="增加元素-删除元素" tabindex="-1"><a class="header-anchor" href="#增加元素-删除元素" aria-hidden="true">#</a> 增加元素/删除元素</h5><p>Java中的添加元素</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stringList<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;num: &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>kotlin的添加元素</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> stringList <span class="token operator">=</span> ArrayList<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stringList <span class="token operator">+=</span> <span class="token string-literal singleline"><span class="token string">&quot;num: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string">&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin中的删除元素则是</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stringList <span class="token operator">-=</span> <span class="token string-literal singleline"><span class="token string">&quot;num: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string">&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="读写元素" tabindex="-1"><a class="header-anchor" href="#读写元素" aria-hidden="true">#</a> 读写元素</h5><p>Java中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>stringList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&quot;HelloWorld&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> valueAt5 <span class="token operator">=</span> stringList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>stringList<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;HelloWorld&quot;</span></span>
<span class="token keyword">val</span> valueAt5 <span class="token operator">=</span> stringList<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> map</h4><p>Java中读写元素</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">HashMap</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span> out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> map <span class="token operator">=</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Int<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
map<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>
<span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="pair" tabindex="-1"><a class="header-anchor" href="#pair" aria-hidden="true">#</a> pair</h4><p>如何创建？</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> pair <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span> <span class="token keyword">to</span> <span class="token string-literal singleline"><span class="token string">&quot;Kotlin&quot;</span></span>
<span class="token keyword">val</span> pair2 <span class="token operator">=</span> <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Kotlin&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>访问对应元素</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> first <span class="token operator">=</span> pair<span class="token punctuation">.</span>first
<span class="token keyword">val</span> second <span class="token operator">=</span> pair<span class="token punctuation">.</span>second
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对象解构</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=</span> pair
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h3><p>结构如下：</p><figure><img src="`+c+`" alt="image-20220810235032740" tabindex="0" loading="lazy"><figcaption>image-20220810235032740</figcaption></figure><h4 id="函数引用" tabindex="-1"><a class="header-anchor" href="#函数引用" aria-hidden="true">#</a> 函数引用</h4><p>这个和Java8的函数应用一致</p><p>符号是：<code>::</code></p><p>像是定义了一个函数</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Foo <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要使用它的引用<code>Foo::bar</code></p><h4 id="变长参数" tabindex="-1"><a class="header-anchor" href="#变长参数" aria-hidden="true">#</a> 变长参数</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token keyword">vararg</span> args<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">contentToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">test1</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>
<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="多返回值" tabindex="-1"><a class="header-anchor" href="#多返回值" aria-hidden="true">#</a> 多返回值</h4><p>定义返回一个Triple</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">multiRetureValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Triple<span class="token operator">&lt;</span>Int<span class="token punctuation">,</span> Long<span class="token punctuation">,</span> Double<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">Triple</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3L</span><span class="token punctuation">,</span> <span class="token number">4.0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用的时候就可以使用对象解构</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">multiRetureValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="默认参数" tabindex="-1"><a class="header-anchor" href="#默认参数" aria-hidden="true">#</a> 默认参数</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">defaultParameter</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> y<span class="token operator">:</span> String<span class="token punctuation">,</span> z<span class="token operator">:</span> Long <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">x</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">y</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">z</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时，Kotlin支持具名参数</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token function">defaultParameter</span><span class="token punctuation">(</span>y <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="类-接口" tabindex="-1"><a class="header-anchor" href="#类-接口" aria-hidden="true">#</a> 类 &amp; 接口</h3><p>Java中定义类中的成员遍历不需要赋值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleClass</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin中必须给成员变量赋值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">SimpleClass</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> x<span class="token operator">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">0</span>
    fun <span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="构造方法" tabindex="-1"><a class="header-anchor" href="#构造方法" aria-hidden="true">#</a> 构造方法</h4><p>Java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleClass</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">SimpleClass</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin，但是下面的风格不适合Kotlin</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> SimpleClass<span class="token punctuation">{</span>
    <span class="token keyword">var</span> x<span class="token operator">:</span> Int
    <span class="token keyword">constructor</span><span class="token punctuation">(</span>x<span class="token operator">:</span>Int<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x
    <span class="token punctuation">}</span>
    <span class="token operator">..</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面这个风格才是Kotlin</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> SimpleClass
<span class="token keyword">constructor</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> x<span class="token operator">:</span>Int <span class="token operator">=</span> x
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以再进一步简化</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">SimpleClass</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="类的实例化" tabindex="-1"><a class="header-anchor" href="#类的实例化" aria-hidden="true">#</a> 类的实例化</h4><p>Java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">SimpleClass</span> simpleClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleClass</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">outprintln</span><span class="token punctuation">(</span>simpleClass<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
simpleClass<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin，不需要new</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> simpleClass <span class="token operator">=</span> <span class="token function">SimpleClass</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span>simpleClass<span class="token punctuation">.</span>x<span class="token punctuation">)</span>
simpleClass<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="接口" tabindex="-1"><a class="header-anchor" href="#接口" aria-hidden="true">#</a> 接口</h4><p>Java中的接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SimpleInf</span> <span class="token punctuation">{</span>
<span class="token keyword">void</span> <span class="token function">simpleMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin中的接口（不需要写public，默认）</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">interface</span> Simplelnf <span class="token punctuation">{</span>
<span class="token keyword">fun</span> <span class="token function">simpleMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现接口" tabindex="-1"><a class="header-anchor" href="#实现接口" aria-hidden="true">#</a> 实现接口</h4><p>Java中实现接口的方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleClass</span> <span class="token keyword">implements</span> <span class="token class-name">SimpleInf</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">simpleMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin（使用override）</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">SimpleClass</span><span class="token punctuation">(</span><span class="token keyword">var</span> x<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> SimpleInf <span class="token punctuation">{</span>
<span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">simpleMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="抽象类定义" tabindex="-1"><a class="header-anchor" href="#抽象类定义" aria-hidden="true">#</a> 抽象类定义</h4><p>Java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbsClass</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">absMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">overridable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">nonOverridable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin（默认不可以覆写，只有通过<code>open</code>才能被覆写）</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> AbsClass <span class="token punctuation">{</span>
    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">absMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">overridable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">fun</span> <span class="token function">nonOverridable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="类的继承" tabindex="-1"><a class="header-anchor" href="#类的继承" aria-hidden="true">#</a> 类的继承</h4><p>Java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleClassextends</span> <span class="token class-name">AbsClass</span> <span class="token keyword">implements</span> <span class="token class-name">Simplelnf</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin（注意继承类的时候<code>加上括号，表示调用父类的构造方法</code>）</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">SimpleClass</span><span class="token punctuation">(</span><span class="token keyword">var</span> x<span class="token operator">:</span>Int<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">AbsClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SimpleInf<span class="token punctuation">{</span>
    <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="属性引用" tabindex="-1"><a class="header-anchor" href="#属性引用" aria-hidden="true">#</a> 属性引用</h4><p>这个基本和函数引用差不多</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">var</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">var</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">val</span> ageRef <span class="token operator">=</span> Person<span class="token operator">::</span>age
<span class="token keyword">val</span> nameRef <span class="token operator">=</span> person<span class="token operator">::</span>name
<span class="token keyword">val</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Bennyhuo&quot;</span></span><span class="token punctuation">)</span>
ageRef<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
nameRef<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Andyhuo&quot;</span></span><span class="token punctuation">)</span>
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span>
Andyhuo
<span class="token number">20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="空类型安全" tabindex="-1"><a class="header-anchor" href="#空类型安全" aria-hidden="true">#</a> 空类型安全</h3><p>在类的章节中已经介绍了，如果Kotlin中声明了一个成员变量，就必须给变量赋值，那么怎么为空呢？就是加一个<code>?</code></p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> nullable<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span>
nullable <span class="token operator">=</span> <span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果加了<code>?</code>那么在某些情况就会编译错误</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> length <span class="token operator">=</span> nullable<span class="token punctuation">.</span>length
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>【不推荐】那么也可以强制使用，就是使用<code>!!</code>，使用的时候要知道它肯定有值</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> length <span class="token operator">=</span> nullable<span class="token operator">!!</span><span class="token punctuation">.</span>length
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么也可以安全访问，使用<code>?</code></p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> length <span class="token operator">=</span> nullable<span class="token operator">?</span><span class="token punctuation">.</span>length
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以使用<code>elvis</code>运算符 <code>?:</code></p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> length <span class="token operator">=</span> nullable<span class="token operator">?</span><span class="token punctuation">.</span>length <span class="token operator">?:</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="父子替换" tabindex="-1"><a class="header-anchor" href="#父子替换" aria-hidden="true">#</a> 父子替换</h3><p>父类可以替换为子类，但是反过来不行（Number是Int的父类）<code>小的可以替换大的</code></p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> x<span class="token operator">:</span> String <span class="token operator">=</span> &quot;Hello&#39;
<span class="token keyword">var</span> y<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;World&quot;</span></span>
x<span class="token operator">=</span>y <span class="token comment">// Type mismatch</span>
y<span class="token operator">=</span>x<span class="token comment">// OK</span>
<span class="token keyword">var</span> a<span class="token operator">:</span>Int <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">var</span> b<span class="token operator">:</span> Number <span class="token operator">=</span> <span class="token number">10.0</span>
a<span class="token operator">=</span>b <span class="token comment">// Type mismatch</span>
b<span class="token operator">=</span>a<span class="token comment">//OK</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="智能类型转换" tabindex="-1"><a class="header-anchor" href="#智能类型转换" aria-hidden="true">#</a> 智能类型转换</h3><p>例如下面的这段代码：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> kotliner<span class="token operator">:</span> Kotliner <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;benny&quot;</span></span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>kotliner <span class="token keyword">is</span> Person<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>kotliner <span class="token keyword">as</span> Person<span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin的智能转换可以换成下面，Kotliner自动转换成Person</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> kotliner<span class="token operator">:</span> Kotliner <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;benny&quot;</span></span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>kotliner <span class="token keyword">is</span> Person<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token function">println</span><span class="token punctuation">(</span>kotliner<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="空类型的自动转换" tabindex="-1"><a class="header-anchor" href="#空类型的自动转换" aria-hidden="true">#</a> 空类型的自动转换</h4><ul><li>在if之前是是<code>String?</code></li><li>if中：<code>String</code></li><li>if后：<code>String?</code></li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> value<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>
value <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;benny&quot;</span></span>
<span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">!=</span> nulI<span class="token punctuation">)</span><span class="token punctuation">{</span> t
	<span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="表达式" tabindex="-1"><a class="header-anchor" href="#表达式" aria-hidden="true">#</a> 表达式</h3><h4 id="分支表达式" tabindex="-1"><a class="header-anchor" href="#分支表达式" aria-hidden="true">#</a> 分支表达式</h4><h5 id="if-else区别" tabindex="-1"><a class="header-anchor" href="#if-else区别" aria-hidden="true">#</a> if..else区别</h5><p>Java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>c <span class="token operator">=</span> a <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token number">4</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Kotlin</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>c <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">4</span> <span class="token keyword">else</span> <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="switch-when" tabindex="-1"><a class="header-anchor" href="#switch-when" aria-hidden="true">#</a> switch &amp; when</h5><p>Java中的switch</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">switch</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">0</span> <span class="token operator">:</span>
        c <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">1</span> <span class="token operator">:</span>
        c <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span> <span class="token operator">:</span>
        c <span class="token operator">=</span> <span class="token number">20</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin中的when</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">when</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token number">0</span> <span class="token operator">-&gt;</span> c <span class="token operator">=</span> <span class="token number">5</span>
    <span class="token number">1</span> <span class="token operator">-&gt;</span> c <span class="token operator">=</span> <span class="token number">100</span>
    <span class="token keyword">else</span> <span class="token operator">-&gt;</span> c <span class="token operator">=</span> <span class="token number">20</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin中when的智能转换(如果x是字符串，则在<code>x.length</code>自动转换成字符串)</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> x<span class="token operator">:</span> Any <span class="token operator">=</span> <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token keyword">when</span> <span class="token punctuation">{</span>
    x <span class="token keyword">is</span> String <span class="token operator">-&gt;</span> c <span class="token operator">=</span> x<span class="token punctuation">.</span>length
    x <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">-&gt;</span> c <span class="token operator">=</span> <span class="token number">100</span>
    <span class="token keyword">else</span> c <span class="token operator">=</span> <span class="token number">20</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="捕获异常" tabindex="-1"><a class="header-anchor" href="#捕获异常" aria-hidden="true">#</a> 捕获异常</h4><p>Java和Kotlin都一致</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    c <span class="token operator">=</span> a <span class="token operator">/</span> b
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    c <span class="token operator">=</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是Kotlin可以进一步写为</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>c <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>
    a <span class="token operator">/</span> b
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    c <span class="token operator">=</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="中缀表达式" tabindex="-1"><a class="header-anchor" href="#中缀表达式" aria-hidden="true">#</a> 中缀表达式</h4><p><code>infix</code> 定义了Kotlin的简写</p><p>infix函数（中缀方法）需要几个条件:</p><ul><li>只有<code>一个参数</code></li><li>在方法前必须加<code>infix</code>关键字</li><li>必须是<code>成员方法</code>或者<code>扩展方法</code></li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;HelloWorld&quot;</span></span> rotate <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">infix</span> <span class="token keyword">fun</span> String<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>count<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
    <span class="token keyword">val</span> index <span class="token operator">=</span> count <span class="token operator">%</span> length
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">==</span>
WorldHello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再例如</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Book
<span class="token keyword">class</span> Desk

<span class="token keyword">infix</span> <span class="token keyword">fun</span> Book<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>desk<span class="token operator">:</span> Desk<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> book <span class="token operator">=</span> <span class="token function">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> desk <span class="token operator">=</span> <span class="token function">Desk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    book on desk <span class="token comment">// 具体用法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="lambda表达式" tabindex="-1"><a class="header-anchor" href="#lambda表达式" aria-hidden="true">#</a> Lambda表达式</h4><h5 id="匿名函数" tabindex="-1"><a class="header-anchor" href="#匿名函数" aria-hidden="true">#</a> 匿名函数</h5><p>func是变量名</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> func <span class="token operator">=</span> <span class="token keyword">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 调用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="匿名函数的类型" tabindex="-1"><a class="header-anchor" href="#匿名函数的类型" aria-hidden="true">#</a> 匿名函数的类型</h5><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> func<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit <span class="token operator">=</span> <span class="token keyword">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="lambda表达式-1" tabindex="-1"><a class="header-anchor" href="#lambda表达式-1" aria-hidden="true">#</a> Lambda表达式</h5><p>Java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Jdk 8</span>
<span class="token class-name">Runnable</span> lambda <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
<span class="token comment">// Jdk 10以上</span>
<span class="token keyword">var</span> lambda <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> lambda <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 有返回参数的</span>
<span class="token keyword">val</span> lambda<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表达式参数类型从表达式类型推断出来</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> f1<span class="token operator">:</span> <span class="token punctuation">(</span>Int<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>
        p<span class="token operator">:</span> Int <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> f1<span class="token operator">:</span> Function1<span class="token operator">&lt;</span>Int<span class="token punctuation">,</span> Unit<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
        p <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表达式从声明推断而来</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> f1 <span class="token operator">=</span> <span class="token punctuation">{</span>
        p<span class="token operator">:</span> Int <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表达式的<code>最后一行表示返回值</code></p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> f1 <span class="token operator">=</span> <span class="token punctuation">{</span>
        p<span class="token operator">:</span> Int <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
        <span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外还有省略参数的形式</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> f1<span class="token operator">:</span> Function1<span class="token operator">&lt;</span>Int<span class="token punctuation">,</span> Unit<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
        <span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自己实现hashcode注意问题" tabindex="-1"><a class="header-anchor" href="#自己实现hashcode注意问题" aria-hidden="true">#</a> 自己实现hashcode注意问题</h4><p>需要注意的是：自己实现hashcode如果某个变量发生了变化要移除是移除不了的，除非定义构造函数的时候使用val而不是var</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">var</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">var</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">equals</span><span class="token punctuation">(</span>other<span class="token operator">:</span> Any<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span>
        <span class="token keyword">val</span> other <span class="token operator">=</span> other <span class="token keyword">as</span><span class="token operator">?</span> Person <span class="token operator">?:</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
        <span class="token keyword">return</span> other<span class="token punctuation">.</span>age <span class="token operator">==</span> age <span class="token operator">&amp;&amp;</span> other<span class="token punctuation">.</span>name <span class="token operator">==</span> name
    <span class="token punctuation">}</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">7</span> <span class="token operator">*</span> age <span class="token operator">+</span> <span class="token number">13</span> <span class="token operator">*</span> name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> persons <span class="token operator">=</span> HashSet<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">//    (0..5).forEach{</span>
    <span class="token keyword">val</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Benny&quot;</span></span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
    persons <span class="token operator">+=</span> person
<span class="token comment">//    }</span>

    <span class="token function">println</span><span class="token punctuation">(</span>persons<span class="token punctuation">.</span>size<span class="token punctuation">)</span>
    person<span class="token punctuation">.</span>age<span class="token operator">++</span> <span class="token comment">// 变化</span>

    persons <span class="token operator">-=</span> person <span class="token comment">// 移除不了</span>

    <span class="token function">println</span><span class="token punctuation">(</span>persons<span class="token punctuation">.</span>size<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>
<span class="token number">1</span>
<span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="高阶函数" tabindex="-1"><a class="header-anchor" href="#高阶函数" aria-hidden="true">#</a> 高阶函数</h3><h4 id="内联函数" tabindex="-1"><a class="header-anchor" href="#内联函数" aria-hidden="true">#</a> 内联函数</h4><ul><li>public/protected的内联方法只能访问对应类的public成员</li><li>内联函数的内联函数参数不能被存储(赋值给变量)</li><li>内联函数的内联函数参数只能传递给其他内联函数参数</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">cost</span><span class="token punctuation">(</span>block<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cost <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述的写法相当于，如果不加<code>inline</code>则就是一个Lambda表达式</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="non-local-return" tabindex="-1"><a class="header-anchor" href="#non-local-return" aria-hidden="true">#</a> non-local return</h4><p>定义</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">nonLocalReturen</span><span class="token punctuation">(</span>block<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>

nonLocalReturn<span class="token punctuation">{</span>
    <span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何禁止？ <code>crossinline</code></p><h4 id="几个有用的高阶函数" tabindex="-1"><a class="header-anchor" href="#几个有用的高阶函数" aria-hidden="true">#</a> 几个有用的高阶函数</h4><figure><img src="`+i+`" alt="image-20220919172117338" tabindex="0" loading="lazy"><figcaption>image-20220919172117338</figcaption></figure><h4 id="集合遍历" tabindex="-1"><a class="header-anchor" href="#集合遍历" aria-hidden="true">#</a> 集合遍历</h4><h5 id="filter操作" tabindex="-1"><a class="header-anchor" href="#filter操作" aria-hidden="true">#</a> filter操作</h5><p>Java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Kotlin</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>list<span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span> it <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Kotlin还可以转换为懒序列</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>list<span class="token punctuation">.</span><span class="token function">asSequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span> it <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="map-1" tabindex="-1"><a class="header-anchor" href="#map-1" aria-hidden="true">#</a> map</h5><p>Java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Kotlin</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>list<span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span> it <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="flatmap" tabindex="-1"><a class="header-anchor" href="#flatmap" aria-hidden="true">#</a> flatMap</h5><figure><img src="`+u+`" alt="image-20220919174842822" tabindex="0" loading="lazy"><figcaption>image-20220919174842822</figcaption></figure><p>Java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> e<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> list1<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>list<span class="token punctuation">.</span><span class="token function">flatMap</span> <span class="token punctuation">{</span> <span class="token number">0</span> until it <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token operator">::</span>print<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="fold" tabindex="-1"><a class="header-anchor" href="#fold" aria-hidden="true">#</a> fold</h5><figure><img src="`+r+'" alt="image-20220919175051480" tabindex="0" loading="lazy"><figcaption>image-20220919175051480</figcaption></figure><h4 id="sam转换" tabindex="-1"><a class="header-anchor" href="#sam转换" aria-hidden="true">#</a> SAM转换</h4><p>Java</p><ul><li>一个参数类型为只有一个方法的接口的方法调用时可用Lambda表达式做转换作为参数</li></ul><p>Kotlin</p><ul><li>一个参数类型为只有一个方法的Java接口的Java方法调用时可用Lambda表达式做转换作为参数</li></ul><figure><img src="'+k+`" alt="image-20220920091657937" tabindex="0" loading="lazy"><figcaption>image-20220920091657937</figcaption></figure><h3 id="类的进阶" tabindex="-1"><a class="header-anchor" href="#类的进阶" aria-hidden="true">#</a> 类的进阶</h3><h3 id="构造器" tabindex="-1"><a class="header-anchor" href="#构造器" aria-hidden="true">#</a> 构造器</h3><h4 id="构造器的基本写法" tabindex="-1"><a class="header-anchor" href="#构造器的基本写法" aria-hidden="true">#</a> 构造器的基本写法</h4><p>前一个类内全局可见，name构造器可见（init块，属性初始化）</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">var</span> age<span class="token operator">:</span> Int<span class="token punctuation">,</span> name<span class="token operator">:</span> String<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="init块" tabindex="-1"><a class="header-anchor" href="#init块" aria-hidden="true">#</a> init块</h4><p>init块可以有多个</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">var</span> age<span class="token operator">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> name<span class="token operator">:</span> <span class="token class-name">String</span>
    init <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> firstName <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    init <span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="继承及调用副构造器" tabindex="-1"><a class="header-anchor" href="#继承及调用副构造器" aria-hidden="true">#</a> 继承及调用副构造器</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">var</span> age<span class="token operator">:</span> Int<span class="token punctuation">,</span> name<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Animals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">constructor</span><span class="token punctuation">(</span>age<span class="token operator">:</span>Int<span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;unknown&quot;</span></span><span class="token punctuation">)</span>
    <span class="token comment">// 定义了主构造器后在类内部</span>
    <span class="token comment">// 再定义构造器都称为副构造器</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="默认构造器" tabindex="-1"><a class="header-anchor" href="#默认构造器" aria-hidden="true">#</a> 默认构造器</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">var</span> age<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;unknown&quot;</span></span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Animals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果要让Java以重载的方式调用可以加上注解<code>@JvmOverLoads</code></p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>
<span class="token keyword">class</span> Person
<span class="token annotation builtin">@JvmOverLoads</span>
<span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">var</span> age<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;unknown&quot;</span></span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Animals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类成员的可见性" tabindex="-1"><a class="header-anchor" href="#类成员的可见性" aria-hidden="true">#</a> 类成员的可见性</h3><h4 id="default-internal" tabindex="-1"><a class="header-anchor" href="#default-internal" aria-hidden="true">#</a> default &amp; internal</h4><ul><li>一般由SDK或公共组件开发者用于隐藏模块内部细节实现</li><li>default可通过外部创建相同包名来访问,访问控制非常弱</li><li>default会导致不同抽象层次的类聚集到相同包之下</li><li>internal可方便处理内外隔离,提升模块代码内聚减少接口暴露</li><li>internal修饰的Kotlin类或成员在Java当中可直接访问</li></ul><h3 id="延迟初始化" tabindex="-1"><a class="header-anchor" href="#延迟初始化" aria-hidden="true">#</a> 延迟初始化</h3><h4 id="使用null" tabindex="-1"><a class="header-anchor" href="#使用null" aria-hidden="true">#</a> 使用null</h4><p>如果非要初始化（像是安卓里的TextView）那么有以下解决方案</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">private</span> <span class="token keyword">var</span> nameView<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="lateinit" tabindex="-1"><a class="header-anchor" href="#lateinit" aria-hidden="true">#</a> lateinit</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> nameView<span class="token operator">:</span> TextView
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>判断<code>lateinit</code>如何初始化</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">::</span>nameView<span class="token punctuation">.</span>isInitialized<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>lateinit会让编译器忽略变量的初始化,不支持Int等基本类型</li><li>开发者必须能够在完全确定变量值的生命周期下使用lateinit</li><li>不要在复杂的逻辑中使用lateinit，它只会让你的代码更加脆弱</li><li>Kotlin 1.2加入的判断lateinit属性是否初始化的API最好不要用</li></ul><h4 id="【推荐】lazy" tabindex="-1"><a class="header-anchor" href="#【推荐】lazy" aria-hidden="true">#</a> 【推荐】lazy</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">private</span> <span class="token keyword">val</span> nameView <span class="token keyword">by</span> lazy <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代理" tabindex="-1"><a class="header-anchor" href="#代理" aria-hidden="true">#</a> 代理</h3><h4 id="接口代理" tabindex="-1"><a class="header-anchor" href="#接口代理" aria-hidden="true">#</a> 接口代理</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">interface</span> Api <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">fun</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">fun</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token keyword">class</span> ApiImpl <span class="token operator">:</span> Api <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用接口代理（日志、埋点）</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">ApiWrapper</span><span class="token punctuation">(</span><span class="token keyword">val</span> api<span class="token operator">:</span> Api<span class="token punctuation">)</span> 
<span class="token operator">:</span> Api <span class="token keyword">by</span> api <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;c is called&quot;</span></span><span class="token punctuation">)</span>
        api<span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式" aria-hidden="true">#</a> 单例模式</h3><p>饿汉式在Java中是体现在new,类加载时实例化对象<code>Singleton</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">object</span> Singleton <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如何访问object成员呢？</p><p>kotlin</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">object</span> Singleton <span class="token punctuation">{</span>
    <span class="token keyword">var</span> x<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">2</span>
    <span class="token keyword">fun</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

Singleton<span class="token punctuation">.</span>x
Singleton<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">setX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="静态成员-jvmstatic" tabindex="-1"><a class="header-anchor" href="#静态成员-jvmstatic" aria-hidden="true">#</a> 静态成员 @JvmStatic</h4><p>这样声明之后是静态的，但是还是需要getter/setter</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">object</span> Singleton <span class="token punctuation">{</span>
    <span class="token annotation builtin">@JvmStatic</span> <span class="token keyword">var</span> x<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">2</span>
    <span class="token annotation builtin">@JvmStatic</span> <span class="token keyword">fun</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用<code>@JvmField</code>，在被Java调用的时候就可以不用getter/setter</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">object</span> Singleton <span class="token punctuation">{</span>
    <span class="token annotation builtin">@JvmField</span> <span class="token keyword">var</span> x<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">2</span>
    <span class="token annotation builtin">@JvmStatic</span> <span class="token keyword">fun</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="伴生对象" tabindex="-1"><a class="header-anchor" href="#伴生对象" aria-hidden="true">#</a> 伴生对象</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Foo <span class="token punctuation">{</span>
    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>
        <span class="token annotation builtin">@JvmStatic</span> <span class="token keyword">fun</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Java中是这样</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内部类" tabindex="-1"><a class="header-anchor" href="#内部类" aria-hidden="true">#</a> 内部类</h3><p>Java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">StaticInner</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Outer <span class="token punctuation">{</span>
    <span class="token keyword">inner</span> <span class="token keyword">class</span> Inner
    <span class="token keyword">class</span> StaticInner
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="内部object" tabindex="-1"><a class="header-anchor" href="#内部object" aria-hidden="true">#</a> 内部object</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">object</span> OuterObject<span class="token punctuation">{</span>
    <span class="token keyword">object</span> StaticInnerObject
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="匿名内部类" tabindex="-1"><a class="header-anchor" href="#匿名内部类" aria-hidden="true">#</a> 匿名内部类</h4><p>容易造成泄露,因为它定义在非静态区域</p><p>Java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin，可以看到object后直接忽略了名字</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">object</span><span class="token operator">:</span> Runnable<span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java中不支持<code>实现多个接口的匿名内部类</code>，但是Kotlin支持</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">object</span><span class="token operator">:</span> Cloneable<span class="token punctuation">,</span> Runnable<span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据类" tabindex="-1"><a class="header-anchor" href="#数据类" aria-hidden="true">#</a> 数据类</h3><p>定义之前加一个<code>data</code></p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Book</span><span class="token punctuation">(</span><span class="token keyword">val</span> id<span class="token operator">:</span> Long<span class="token punctuation">,</span>
               <span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span>
               <span class="token keyword">val</span> author<span class="token operator">:</span> String<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比较Java可以看到这个在干嘛（@Data来源于Lombok）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Person</span> person<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数据类解构" tabindex="-1"><a class="header-anchor" href="#数据类解构" aria-hidden="true">#</a> 数据类解构</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> pair <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span> <span class="token keyword">to</span> <span class="token string-literal singleline"><span class="token string">&quot;World&quot;</span></span>
    <span class="token keyword">val</span> <span class="token punctuation">(</span>hello<span class="token punctuation">,</span> world<span class="token punctuation">)</span> <span class="token operator">=</span> pair
<span class="token punctuation">}</span>
<span class="token comment">//结构原理</span>
<span class="token keyword">data</span> <span class="token keyword">class</span> Pair<span class="token operator">&lt;</span><span class="token keyword">out</span> A<span class="token punctuation">,</span> <span class="token keyword">out</span> B<span class="token operator">&gt;</span> <span class="token punctuation">(</span>
    <span class="token keyword">public</span> <span class="token keyword">val</span> first<span class="token operator">:</span> A<span class="token punctuation">,</span>
    <span class="token keyword">public</span> <span class="token keyword">val</span> second<span class="token operator">:</span> B
<span class="token punctuation">)</span><span class="token operator">:</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java Bean &amp; data class</p><figure><img src="`+d+`" alt="image-20220924133546730" tabindex="0" loading="lazy"><figcaption>image-20220924133546730</figcaption></figure><h4 id="json序列化示例" tabindex="-1"><a class="header-anchor" href="#json序列化示例" aria-hidden="true">#</a> JSON序列化示例</h4><h5 id="gson" tabindex="-1"><a class="header-anchor" href="#gson" aria-hidden="true">#</a> Gson</h5><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span>String<span class="token punctuation">,</span> <span class="token keyword">val</span> age<span class="token operator">:</span>Int<span class="token punctuation">)</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string-literal multiline"><span class="token string">&quot;&quot;&quot;
        {
    &quot;name&quot;: &quot;请求成功&quot;,
    &quot;age&quot;: &quot;18&quot;
}
    &quot;&quot;&quot;</span></span><span class="token punctuation">.</span><span class="token function">trimIndent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Zhiyu 1998&quot;</span></span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> Person<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="moshi" tabindex="-1"><a class="header-anchor" href="#moshi" aria-hidden="true">#</a> Moshi</h5><p>导包：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;com.squareup.moshi:moshi-kotlin:1.14.0&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> moshi<span class="token operator">:</span> Moshi <span class="token operator">=</span> Moshi<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">KotlinJsonAdapterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> jsonAdapter<span class="token operator">:</span> JsonAdapter<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span> <span class="token operator">=</span> moshi<span class="token punctuation">.</span><span class="token function">adapter</span><span class="token punctuation">(</span>Person<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span>jsonAdapter<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Zhiyu&quot;</span></span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span>jsonAdapter<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>
    <span class="token string-literal multiline"><span class="token string">&quot;&quot;&quot;
        {
            &quot;name&quot;: &quot;zhiyu&quot;,
            &quot;age&quot;: &quot;199999&quot;
        }
    &quot;&quot;&quot;</span></span><span class="token punctuation">.</span><span class="token function">trimIndent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="kotlinx" tabindex="-1"><a class="header-anchor" href="#kotlinx" aria-hidden="true">#</a> Kotlinx</h5><p>导包注意项：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>plugins <span class="token punctuation">{</span>
    <span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;jvm&quot;</span></span><span class="token punctuation">)</span> version <span class="token string-literal singleline"><span class="token string">&quot;1.7.10&quot;</span></span>
    <span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;plugin.serialization&quot;</span></span><span class="token punctuation">)</span> version <span class="token string-literal singleline"><span class="token string">&quot;1.7.10&quot;</span></span>
<span class="token punctuation">}</span>

dependencies <span class="token punctuation">{</span>
    <span class="token operator">..</span><span class="token punctuation">.</span>
    <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.0&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就可以编写了</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Serializable</span>
<span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">var</span> name<span class="token operator">:</span>String<span class="token punctuation">,</span> <span class="token keyword">var</span> age<span class="token operator">:</span>Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">init</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">isNullOrBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            name<span class="token operator">=</span><span class="token string-literal singleline"><span class="token string">&quot;kotlinx.serialization&quot;</span></span><span class="token punctuation">;</span>
            age<span class="token operator">=</span><span class="token number">12</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span>
        Json<span class="token punctuation">.</span>decodeFromString<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span><span class="token punctuation">(</span>
            <span class="token string-literal multiline"><span class="token string">&quot;&quot;&quot;
                {&quot;name&quot;:&quot;kotlinx.serialization&quot;,&quot;age&quot;:12}
            &quot;&quot;&quot;</span></span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="枚举类" tabindex="-1"><a class="header-anchor" href="#枚举类" aria-hidden="true">#</a> 枚举类</h3><p>Java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">enum</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>
    <span class="token class-name">Idle</span><span class="token punctuation">,</span> <span class="token class-name">Busy</span>
<span class="token punctuation">}</span>
<span class="token class-name">State<span class="token punctuation">.</span>Idle</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Idle</span>
<span class="token class-name">State<span class="token punctuation">.</span>Idle</span><span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">enum</span> <span class="token keyword">class</span> State<span class="token punctuation">{</span>
    Idle<span class="token punctuation">,</span> Busy
<span class="token punctuation">}</span>
State<span class="token punctuation">.</span>Idle<span class="token punctuation">.</span>name <span class="token comment">// Idle</span>
State<span class="token punctuation">.</span>Idle<span class="token punctuation">.</span>ordinal <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="定义构造器" tabindex="-1"><a class="header-anchor" href="#定义构造器" aria-hidden="true">#</a> 定义构造器</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">enum</span> <span class="token class-name">State</span><span class="token punctuation">{</span>
    <span class="token class-name">Idle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Busy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token class-name">State</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token function">State</span><span class="token punctuation">(</span><span class="token keyword">val</span> id<span class="token operator">:</span>Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Idle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Busy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="枚举定义扩展" tabindex="-1"><a class="header-anchor" href="#枚举定义扩展" aria-hidden="true">#</a> 枚举定义扩展</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> State<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> State <span class="token punctuation">{</span>
    <span class="token keyword">return</span> State<span class="token punctuation">.</span>values<span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>
        <span class="token keyword">val</span> nextOrdinal <span class="token operator">=</span> <span class="token punctuation">(</span>ordinal <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> it<span class="token punctuation">.</span>size
        it<span class="token punctuation">[</span>nextOrdinal<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="密封类" tabindex="-1"><a class="header-anchor" href="#密封类" aria-hidden="true">#</a> 密封类</h3><ul><li>密封类是一种特殊的<code>抽象类</code></li><li>密封类的子类定义在与自身相同的文件中</li><li>密封类的子类的个数是有限的</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">sealed</span> <span class="token keyword">class</span> PlayerState <span class="token punctuation">{</span>
    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token keyword">constructor</span><span class="token punctuation">(</span>int<span class="token operator">:</span> Int<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="密封类-枚举类区别" tabindex="-1"><a class="header-anchor" href="#密封类-枚举类区别" aria-hidden="true">#</a> 密封类&amp;枚举类区别</h4><figure><img src="`+v+`" alt="image-20220924135345615" tabindex="0" loading="lazy"><figcaption>image-20220924135345615</figcaption></figure><h3 id="内联类" tabindex="-1"><a class="header-anchor" href="#内联类" aria-hidden="true">#</a> 内联类</h3><ul><li>内联类是对某一个类型的包装</li><li>内联类是类似于Java装箱类型的一种类型</li><li>编译器会尽可能使用被包装的类型进行优化</li></ul><p>定义示例：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">inline</span> <span class="token keyword">class</span> <span class="token function">BoxInt</span><span class="token punctuation">(</span><span class="token keyword">val</span> value<span class="token operator">:</span> Int<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="内联类的方法" tabindex="-1"><a class="header-anchor" href="#内联类的方法" aria-hidden="true">#</a> 内联类的方法</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">inline</span> <span class="token keyword">class</span> <span class="token function">BoxInt</span><span class="token punctuation">(</span><span class="token keyword">val</span> value<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">operator</span> <span class="token keyword">fun</span> <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> BoxInt <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">BoxInt</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="【错误设想】内联类的属性" tabindex="-1"><a class="header-anchor" href="#【错误设想】内联类的属性" aria-hidden="true">#</a> 【错误设想】内联类的属性</h4><p>这样会<code>报错</code>：inline class cannot have properties with backing field</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">inline</span> <span class="token keyword">class</span> <span class="token function">BoxInt</span><span class="token punctuation">(</span><span class="token keyword">val</span> value<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;BoxInt(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">value</span></span><span class="token string">)&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="内联类的继承结构" tabindex="-1"><a class="header-anchor" href="#内联类的继承结构" aria-hidden="true">#</a> 内联类的继承结构</h4><p>内联类可以实现接口，但不能继承父类也不能被继承</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">inline</span> <span class="token keyword">class</span> <span class="token function">BoxInt</span><span class="token punctuation">(</span><span class="token keyword">val</span> value<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Comparable<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>other<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="编译优化" tabindex="-1"><a class="header-anchor" href="#编译优化" aria-hidden="true">#</a> 编译优化</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> boxInt <span class="token operator">=</span> <span class="token function">BoxInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>boxInt <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;value is less than 10&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译优化成Int类型: var value: Int = 5</p><p>使用Int类型: val newValue = value * 200</p><p>方法编译成静态方法: BoxInt.inc-impl(value)</p><p>必要时使用包装类型: println(BoxInt(value))</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> boxInt <span class="token operator">=</span> <span class="token function">BoxInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> newValue <span class="token operator">=</span> BoxInt<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">200</span>
<span class="token function">println</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span>
boxInt<span class="token operator">++</span>
<span class="token function">println</span><span class="token punctuation">(</span>boxInt<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h4><h5 id="无符号类型-1" tabindex="-1"><a class="header-anchor" href="#无符号类型-1" aria-hidden="true">#</a> 无符号类型</h5><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">inline</span> <span class="token keyword">class</span> UInt
<span class="token keyword">internal</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">internal</span> <span class="token keyword">val</span> <span class="token keyword">data</span><span class="token operator">:</span>Int<span class="token punctuation">)</span><span class="token operator">:</span> Comparable<span class="token operator">&lt;</span>UInt<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
   
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="模拟枚举" tabindex="-1"><a class="header-anchor" href="#模拟枚举" aria-hidden="true">#</a> 模拟枚举</h5><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">inline</span> <span class="token keyword">class</span> <span class="token function">State</span><span class="token punctuation">(</span><span class="token keyword">val</span> ordinal<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>
        <span class="token keyword">val</span> Idle <span class="token operator">=</span> <span class="token function">State</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">val</span> Busy <span class="token operator">=</span> <span class="token function">State</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">fun</span> values <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span>Idle<span class="token punctuation">,</span> Busy<span class="token punctuation">)</span>
    <span class="token keyword">val</span> name<span class="token operator">:</span> String
    	<span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="限制" tabindex="-1"><a class="header-anchor" href="#限制" aria-hidden="true">#</a> 限制</h4><ul><li>主构造器必须有且仅有一个只读属性</li><li>不能定义有backing-field 的其他属性</li><li>被包装类型必须不能是泛型类型</li><li>不能继承父类也不能被继承</li><li>不能定义为其他类的内部类</li></ul><h4 id="对比typealias" tabindex="-1"><a class="header-anchor" href="#对比typealias" aria-hidden="true">#</a> 对比typealias</h4><figure><img src="`+m+`" alt="image-20220924141434215" tabindex="0" loading="lazy"><figcaption>image-20220924141434215</figcaption></figure><h3 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h3><p>以maxOf看一下泛型：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">actual</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T <span class="token operator">:</span> Comparable<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">&gt;</span> <span class="token function">maxOf</span><span class="token punctuation">(</span>a<span class="token operator">:</span> T<span class="token punctuation">,</span> b<span class="token operator">:</span> T<span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;=</span> b<span class="token punctuation">)</span> a <span class="token keyword">else</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再看一下Java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">maxOf</span><span class="token punctuation">(</span><span class="token class-name">T</span> a<span class="token punctuation">,</span><span class="token class-name">T</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="给泛型添加约束" tabindex="-1"><a class="header-anchor" href="#给泛型添加约束" aria-hidden="true">#</a> 给泛型添加约束</h4><p>其中Comparable就是约束</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span><span class="token operator">&lt;</span>T<span class="token operator">:</span>Comparable<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">&gt;</span> <span class="token function">maxOf</span><span class="token punctuation">(</span>a<span class="token operator">:</span> T<span class="token punctuation">,</span> b<span class="token operator">:</span> T<span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token punctuation">{</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看一下Java的多个约束</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span> <span class="token operator">&amp;</span> <span class="token class-name">Supplier</span><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span>
    <span class="token class-name">R</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span>
<span class="token class-name">R</span> <span class="token function">callMax</span><span class="token punctuation">(</span><span class="token class-name">T</span> a<span class="token punctuation">,</span> <span class="token class-name">T</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多个泛型参数</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">&gt;</span> <span class="token function">callMax</span><span class="token punctuation">(</span>a<span class="token operator">:</span> T<span class="token punctuation">,</span>b<span class="token operator">:</span> T<span class="token punctuation">)</span><span class="token operator">:</span> R
	<span class="token keyword">where</span> T <span class="token operator">:</span> Comparable<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">,</span>T<span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> R<span class="token punctuation">,</span>
		R<span class="token operator">:</span> Number<span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更常见的是map的key,value</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> <span class="token keyword">out</span> V<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="泛型的型变" tabindex="-1"><a class="header-anchor" href="#泛型的型变" aria-hidden="true">#</a> 泛型的型变</h4><ul><li>协变:继承关系一致</li><li>逆变:继承关系相反</li><li>不变:没有继承关系</li></ul><h5 id="不变" tabindex="-1"><a class="header-anchor" href="#不变" aria-hidden="true">#</a> 不变</h5><p>此时<code>val list = List.Cons(1.0, List.Nil)</code>会报错，Nil不能满足<code>List&lt;T&gt;</code></p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">sealed</span> <span class="token keyword">class</span> List<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">object</span> Nil <span class="token operator">:</span> List <span class="token operator">&lt;</span>Nothing<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">val</span> list <span class="token operator">=</span> List<span class="token punctuation">.</span><span class="token function">Cons</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> List<span class="token punctuation">.</span>Nil<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="协变" tabindex="-1"><a class="header-anchor" href="#协变" aria-hidden="true">#</a> 协变</h5><p>out 子类不能替代父类</p><p>概念：</p><p>Int 继承于 Number</p><p><code>List&lt;Int&gt;</code> 继承于 <code>List&lt;Number&gt;</code></p><p>意义：子类提供子类，父类提供给父类，提供的保持一致</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">sealed</span> <span class="token keyword">class</span> List<span class="token operator">&lt;</span><span class="token keyword">out</span> T<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">object</span> Nil <span class="token operator">:</span> List <span class="token operator">&lt;</span>Nothing<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">val</span> list <span class="token operator">=</span> List<span class="token punctuation">.</span><span class="token function">Cons</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> List<span class="token punctuation">.</span>Nil<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>子类Derived兼容父类Base</li><li>生产者<code>Producer&lt;Derived&gt;</code> 兼容<code>Producer &lt;Base&gt;</code></li><li>存在协变点的类的泛型参数必须声明为协变或不变</li><li>当泛型类作为泛型参数类实例的生产者时用协变</li></ul><h5 id="逆变" tabindex="-1"><a class="header-anchor" href="#逆变" aria-hidden="true">#</a> 逆变</h5><p>in 子类可以替代父类</p><p>（干垃圾能扔垃圾桶和干垃圾桶， 垃圾只能扔垃圾桶）</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> Function2<span class="token operator">&lt;</span><span class="token keyword">in</span> P1<span class="token punctuation">,</span> <span class="token keyword">in</span> P2<span class="token punctuation">,</span> <span class="token keyword">out</span> R<span class="token operator">&gt;</span> <span class="token operator">:</span> Function<span class="token operator">&lt;</span>R<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">operator</span> <span class="token keyword">fun</span> <span class="token function">invoke</span><span class="token punctuation">(</span>p1<span class="token operator">:</span> P1<span class="token punctuation">,</span> p2<span class="token operator">:</span> P2<span class="token punctuation">)</span><span class="token operator">:</span> R
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>子类Derived兼容父类Base</li><li>消费者<code>Consumer &lt;Base&gt;</code>兼容<code>Consumer&lt;Derived&gt;</code></li><li>存在逆变点的类的泛型参数必须声明为逆变或不变</li><li>当泛型类作为泛型参数类实例的消费者时用逆变</li></ul><h4 id="星投影" tabindex="-1"><a class="header-anchor" href="#星投影" aria-hidden="true">#</a> 星投影</h4><p>&#39;*&#39;可用在变量类型声明的位置 &#39;*&#39;可用以描述一个未知的类型 &#39;*&#39;所替换的类型在:</p><ul><li><code>协变</code>点返回泛型参数<code>上限</code>类型</li><li><code>逆变</code>点接收泛型参数<code>下限</code>类型</li></ul><h4 id="泛型实现对比" tabindex="-1"><a class="header-anchor" href="#泛型实现对比" aria-hidden="true">#</a> 泛型实现对比</h4><p>Java、kotlin使用类型擦除</p><figure><img src="`+b+'" alt="QQ截图20220924192536" tabindex="0" loading="lazy"><figcaption>QQ截图20220924192536</figcaption></figure><h4 id="内联特化" tabindex="-1"><a class="header-anchor" href="#内联特化" aria-hidden="true">#</a> 内联特化</h4><h3 id="反射" tabindex="-1"><a class="header-anchor" href="#反射" aria-hidden="true">#</a> 反射</h3><figure><img src="'+g+`" alt="image-20220925112803220" tabindex="0" loading="lazy"><figcaption>image-20220925112803220</figcaption></figure><p>Gradle引入</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>dependencies <span class="token punctuation">{</span>
    <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;org.jetbrains.kotlin:kotlin-reflect:1.6.21&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Maven引入</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.jetbrains.kotlin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>kotlin-reflect<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与Java对比反射</p><figure><img src="`+h+`" alt="image-20220925113035776" tabindex="0" loading="lazy"><figcaption>image-20220925113035776</figcaption></figure><p>Java反射</p><ul><li>优点:无需引入额外依赖,首次使用速度相对较快</li><li>缺点:无法访问Kotlin语法特性,需对Kotlin生成的字节码足够了解</li></ul><p>Kotlin反射</p><ul><li>优点:支持访问Kotlin几乎所有特性, API设计更友好</li><li>缺点:引入Kotlin反射库(2.5MB ,编译后400KB) ,首次调用慢</li></ul><h4 id="kotlin中两种找到函数的方法" tabindex="-1"><a class="header-anchor" href="#kotlin中两种找到函数的方法" aria-hidden="true">#</a> Kotlin中两种找到函数的方法</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">UserDTO</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span>String<span class="token punctuation">,</span> <span class="token keyword">val</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span>

<span class="token keyword">interface</span> Api <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token operator">&lt;</span>UserDTO<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>

<span class="token keyword">abstract</span> <span class="token keyword">class</span> SuperType<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span>

<span class="token keyword">class</span> SubType<span class="token operator">:</span> SuperType<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Api<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>declaredFunctions<span class="token punctuation">.</span><span class="token function">first</span> <span class="token punctuation">{</span>
        it<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">&quot;getUser&quot;</span></span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span>returnType<span class="token punctuation">.</span>arguments<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    Api<span class="token operator">::</span>getUser<span class="token punctuation">.</span>returnType<span class="token punctuation">.</span>arguments<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span>
UserDTO
UserDTO
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应Kotlin调用Java反射</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token punctuation">(</span>Api<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;getUser&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>genericReturnType <span class="token keyword">as</span> ParameterizedType<span class="token punctuation">)</span>
<span class="token punctuation">.</span>actualTypeArguments<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">==</span>
<span class="token keyword">class</span> UserDTO
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="反射参数" tabindex="-1"><a class="header-anchor" href="#反射参数" aria-hidden="true">#</a> 反射参数</h4><p>通过下面的这个反射可以看到方法<code>class SubType: SuperType&lt;String&gt;()</code>的泛型参数为String</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> SuperType<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> typeParameter <span class="token keyword">by</span> lazy <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>supertypes<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>arguments<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>type<span class="token operator">!!</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">val</span> typeParameterJava <span class="token keyword">by</span> lazy <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>javaClass<span class="token punctuation">.</span>genericSuperclass<span class="token punctuation">.</span>safeAs<span class="token operator">&lt;</span>ParameterizedType<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span>actualTypeArguments<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> SubType<span class="token operator">:</span> SuperType<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> subType <span class="token operator">=</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    subType<span class="token punctuation">.</span>typeParameter<span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">(</span><span class="token operator">::</span>println<span class="token punctuation">)</span>
    subType<span class="token punctuation">.</span>typeParameterJava<span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">(</span><span class="token operator">::</span>println<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> Any<span class="token punctuation">.</span><span class="token function">safeAs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> T<span class="token operator">?</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token keyword">as</span><span class="token operator">?</span> T
<span class="token punctuation">}</span>
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span>
kotlin<span class="token punctuation">.</span>String
<span class="token keyword">class</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝" aria-hidden="true">#</a> 深拷贝</h4><p>前提：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Group</span><span class="token punctuation">(</span><span class="token keyword">val</span> id<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> location<span class="token operator">:</span> String<span class="token punctuation">)</span>

<span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Person2</span><span class="token punctuation">(</span><span class="token keyword">val</span> id<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> group<span class="token operator">:</span> Group<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>深度拷贝函数：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token operator">&lt;</span>T <span class="token operator">:</span> Any<span class="token operator">&gt;</span> T<span class="token punctuation">.</span><span class="token function">deepCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token punctuation">{</span>
    <span class="token comment">//如果不是数据类，直接返回</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>isData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//拿到构造函数</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>primaryConstructor<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> primaryConstructor <span class="token operator">-&gt;</span>
        primaryConstructor<span class="token punctuation">.</span>parameters<span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> parameter <span class="token operator">-&gt;</span>
            <span class="token comment">//转换类型</span>
            <span class="token comment">//memberProperties 返回非扩展属性中的第一个并将构造函数赋值给其</span>
            <span class="token comment">//最终value=第一个参数类型的对象</span>
            <span class="token keyword">val</span> value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token keyword">class</span> <span class="token keyword">as</span> KClass<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>memberProperties<span class="token punctuation">.</span><span class="token function">first</span> <span class="token punctuation">{</span>
                it<span class="token punctuation">.</span>name <span class="token operator">==</span> parameter<span class="token punctuation">.</span>name
            <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>

            <span class="token comment">//如果当前类(这里的当前类指的是参数对应的类型，比如说这里如果非基本类型时)是数据类</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>parameter<span class="token punctuation">.</span>type<span class="token punctuation">.</span>classifier <span class="token keyword">as</span><span class="token operator">?</span> KClass<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span>isData <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                parameter <span class="token keyword">to</span> value<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">deepCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                parameter <span class="token keyword">to</span> value
            <span class="token punctuation">}</span>


            <span class="token comment">//最终返回一个新的映射map,即返回一个属性值重新组合的map，并调用callBy返回指定的对象</span>
        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">let</span><span class="token punctuation">(</span>primaryConstructor<span class="token operator">::</span>callBy<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><blockquote><p>注意：3等号比较的是引用，2等号是比较值</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> person <span class="token operator">=</span> <span class="token function">Person2</span><span class="token punctuation">(</span>
        <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token string-literal singleline"><span class="token string">&quot;zhiyu&quot;</span></span><span class="token punctuation">,</span>
        <span class="token function">Group</span><span class="token punctuation">(</span>
            <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token string-literal singleline"><span class="token string">&quot;Kotlin.cn&quot;</span></span><span class="token punctuation">,</span>
            <span class="token string-literal singleline"><span class="token string">&quot;China&quot;</span></span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">)</span>

    <span class="token keyword">val</span> copiedPerson <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> deepCopiedPerson <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">deepCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token function">println</span><span class="token punctuation">(</span>copiedPerson<span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>deepCopiedPerson<span class="token punctuation">)</span>

    <span class="token function">println</span><span class="token punctuation">(</span>person <span class="token operator">===</span> copiedPerson<span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>person <span class="token operator">===</span> deepCopiedPerson<span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>group <span class="token operator">===</span> copiedPerson<span class="token punctuation">.</span>group<span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>group <span class="token operator">===</span> deepCopiedPerson<span class="token punctuation">.</span>group<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>
<span class="token function">Person2</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> name<span class="token operator">=</span>zhiyu<span class="token punctuation">,</span> group<span class="token operator">=</span><span class="token function">Group</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> name<span class="token operator">=</span>Kotlin<span class="token punctuation">.</span>cn<span class="token punctuation">,</span> location<span class="token operator">=</span>China<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">Person2</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> name<span class="token operator">=</span>zhiyu<span class="token punctuation">,</span> group<span class="token operator">=</span><span class="token function">Group</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> name<span class="token operator">=</span>Kotlin<span class="token punctuation">.</span>cn<span class="token punctuation">,</span> location<span class="token operator">=</span>China<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token boolean">false</span>
<span class="token boolean">false</span>
<span class="token boolean">true</span>
<span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="model映射" tabindex="-1"><a class="header-anchor" href="#model映射" aria-hidden="true">#</a> model映射</h4><p>map转换为任意类型</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span><span class="token keyword">reified</span> To <span class="token operator">:</span> Any<span class="token operator">&gt;</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Any<span class="token operator">?</span><span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">mapAs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> To <span class="token punctuation">{</span>
    <span class="token comment">// 主构造器</span>
    <span class="token keyword">return</span> To<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>primaryConstructor<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>
        <span class="token comment">// 泛型参数</span>
        it<span class="token punctuation">.</span>parameters<span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> parameter <span class="token operator">-&gt;</span>
            parameter <span class="token keyword">to</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>parameter<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">?:</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parameter<span class="token punctuation">.</span>type<span class="token punctuation">.</span>isMarkedNullable<span class="token punctuation">)</span> <span class="token keyword">null</span>
            <span class="token keyword">else</span> <span class="token keyword">throw</span> <span class="token function">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">parameter<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is required but missing&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// 调用</span>
            <span class="token punctuation">.</span><span class="token function">let</span><span class="token punctuation">(</span>it<span class="token operator">::</span>callBy<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>map转换为其他map</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span><span class="token keyword">reified</span> From <span class="token operator">:</span> Any<span class="token punctuation">,</span> <span class="token keyword">reified</span> To <span class="token operator">:</span> Any<span class="token operator">&gt;</span> From<span class="token punctuation">.</span><span class="token function">mapAs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> To <span class="token punctuation">{</span>
    <span class="token keyword">return</span> From<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>memberProperties<span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>name <span class="token keyword">to</span> it<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
        <span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapAs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实践</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">UserDTO2</span><span class="token punctuation">(</span><span class="token keyword">val</span> id<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">val</span> login<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> avatarUrl<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> url<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> htmlUrl<span class="token operator">:</span> String<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token function">UserVO</span><span class="token punctuation">(</span><span class="token keyword">val</span> id<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">val</span> login<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> avatarUrl<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> url<span class="token operator">:</span> String<span class="token punctuation">)</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> userDTO <span class="token operator">=</span> <span class="token function">UserDTO2</span><span class="token punctuation">(</span>
        <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token string-literal singleline"><span class="token string">&quot;Zhiyu&quot;</span></span><span class="token punctuation">,</span>
        <span class="token string-literal singleline"><span class="token string">&quot;https://static.hetaousercontent.com/labs/squares/random?theme=duskfalling&amp;user_id=2886891&quot;</span></span><span class="token punctuation">,</span>
        <span class="token string-literal singleline"><span class="token string">&quot;https://github.com/&quot;</span></span><span class="token punctuation">,</span>
        <span class="token string-literal singleline"><span class="token string">&quot;https://github.com/zeanzai/java-tips&quot;</span></span>
    <span class="token punctuation">)</span>

    <span class="token keyword">val</span> userVO<span class="token operator">:</span> UserVO <span class="token operator">=</span> userDTO<span class="token punctuation">.</span><span class="token function">mapAs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>userVO<span class="token punctuation">)</span>

    <span class="token keyword">val</span> userMap <span class="token operator">=</span> <span class="token function">mapOf</span><span class="token punctuation">(</span>
        <span class="token string-literal singleline"><span class="token string">&quot;id&quot;</span></span> <span class="token keyword">to</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token string-literal singleline"><span class="token string">&quot;login&quot;</span></span> <span class="token keyword">to</span> <span class="token string-literal singleline"><span class="token string">&quot;Zhiyu&quot;</span></span><span class="token punctuation">,</span>
        <span class="token string-literal singleline"><span class="token string">&quot;avatarUrl&quot;</span></span> <span class="token keyword">to</span> <span class="token string-literal singleline"><span class="token string">&quot;https://github.com&quot;</span></span><span class="token punctuation">,</span>
        <span class="token string-literal singleline"><span class="token string">&quot;url&quot;</span></span> <span class="token keyword">to</span> <span class="token string-literal singleline"><span class="token string">&quot;https://github.com/zeanzai/java-tips&quot;</span></span>
    <span class="token punctuation">)</span>

    <span class="token keyword">val</span> userVOFromMap<span class="token operator">:</span>UserVO <span class="token operator">=</span> userMap<span class="token punctuation">.</span><span class="token function">mapAs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>userVOFromMap<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span>
<span class="token label symbol">UserVO@</span>1046d517
<span class="token label symbol">UserVO@</span>3b7d3a38
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注解" tabindex="-1"><a class="header-anchor" href="#注解" aria-hidden="true">#</a> 注解</h3><p>关键字：<code>annotation</code></p><p>限定标注注解位置<code>Target</code>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Target</span><span class="token punctuation">(</span>AnnotationTarget<span class="token punctuation">.</span>CLASS<span class="token punctuation">)</span>
<span class="token keyword">annotation</span> <span class="token keyword">class</span> Api
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>指定作用时机<code>Retention</code>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Retention</span><span class="token punctuation">(</span>AnnotationRetention<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>
<span class="token annotation builtin">@Target</span><span class="token punctuation">(</span>AnnotationTarget<span class="token punctuation">.</span>CLASS<span class="token punctuation">)</span>
<span class="token keyword">annotation</span> <span class="token keyword">class</span> Api
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java相比：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Aspect</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>明确标注对象</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@file:JvmName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">package</span> com<span class="token punctuation">.</span>zhiyu<span class="token punctuation">.</span>kotlin<span class="token punctuation">.</span>annoation<span class="token punctuation">.</span>basic
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,487),w=[f];function x(q,j){return s(),a("div",null,w)}const I=n(y,[["render",x],["__file","kotlin.html.vue"]]);export{I as default};
