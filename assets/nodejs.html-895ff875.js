import{_ as t,W as p,X as e,a0 as n,a1 as s,Z as o,$ as c,C as i}from"./framework-c8643d23.js";const l={},u=n("h1",{id:"玩转node-js",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#玩转node-js","aria-hidden":"true"},"#"),s(" 玩转Node.js")],-1),r=n("h3",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),s(" 前言")],-1),k={href:"https://gitee.com/kyrzy0416/rconsole-plugin",target:"_blank",rel:"noopener noreferrer"},d=n("code",null,"1. 常用的Node.js函数 2. 玩转Node.js机器人（待更新）",-1),v=c(`<h2 id="常用的node-js函数" tabindex="-1"><a class="header-anchor" href="#常用的node-js函数" aria-hidden="true">#</a> 常用的Node.js函数</h2><p>下面这个几个Node.js函数都是经过生产环境考验的函数，一般情况下是十分稳定的：</p><h3 id="常用" tabindex="-1"><a class="header-anchor" href="#常用" aria-hidden="true">#</a> 常用</h3><h4 id="下载文件" tabindex="-1"><a class="header-anchor" href="#下载文件" aria-hidden="true">#</a> 下载文件</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token doc-comment comment">/**
 * 提取视频下载位置
 * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">{</span>groupPath<span class="token operator">:</span> string<span class="token punctuation">,</span> target<span class="token operator">:</span> string<span class="token punctuation">}</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token function">getGroupPathAndTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> groupPath <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>e<span class="token punctuation">.</span>group_id <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>e<span class="token punctuation">.</span>user_id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>groupPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/temp.mp4</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token punctuation">{</span> groupPath<span class="token punctuation">,</span> target <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 工具：根URL据下载视频 / 音频
 * <span class="token keyword">@param</span> <span class="token parameter">url</span>       下载地址
 * <span class="token keyword">@param</span> <span class="token parameter">isProxy</span>   是否需要魔法
 * <span class="token keyword">@param</span> <span class="token parameter">headers</span>   覆盖头节点
 * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>Promise<span class="token punctuation">&lt;</span>unknown<span class="token punctuation">&gt;</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">async</span> <span class="token function">downloadVideo</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> isProxy <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> headers <span class="token operator">=</span> <span class="token keyword">null</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 这个是获取下载位置，可以自定义</span>
	<span class="token keyword">const</span> <span class="token punctuation">{</span> groupPath<span class="token punctuation">,</span> target <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getGroupPathAndTarget</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 这个参考下面的文件类</span>
	<span class="token keyword">await</span> <span class="token function">mkdirIfNotExists</span><span class="token punctuation">(</span>groupPath<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> userAgent <span class="token operator">=</span>
		<span class="token string">&quot;Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.25 Mobile Safari/537.36&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> axiosConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">headers</span><span class="token operator">:</span> headers <span class="token operator">||</span> <span class="token punctuation">{</span> <span class="token string-property property">&quot;User-Agent&quot;</span><span class="token operator">:</span> userAgent <span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token literal-property property">responseType</span><span class="token operator">:</span> <span class="token string">&quot;stream&quot;</span><span class="token punctuation">,</span>
		<span class="token operator">...</span><span class="token punctuation">(</span>isProxy <span class="token operator">&amp;&amp;</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">httpAgent</span><span class="token operator">:</span> tunnel<span class="token punctuation">.</span><span class="token function">httpOverHttp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
				<span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>proxyAddr<span class="token punctuation">,</span> <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>proxyPort <span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token literal-property property">httpsAgent</span><span class="token operator">:</span> tunnel<span class="token punctuation">.</span><span class="token function">httpOverHttp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
				<span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>proxyAddr<span class="token punctuation">,</span> <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>proxyPort <span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token keyword">try</span> <span class="token punctuation">{</span>
		<span class="token comment">// 这个参考下面的文件类</span>
		<span class="token keyword">await</span> <span class="token function">checkAndRemoveFile</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> axiosConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
		logger<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">开始下载: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> writer <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
		res<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>writer<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			writer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;finish&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>groupPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			writer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;下载视频发生错误！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="重试函数" tabindex="-1"><a class="header-anchor" href="#重试函数" aria-hidden="true">#</a> 重试函数</h4><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>function retry(func, maxRetries = 3, delay = 1000) {
    return new Promise((resolve, reject) =&gt; {
        const attempt = (remainingTries) =&gt; {
            func()
                .then(resolve)
                .catch(error =&gt; {
                    if (remainingTries === 1) {
                        reject(error);
                    } else {
                        console.log(\`错误: \${error}. 重试将在 \${delay/1000} 秒...\`);
                        setTimeout(() =&gt; attempt(remainingTries - 1), delay);
                    }
                });
        };
        attempt(maxRetries);
    });
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="文件类" tabindex="-1"><a class="header-anchor" href="#文件类" aria-hidden="true">#</a> 文件类</h3><h4 id="检查文件是否存在并且删除" tabindex="-1"><a class="header-anchor" href="#检查文件是否存在并且删除" aria-hidden="true">#</a> 检查文件是否存在并且删除</h4><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>async function checkAndRemoveFile(file) {
    try {
        await fs.promises.access(file);
        await fs.promises.unlink(file);
        logger.mark(&#39;视频已存在&#39;);
    } catch (err) {
        if (err.code !== &#39;ENOENT&#39;) {
            throw err;
        }
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="创建文件夹-如果不存在" tabindex="-1"><a class="header-anchor" href="#创建文件夹-如果不存在" aria-hidden="true">#</a> 创建文件夹，如果不存在</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">mkdirIfNotExists</span><span class="token punctuation">(</span><span class="token parameter">dir</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> fs<span class="token punctuation">.</span>promises<span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">&#39;ENOENT&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">await</span> fs<span class="token punctuation">.</span>promises<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">recursive</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除文件夹下所有文件" tabindex="-1"><a class="header-anchor" href="#删除文件夹下所有文件" aria-hidden="true">#</a> 删除文件夹下所有文件</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">deleteFolderRecursive</span><span class="token punctuation">(</span><span class="token parameter">folderPath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> files <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span>promises<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>folderPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> actions <span class="token operator">=</span> files<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> curPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>folderPath<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">const</span> stat <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span>promises<span class="token punctuation">.</span><span class="token function">lstat</span><span class="token punctuation">(</span>curPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>stat<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// recurse</span>
                <span class="token keyword">return</span> <span class="token function">deleteFolderRecursive</span><span class="token punctuation">(</span>curPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// delete file</span>
                <span class="token keyword">return</span> fs<span class="token punctuation">.</span>promises<span class="token punctuation">.</span><span class="token function">unlink</span><span class="token punctuation">(</span>curPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span>actions<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> files<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="加解密" tabindex="-1"><a class="header-anchor" href="#加解密" aria-hidden="true">#</a> 加解密</h3><h4 id="aes加解密" tabindex="-1"><a class="header-anchor" href="#aes加解密" aria-hidden="true">#</a> aes加解密</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// AES加密</span>
<span class="token keyword">import</span> crypto <span class="token keyword">from</span> <span class="token string">&quot;crypto&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> key <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">createHash</span><span class="token punctuation">(</span><span class="token string">&quot;sha256&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">&quot;rconsole&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * AES加密
 * <span class="token keyword">@param</span> <span class="token parameter">ha1</span>
 * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>Promise<span class="token punctuation">&lt;</span>string<span class="token punctuation">&gt;</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">ha12store</span><span class="token punctuation">(</span><span class="token parameter">ha1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// IV.E</span>
    <span class="token keyword">const</span> iv <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">randomBytes</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> c <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">createCipheriv</span><span class="token punctuation">(</span><span class="token string">&quot;aes-256-cbc&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> e <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>ha1<span class="token punctuation">,</span> <span class="token string">&quot;binary&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    e <span class="token operator">+=</span> c<span class="token punctuation">.</span><span class="token function">final</span><span class="token punctuation">(</span><span class="token string">&quot;hex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> iv<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&quot;hex&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * AES解密
 * <span class="token keyword">@param</span> <span class="token parameter">passstore</span>
 * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>Promise<span class="token punctuation">&lt;</span>string<span class="token punctuation">&gt;</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">store2ha1</span><span class="token punctuation">(</span><span class="token parameter">passstore</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> parts <span class="token operator">=</span> passstore<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>parts<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 新的加密方式 with IV: IV.E</span>
            <span class="token keyword">const</span> c <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">createDecipheriv</span><span class="token punctuation">(</span><span class="token string">&quot;aes-256-cbc&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>parts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;hex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> d <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;hex&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;binary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            d <span class="token operator">+=</span> c<span class="token punctuation">.</span><span class="token function">final</span><span class="token punctuation">(</span><span class="token string">&quot;binary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> d<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 旧加密方式 without IV: E</span>
            <span class="token keyword">const</span> c <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">createDecipher</span><span class="token punctuation">(</span><span class="token string">&quot;aes192&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> d <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>passstore<span class="token punctuation">,</span> <span class="token string">&quot;hex&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;binary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            d <span class="token operator">+=</span> c<span class="token punctuation">.</span><span class="token function">final</span><span class="token punctuation">(</span><span class="token string">&quot;binary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> d<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>
            <span class="token string">&quot;在[default]部分设置的passwordSecret无法解密信息。请确保所有节点的passwordSecret相同。如果您更改了密码保密信息，可能需要重新添加用户。&quot;</span><span class="token punctuation">,</span>
            e<span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span> ha12store<span class="token punctuation">,</span> store2ha1 <span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="并发" tabindex="-1"><a class="header-anchor" href="#并发" aria-hidden="true">#</a> 并发</h3><h4 id="令牌桶" tabindex="-1"><a class="header-anchor" href="#令牌桶" aria-hidden="true">#</a> 令牌桶</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">TokenBucket</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">rate<span class="token punctuation">,</span> capacity<span class="token punctuation">,</span> interval <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> isMinute <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>interval <span class="token operator">=</span> interval<span class="token punctuation">;</span> <span class="token comment">// 生成令牌的时间间隔</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>rate <span class="token operator">=</span> isMinute <span class="token operator">?</span> rate <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">:</span> rate<span class="token punctuation">;</span> <span class="token comment">// 修改为每分钟生成的令牌数量</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span> <span class="token comment">// 令牌容量</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tokens <span class="token operator">=</span> capacity<span class="token punctuation">;</span> <span class="token comment">// 令牌容量</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tokens <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用 Map 存储每个用户的令牌桶</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>lastTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 上次使用时间</span>

        <span class="token doc-comment comment">/**
         * 核心算法
         * <span class="token keyword">@param</span> <span class="token parameter">tokens</span>
         * <span class="token keyword">@param</span> <span class="token parameter">capacity</span>
         * <span class="token keyword">@param</span> <span class="token parameter">rate</span>
         * <span class="token keyword">@param</span> <span class="token parameter">lastTime</span>
         * <span class="token keyword">@param</span> <span class="token parameter">interval</span>
         * <span class="token keyword">@param</span> <span class="token parameter">isMinute</span>
         * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">{</span>lastTime<span class="token operator">:</span> number<span class="token punctuation">,</span> tokens<span class="token operator">:</span> number<span class="token punctuation">}</span><span class="token punctuation">}</span></span>
         */</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">updateTokens</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">tokens<span class="token punctuation">,</span> capacity<span class="token punctuation">,</span> rate<span class="token punctuation">,</span> lastTime<span class="token punctuation">,</span> interval</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 计算从上次请求到现在经过的时间</span>
            <span class="token keyword">const</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> elapsed <span class="token operator">=</span> now <span class="token operator">-</span> lastTime<span class="token punctuation">;</span>
            <span class="token comment">// 根据时间计算出新生成的令牌数量</span>
            <span class="token keyword">const</span> addedTokens <span class="token operator">=</span> elapsed <span class="token operator">*</span> <span class="token punctuation">(</span>rate <span class="token operator">/</span> interval <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 修改为每分钟生成的令牌数量</span>
            tokens <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>tokens <span class="token operator">+</span> addedTokens<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
            lastTime <span class="token operator">=</span> now<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span> tokens<span class="token punctuation">,</span> lastTime <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 消耗令牌-一个桶
     * <span class="token keyword">@param</span> <span class="token parameter">count</span>
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
     */</span>
    <span class="token function">consumeSingle</span><span class="token punctuation">(</span><span class="token parameter">count <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> tokens<span class="token punctuation">,</span> lastTime <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateTokens</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tokens<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>capacity<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rate<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastTime<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>interval<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 更新令牌桶中的令牌数量</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tokens <span class="token operator">=</span> tokens<span class="token punctuation">;</span>

        <span class="token comment">// 判断请求是否能够被处理（即令牌桶中是否有足够的令牌）</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tokens<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>tokens <span class="token operator">-=</span> count<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 返回 true 表示请求被处理</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 返回 false 表示请求被限流</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 消耗令牌
     * <span class="token keyword">@param</span> <span class="token parameter">id</span>     用户id
     * <span class="token keyword">@param</span> <span class="token parameter">count</span>  请求次数
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
     */</span>
    <span class="token function">consume</span><span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">tokens</span><span class="token operator">:</span> userTokens<span class="token punctuation">,</span> <span class="token literal-property property">lastTime</span><span class="token operator">:</span> userLastTime <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tokens<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">{</span> <span class="token literal-property property">tokens</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>capacity<span class="token punctuation">,</span> <span class="token literal-property property">lastTime</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> tokens<span class="token punctuation">,</span> lastTime <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateTokens</span><span class="token punctuation">(</span>userTokens<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>capacity<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rate<span class="token punctuation">,</span> userLastTime<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>interval<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 更新令牌桶中的令牌数量</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tokens<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token punctuation">{</span> tokens<span class="token punctuation">,</span> lastTime <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 判断请求是否能够被处理（即令牌桶中是否有足够的令牌）</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> tokens<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>tokens<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">tokens</span><span class="token operator">:</span> tokens <span class="token operator">-</span> count<span class="token punctuation">,</span> lastTime <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 重置令牌
     * <span class="token keyword">@param</span> <span class="token parameter">newCapacity</span>
     */</span>
    <span class="token function">resetCapacity</span><span class="token punctuation">(</span><span class="token parameter">newCapacity</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tokens<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> newCapacity<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>tokens <span class="token operator">=</span> newCapacity<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;分配少于当前的容量！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用令牌桶</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 构造令牌桶，防止解析致使服务器宕机（默认限制5s调用一次）
 * <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>TokenBucket<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">static</span> #tokenBucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TokenBucket</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 令牌桶 拿来限流（默认限制1min调用一次）
 * <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>TokenBucket<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">static</span> #tokenBucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TokenBucket</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22);function m(b,y){const a=i("ExternalLinkIcon");return p(),e("div",null,[u,r,n("p",null,[s("实践是最好的学习方式。最近前几个月帮朋友部署了一个云崽机器人，然后事情就发展的不可收拾的地步： 玩别人的插件 👉 开始自己写一个单个插件 👉 创造"),n("a",k,[s("自己的插件"),o(a)]),s(" 👉 阅读机器人源代码 👉 PR机器人源代码 总之整个过程非常的魔幻，下面目前打算介绍："),d]),v])}const w=t(l,[["render",m],["__file","nodejs.html.vue"]]);export{w as default};
