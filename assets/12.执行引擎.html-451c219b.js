import{_ as a,W as n,X as s,a2 as i}from"./framework-6a3aa88c.js";const e="/java-tips/assets/9b8775700cd73277695e8cfe56ad90f2-64172210.webp",t="/java-tips/assets/7594235f8b2635a7d27993652c071a28-689537c8.webp",l="/java-tips/assets/image-20220301202432850-bf7f9489.webp",p="/java-tips/assets/image-20220301202724123-a8ceac7a.webp",o="/java-tips/assets/e000a55889891bf82dbf886b8f43c725-9e6d0963.webp",c="/java-tips/assets/0ed041a58b070ab2b087c58d86e737dc-ee1fba98.webp",u="/java-tips/assets/image-20220301203624625-0450b43d.webp",r="/java-tips/assets/image-20220301204129066-a10f7452.webp",d="/java-tips/assets/image-20220301205138519-b1f5fd23.webp",k="/java-tips/assets/d587d8cefdc22108248684797f2fc263-976a2fbe.webp",m="/java-tips/assets/image-20220302203106438-94e82e1e.webp",v="/java-tips/assets/image-20220302203123227-0ba76991.webp",b="/java-tips/assets/image-20220302203205802-f3c0f405.webp",h="/java-tips/assets/6848729c539d1fd37b99260e1a86ff0c-a2a05fb7.webp",g="/java-tips/assets/image-20220302204643986-a3d5066f.webp",f="/java-tips/assets/image-20220302204939613-0621bbb2.webp",J="/java-tips/assets/25207b061cac98420e005d63607f0a69-192ef762.webp",y="/java-tips/assets/2fce85a985091dcf80488452d8199a5c-fc30ea65.webp",_="/java-tips/assets/ab3d0a62a60728deb05e8e340963cb86-91283c6f.webp",x="/java-tips/assets/d35222b6002a916baf8a7424a4f5392b-4908398d.webp",C={},j=i('<p>[TOC]</p><h1 id="执行引擎概述" tabindex="-1"><a class="header-anchor" href="#执行引擎概述" aria-hidden="true">#</a> 执行引擎概述</h1><p>执行引擎属于JVM的下层，里面包括解释器、及时编译器、垃圾回收器</p><figure><img src="'+e+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><ul><li>执行引擎是Java虚拟机核心的组成部分之一</li><li>“虚拟机”是一个相对于“物理机”的概念，这两种机器都有代码执行能力，其区别是物理机的执行引擎是直接建立在处理器、缓存、指令集和操作系统层面上的，而虚拟机的执行引擎则是由软件自行实现的。因此可以不受物理条件制约地定制指令集与执行引擎的结构体系，能够执行那些不被硬件直接支持的指令集格式</li><li>JVM的<code>主要任务</code>是负责装载字节码到其内部，但字节码并不能够直接运行在操作系统之上，因为字节码指令并非等价于本地机器指令，它内部包含的仅仅只是一些能够被JVM所识别的字节码指令、符号表，以及其他辅助信息</li><li>那么，如果想要让一个Java程序运行起来，执行引擎（Execution Engine）的<strong>任务就是将字节码指令解释/编译为对应平台上的本地机器指令才可以</strong>。简单来说，JVM中的执行引擎就充当了将高级语言翻译为机器语言的译者</li></ul><figure><img src="'+t+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><h2 id="执行引擎的工作流程" tabindex="-1"><a class="header-anchor" href="#执行引擎的工作流程" aria-hidden="true">#</a> 执行引擎的工作流程</h2><ul><li>执行引擎在执行的过程中究竟需要执行什么样的字节码指令完全依赖于PC寄存器</li><li>每当执行完一项指令操作后，PC寄存器就会更新下一条需要被执行的指令地址</li><li>当然方法在执行的过程中，执行引擎有可能会通过存储在局部变量表中的对象引用准确定位到存储在Java堆区中的对象实例信息，以及通过对象头中的元数据指针定位到目标对象的类型信息</li></ul><figure><img src="'+l+'" alt="image-20220301202432850" tabindex="0" loading="lazy"><figcaption>image-20220301202432850</figcaption></figure><p>从外观上来看，所有的Java虚拟机的执行引擎输入，输出都是一致的：输入的是字节码二进制流，处理过程是字节码解析执行的等效过程，输出的是执行过程</p><h1 id="java代码编译和执行过程" tabindex="-1"><a class="header-anchor" href="#java代码编译和执行过程" aria-hidden="true">#</a> Java代码编译和执行过程</h1><p>大部分的程序代码转换成物理机的目标代码(机器指令)或虚拟机能执行的指令集之前，都需要经过上图中的各个步骤</p><blockquote><p>说明：绿色部分是解释的过程，蓝色部分是编译的过程</p></blockquote><figure><img src="'+p+'" alt="image-20220301202724123" tabindex="0" loading="lazy"><figcaption>image-20220301202724123</figcaption></figure><p>Java代码编译是由Java源码编译器（前端编译器）来完成，流程图如下所示：</p><figure><img src="'+o+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><p>Java字节码的执行是由JVM执行引擎（后端编译器）来完成，流程图 如下所示：</p><figure><img src="'+c+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><blockquote><p>什么是解释器（Interpreter）, 什么是JIT编译器？</p></blockquote><ul><li>解释器：当Java虚拟机启动时会根据预定义的规范对字节码采用逐行解释的方式执行，将每条字节码文件中的内容“翻译”为对应平台的本地机器指令执行</li><li>JIT（Just In Time Compiler）编译器：就是虚拟机将源代码直接编译成和本地机器平台相关的机器语言</li></ul><blockquote><p>为什么说Java是半编译型半解释型语言？</p></blockquote><ul><li>JDK1.0时代，将Java语言定位为“解释执行”还是比较准确的。再后来，Java也发展出可以直接生成本地代码的编译器</li><li>现在JVM在执行Java代码的时候，通常都会将解释执行与编译执行二者结合起来进行</li></ul><h2 id="图解java代码的执行过程" tabindex="-1"><a class="header-anchor" href="#图解java代码的执行过程" aria-hidden="true">#</a> 图解Java代码的执行过程</h2><figure><img src="'+u+'" alt="image-20220301203624625" tabindex="0" loading="lazy"><figcaption>image-20220301203624625</figcaption></figure><ol><li>不同人的语言</li><li>经过编译器，可以称为语言统一处理</li><li>处理完之后就会出现（乌拉库哈吗哟）这种看不懂的语言 ---- 称为字节码文件 <ol><li>不同的语言，只要相应的Java虚拟机，那么生成字节码的规则就是统一的</li></ol></li><li>执行方式一：解释器</li><li>执行方式二：JIT</li></ol><h1 id="机器码、指令、汇编语言" tabindex="-1"><a class="header-anchor" href="#机器码、指令、汇编语言" aria-hidden="true">#</a> 机器码、指令、汇编语言</h1><h2 id="机器码" tabindex="-1"><a class="header-anchor" href="#机器码" aria-hidden="true">#</a> 机器码</h2><ul><li>各种用二进制编码方式表示的指令，叫做机器指令码。开始，人们就用它采编写程序，这就是机器语言</li><li>机器语言虽然能够被计算机理解和接受，但和人们的语言差别太大，不易被人们理解和记忆，并且用它编程容易出差错</li><li>用它编写的程序一经输入计算机，CPU直接读取运行，因此和其他语言编的程序相比，执行速度最快</li><li>机器指令与CPU紧密相关，所以不同种类的CPU所对应的机器指令也就不同</li></ul><h2 id="指令" tabindex="-1"><a class="header-anchor" href="#指令" aria-hidden="true">#</a> 指令</h2><ul><li>由于机器码是有0和1组成的二进制序列，可读性实在太差，于是人们发明了指令</li><li>指令就是把机器码中特定的0和1序列，简化成对应的指令（一般为英文简写，如mov，inc等），可读性稍好</li><li>由于不同的硬件平台，执行同一个操作，对应的机器码可能不同，所以不同的硬件平台的同一种指令（比如mov），对应的机器码也可能不同</li></ul><h2 id="指令集" tabindex="-1"><a class="header-anchor" href="#指令集" aria-hidden="true">#</a> 指令集</h2><ul><li><p>不同的硬件平台，各自支持的指令，是有差别的。因此每个平台所支持的指令，称之为对应平台的指令集。 如常见的</p><ul><li><p>X86指令集，对应的是X86架构的平台</p></li><li><p>ARM指令集，对应的是ARM架构的平台</p></li></ul></li></ul><h2 id="汇编语言" tabindex="-1"><a class="header-anchor" href="#汇编语言" aria-hidden="true">#</a> 汇编语言</h2><ul><li>由于指令的可读性还是太差，于是人们又发明了汇编语言</li><li>在汇编语言中，用助记符（Mnemonics）代替机器指令的操作码，用地址符号（Symbol）或标号（Label）代替指令或操作数的地址。</li><li>在不同的硬件平台，汇编语言对应着不同的机器语言指令集，通过汇编过程转换成机器指令 <ul><li>由于计算机只认识指令码，所以用汇编语言编写的程序还必须翻译成机器指令码，计算机才能识别和执行</li></ul></li></ul><h2 id="高级语言" tabindex="-1"><a class="header-anchor" href="#高级语言" aria-hidden="true">#</a> 高级语言</h2><ul><li>为了使计算机用户编程序更容易些，后来就出现了各种高级计算机语言。高级语言比机器语言、汇编语言更接近人的语言</li><li>当计算机执行高级语言编写的程序时，仍然需要把程序解释和编译成机器的指令码。完成这个过程的程序就叫做解释程序或编译程序</li></ul><figure><img src="'+r+'" alt="image-20220301204129066" tabindex="0" loading="lazy"><figcaption>image-20220301204129066</figcaption></figure><p>高级语言也不是直接翻译成机器指令，而是翻译成汇编语言码，如下面说的C和C++</p><h2 id="字节码" tabindex="-1"><a class="header-anchor" href="#字节码" aria-hidden="true">#</a> 字节码</h2><ul><li>字节码是一种中间状态（中间码）的二进制代码（文件），它比机器码更抽象，需要直译器转译后才能成为机器码</li><li>字节码主要为了实现特定软件运行和软件环境、与硬件环境无关</li><li>字节码的实现方式是通过编译器和虚拟机器。编译器将源码编译成字节码，特定平台上的虚拟机器将字节码转译为可以直接执行的指令 <ul><li>字节码典型的应用为：Java bytecode</li></ul></li></ul><h1 id="解释器" tabindex="-1"><a class="header-anchor" href="#解释器" aria-hidden="true">#</a> 解释器</h1><p>JVM设计者们的初衷仅仅只是单纯地为了满足Java程序实现跨平台特性，因此避免采用静态编译的方式直接生成本地机器指令，从而诞生了实现解释器在运行时采用逐行解释字节码执行程序的想法</p><figure><img src="'+d+'" alt="image-20220301205138519" tabindex="0" loading="lazy"><figcaption>image-20220301205138519</figcaption></figure><blockquote><p>为什么Java源文件不直接翻译成 JVM，而是先翻译成字节码文件？</p></blockquote><p>可能是因为直接翻译的代价是比较大的</p><h2 id="解释器工作机制" tabindex="-1"><a class="header-anchor" href="#解释器工作机制" aria-hidden="true">#</a> 解释器工作机制</h2><ul><li>解释器真正意义上所承担的角色就是一个运行时“翻译者”，将字节码文件中的内容“翻译”为对应平台的本地机器指令执行</li><li>当一条字节码指令被解释执行完成后，接着再根据PC寄存器中记录的下一条需要被执行的字节码指令执行解释操作</li></ul><h2 id="解释器分类" tabindex="-1"><a class="header-anchor" href="#解释器分类" aria-hidden="true">#</a> 解释器分类</h2><p>在Java的发展历史里，一共有两套解释执行器，即古老的字节码解释器、现在普遍使用的模板解释器</p><ul><li>字节码解释器在执行时通过纯软件代码模拟字节码的执行，效率非常低下</li><li>而模板解释器将每一条字节码和一个模板函数相关联，模板函数中直接产生这条字节码执行时的机器码，从而很大程度上提高了解释器的性能 <ul><li>在HotSpot VM中，解释器主要由Interpreter模块和Code模块构成 <ul><li>Interpreter模块：实现了解释器的核心功能</li><li>Code模块：用于管理HotSpot VM在运行时生成的本地机器指令</li></ul></li></ul></li></ul><h2 id="现状" tabindex="-1"><a class="header-anchor" href="#现状" aria-hidden="true">#</a> 现状</h2><ul><li>由于解释器在设计和实现上非常简单，因此除了Java语言之外，还有许多高级语言同样也是基于解释器执行的，比如Python、Perl、Ruby等。但是在今天，基于解释器执行已经沦落为低效的代名词，并且时常被一些C/C++程序员所调侃</li><li>为了解决这个问题，JVM平台支持一种叫作即时编译的技术。即时编译的目的是避免函数被解释执行，而是将整个函数体编译成为机器码，每次函数执行时，只执行编译后的机器码即可，这种方式可以使执行效率大幅度提升</li><li>不过无论如何，基于解释器的执行模式仍然为中间语言的发展做出了不可磨灭的贡献</li></ul><h1 id="jit-just-in-time-编译器" tabindex="-1"><a class="header-anchor" href="#jit-just-in-time-编译器" aria-hidden="true">#</a> JIT（Just In Time）编译器</h1><p>使用即时编译器的速度要比解释器的速度要快！</p><h2 id="java代码的执行分类" tabindex="-1"><a class="header-anchor" href="#java代码的执行分类" aria-hidden="true">#</a> Java代码的执行分类</h2><ul><li>第一种是将源代码编译成字节码文件，然后在运行时通过解释器将字节码文件转为机器码执行</li><li>第二种是编译执行（直接编译成机器码，但是要知道不同机器上编译的机器码是不一样，而字节码是可以跨平台的）。现代虚拟机为了提高执行效率，会使用即时编译技术（JIT，Just In Time）将方法编译成机器码后再执行</li><li>HotSpot VM是目前市面上高性能虚拟机的代表作之一。它采用解释器与即时编译器并存的架构。在Java虚拟机运行时，解释器和即时编译器能够相互协作，各自取长补短，尽力去选择最合适的方式来权衡编译本地代码的时间和直接解释执行代码的时间</li><li>在今天，Java程序的运行性能早已脱胎换骨，已经达到了可以和C/C++ 程序一较高下的地步</li></ul><blockquote><p>问题：有些开发人员会感觉到诧异，既然HotSpot VM中已经内置JIT编译器了，那么为什么还需要再使用解释器来“拖累”程序的执行性能呢？</p></blockquote><ul><li>比如JRockit VM内部就不包含解释器，字节码全部都依靠即时编译器编译后执行</li><li>首先明确： 当程序启动后，解释器可以马上发挥作用，省去编译的时间，立即执行（解释器上来就能把字节码翻译执行，响应速度快）。 编译器要想发挥作用，把代码编译成本地代码（机器代码），需要一定的执行时间。但编译为本地代码后，执行效率高</li><li>所以： 尽管JRockit VM中程序的执行性能会非常高效，但程序在启动时必然需要花费更长的时间来进行编译。对于服务端应用来说，启动时间并非是关注重点，但对于那些看中启动时间的应用场景而言，或许就需要采用解释器与即时编译器并存的架构来换取一个平衡点。在此模式下，当Java虚拟器启动时，解释器可以首先发挥作用，而不必等待即时编译器全部编译完成后再执行，这样可以省去许多不必要的编译时间。随着时间的推移，编译器发挥作用，把越来越多的代码编译成本地代码，获得更高的执行效率</li><li>同时，解释执行在编译器进行激进优化不成立的时候，作为编译器的“逃生门”</li></ul><h2 id="hotspot-jvm的执行方式" tabindex="-1"><a class="header-anchor" href="#hotspot-jvm的执行方式" aria-hidden="true">#</a> HotSpot JVM的执行方式</h2><p>当虚拟机启动的时候，解释器可以首先发挥作用，而不必等待即时编译器全部编译完成再执行，这样可以省去许多不必要的编译时间。并且随着程序运行时间的推移，即时编译器逐渐发挥作用，根据热点探测功能，将有价值的字节码编译为本地机器指令，以换取更高的程序执行效率</p><blockquote><p>案例</p></blockquote><ul><li>注意解释执行与编译执行在线上环境微妙的辩证关系。机器在热机状态可以承受的负载要大于冷机状态。如果以热机状态时的流量进行切流，可能使处于冷机状态的服务器因无法承载流量而假死</li><li>在生产环境发布过程中，以分批的方式进行发布，根据机器数量划分成多个批次，每个批次的机器数至多占到整个集群的1/8。曾经有这样的故障案例：某程序员在发布平台进行分批发布，在输入发布总批数时，误填写成分为两批发布。如果是热机状态，在正常情况下一半的机器可以勉强承载流量，但由于刚启动的JVM均是解释执行，还没有进行热点代码统计和JIT动态编译，导致机器启动之后，当前1/2发布成功的服务器马上全部宕机，此故障说明了JIT的存在。—阿里团队</li></ul><figure><img src="'+k+`" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><blockquote><p>代码演示</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JITTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;让天下没有难学的技术&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过VisualVM可以看到JIT的编译次数</p><figure><img src="`+m+'" alt="image-20220302203106438" tabindex="0" loading="lazy"><figcaption>image-20220302203106438</figcaption></figure><p>也可以通过命令行输入<code>jconsole</code>来查看</p><figure><img src="'+v+'" alt="image-20220302203123227" tabindex="0" loading="lazy"><figcaption>image-20220302203123227</figcaption></figure><figure><img src="'+b+`" alt="image-20220302203205802" tabindex="0" loading="lazy"><figcaption>image-20220302203205802</figcaption></figure><h2 id="概念解释" tabindex="-1"><a class="header-anchor" href="#概念解释" aria-hidden="true">#</a> 概念解释</h2><ul><li>Java 语言的 “编译期” 其实是一段 “不确定” 的操作过程，因为它可能是指一个前端编译器（其实叫“编译器的前端”更准确一些）<strong>把.java文件转变成.class文件的过程</strong></li><li>也可能是指虚拟机的后端运行期编译器（<strong>JIT编译器</strong>，Just In Time Compiler）<strong>把字节码转变成机器码的过程</strong></li><li>还可能是指使用静态提前编译器（AOT编译器，Ahead of Time Compiler）直接把.java文件编译成本地机器代码的过程</li></ul><blockquote><pre><code>前端编译器：Sun的Javac、Eclipse JDT中的增量式编译器（ECJ）

JIT编译器：HotSpot VM的C1、C2编译器

AOT 编译器：GNU Compiler for the Java（GCJ）、Excelsior JET
</code></pre></blockquote><h2 id="热点代码及探测技术" tabindex="-1"><a class="header-anchor" href="#热点代码及探测技术" aria-hidden="true">#</a> 热点代码及探测技术</h2><blockquote><p>当然是否需要启动JIT编译器将字节码直接编译为对应平台的本地机器指令，则需要根据代码被调用执行的频率而定。关于那些需要被编译为本地代码的字节码，也被称之为“热点代码”，JIT编译器在运行时会针对那些频繁被调用的“热点代码”做出深度优化，将其直接编译为对应平台的本地机器指令，以此提升Java程序的执行性能</p></blockquote><ul><li>一个被多次调用的方法，或者是一个方法体内部循环次数较多的循环体都可以被称之为“热点代码”，因此都可以通过JIT编译器编译为本地机器指令。由于这种编译方式发生在方法的执行过程中，因此被称之为栈上替换，或简称为OSR（On Stack Replacement）编译</li><li>一个方法究竟要被调用多少次，或者一个循环体究竟需要执行多少次循环才可以达到这个标准？必然需要一个明确的阈值，JIT编译器才会将这些“热点代码”编译为本地机器指令执行。这里主要依靠热点探测功能</li><li>目前HotSpot VM所采用的热点探测方式是基于计数器的热点探测</li><li>采用基于计数器的热点探测，HotSpot VM将会为每一个方法都建立2个不同类型的计数器，分别为方法调用计数器（Invocation Counter）和回边计数器（Back Edge Counter） <ul><li>方法调用计数器用于统计方法的调用次数</li><li>回边计数器则用于统计循环体执行的循环次数</li></ul></li></ul><h3 id="方法调用计数器" tabindex="-1"><a class="header-anchor" href="#方法调用计数器" aria-hidden="true">#</a> 方法调用计数器</h3><ul><li>这个计数器就用于统计方法被调用的次数，它的默认阀值在Client模式下是 1500 次，在Server模式下是 10000 次。超过这个阈值，就会触发JIT编译</li><li>这个阀值可以通过虚拟机参数 <code>-XX:CompileThreshold</code>来人为设定</li><li>当一个方法被调用时，会先检查该方法是否存在被JIT编译过的版本，如果存在，则优先使用编译后的本地代码来执行。如果不存在已被编译过的版本，则将此方法的调用计数器值加1，然后判断方法调用计数器与回边计数器值之和是否超过方法调用计数器的阀值。如果已超过阈值，那么将会向即时编译器提交一个该方法的代码编译请求</li></ul><figure><img src="`+h+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><figure><img src="'+g+'" alt="image-20220302204643986" tabindex="0" loading="lazy"><figcaption>image-20220302204643986</figcaption></figure><h3 id="热度衰减" tabindex="-1"><a class="header-anchor" href="#热度衰减" aria-hidden="true">#</a> 热度衰减</h3><ul><li>如果不做任何设置，方法调用计数器统计的并不是方法被调用的绝对次数，而是一个相对的执行频率，即一段时间之内方法被调用的次数。当超过一定的时间限度，如果方法的调用次数仍然不足以让它提交给即时编译器编译，那这个方法的调用计数器就会被减少一半，这个过程称为方法调用计数器热度的衰减（Counter Decay），而这段时间就称为此方法统计的半衰周期（Counter Half Life Time）</li><li>进行热度衰减的动作是在虚拟机进行垃圾收集时顺便进行的，可以使用虚拟机参数 <code>-XX:-UseCounterDecay</code> 来关闭热度衰减，让方法计数器统计方法调用的绝对次数，这样，只要系统运行时间足够长，绝大部分方法都会被编译成本地代码</li><li>另外，可以使用<code>-XX:CounterHalfLifeTime</code>参数设置半衰周期的时间，单位是秒</li></ul><h3 id="回边计数器" tabindex="-1"><a class="header-anchor" href="#回边计数器" aria-hidden="true">#</a> 回边计数器</h3><p>它的作用是统计一个方法中<strong>循环体代码执行的次数</strong>，在字节码中遇到控制流向后跳转的指令称为“回边”（Back Edge）。显然，建立回边计数器统计的目的就是为了触发OSR编译</p><figure><img src="'+f+'" alt="image-20220302204939613" tabindex="0" loading="lazy"><figcaption>image-20220302204939613</figcaption></figure><h2 id="hotspotvm-可以设置程序执行方法" tabindex="-1"><a class="header-anchor" href="#hotspotvm-可以设置程序执行方法" aria-hidden="true">#</a> HotSpotVM 可以设置程序执行方法</h2><p>缺省情况下HotSpot VM是采用解释器与即时编译器并存的架构，当然开发人员可以根据具体的应用场景，通过命令显式地为Java虚拟机指定在运行时到底是完全采用解释器执行，还是完全采用即时编译器执行。如下所示：</p><ul><li><code>-Xint</code>：完全采用解释器模式执行程序；</li><li><code>-Xcomp</code>：完全采用即时编译器模式执行程序。如果即时编译出现问题，解释器会介入执行</li><li><code>-Xmixed</code>：采用<strong>解释器+即时编译器</strong>的混合模式共同执行程序</li></ul><blockquote><p>通过命令行方式可以查看或设置当前的模式</p></blockquote><figure><img src="'+J+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><figure><img src="'+y+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><figure><img src="'+_+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><figure><img src="'+x+`" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><blockquote><p>也可以通过代码的方式设置模式</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 测试解释器模式和JIT编译模式
 * -Xint  : 5013ms
 * -Xcomp : 686ms
 * -Xmixed : 641ms
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntCompTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">testPrimeNumber</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;花费的时间为：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testPrimeNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//计算100以内的质数</span>
            label<span class="token operator">:</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">%</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">continue</span> label<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token comment">//System.out.println(j);</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以看到程序执行1000000次，在执行前10000次时是使用解释器编译的，往后才是使用即时编译器进行编译</li><li>因为在Server模式下方法调用计数器的阈值是 10000 次</li></ul><h2 id="hotspotvm中-jit-分类" tabindex="-1"><a class="header-anchor" href="#hotspotvm中-jit-分类" aria-hidden="true">#</a> HotSpotVM中 JIT 分类</h2><p>在HotSpot VM中内嵌有两个JIT编译器，分别为Client Compiler 和 Server Compiler，但大多数情况下我们简称为 C1编译器 和 C2编译器。<strong>开发人员可以通过如下命令显式指定Java虚拟机在运行时到底使用哪一种即时编译器</strong>，如下所示：</p><ul><li>-client：指定Java虚拟机运行在Client模式下，并使用C1编译器 <ul><li>C1编译器会对字节码进行简单和可靠的优化，耗时短。以达到更快的编译速度</li></ul></li><li>-server：指定Java虚拟机运行在server模式下，并使用C2编译器 <ul><li>C2进行耗时较长的优化，以及激进优化。但优化的代码执行效率更高</li></ul></li></ul><p>分层编译（Tiered Compilation）策略：程序解释执行（不开启性能监控）可以触发C1编译，将字节码编译成机器码，可以进行简单优化，也可以加上性能监控，C2编译会根据性能监控信息进行激进优化</p><p>不过在Java7版本之后，一旦开发人员在程序中显式指定命令“-server&quot;时，默认将会开启分层编译策略，由C1编译器和C2编译器相互协作共同来执行编译任务</p><h3 id="c1-和-c2编译器不同的优化策略" tabindex="-1"><a class="header-anchor" href="#c1-和-c2编译器不同的优化策略" aria-hidden="true">#</a> C1 和 C2编译器不同的优化策略</h3><ul><li>在不同的编译器上有不同的优化策略，C1编译器上主要有方法内联、去虚拟化、冗余消除 <ul><li>方法内联：将引用的函数代码编译到引用点处，这样可以<u>减少栈帧的生成</u>，减少参数传递以及跳转过程</li><li>去虚拟化：对唯一的实现类进行内联</li><li>冗余消除：在运行期间把一些<u>不会执行的代码折叠掉</u></li></ul></li><li>C2的优化主要是在全局层面，逃逸分析（前面讲过，并不成熟）是优化的基础。基于逃逸分析在C2上有如下几种优化： <ul><li>标量替换：用标量值代替聚合对象的属性值</li><li>栈上分配：对于未逃逸的对象分配对象在栈而不是堆</li><li>同步消除：清除同步操作，通常指synchronized</li></ul></li></ul><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h1><ul><li>一般来讲，JIT编译出来的机器码性能比解释器高</li><li>C2编译器启动时长比C1慢，系统稳定执行以后，C2编译器执行速度远快于C1编译器</li><li>自JDK10起，HotSpot又加入了一个全新的即时编译器：Graal编译器</li><li>编译效果短短几年时间就追评了C2编译器，未来可期</li><li>目前，带着实验状态标签，需要使用开关参数<code>-XX:+UnlockExperimentalvMOptions -XX:+UseJVMCICompiler</code>去激活才能使用</li></ul><h1 id="写在最后-aot编译器" tabindex="-1"><a class="header-anchor" href="#写在最后-aot编译器" aria-hidden="true">#</a> 写在最后：AOT编译器</h1><ul><li>jdk9引入了AOT编译器（静态提前编译器，Ahead of Time Compiler）</li><li>Java 9引入了实验性AOT编译工具 jaotc。它借助了Graal编译器，将所输入的Java类文件转换为机器码，并存放至生成的动态共享库之中</li><li>所谓AOT编译，是与即时编译相对立的一个概念。我们知道，即时编译指的是在程序的运行过程中，将字节码转换为可在硬件上直接运行的机器码，并部署至托管环境中的过程。而AOT编译指的则是，在程序运行之前，便将字节码转换为机器码的过程</li><li>最大的好处：Java虚拟机加载已经预编译成二进制库，可以直接执行。不必等待及时编译器的预热，减少Java应用给人带来“第一次运行慢” 的不良体验</li><li>缺点： <ul><li>破坏了 java “ 一次编译，到处运行” 的理念，必须为每个不同的硬件，OS编译对应的发行包</li><li>降低了Java链接过程的动态性，加载的代码在编译器就必须全部已知</li><li>还需要继续优化中，最初只支持Linux X64 java base</li></ul></li></ul>`,107),w=[j];function T(I,M){return n(),s("div",null,w)}const q=a(C,[["render",T],["__file","12.执行引擎.html.vue"]]);export{q as default};
