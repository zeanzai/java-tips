import{_ as o,W as l,X as p,a0 as s,a1 as n,Z as t,$ as e,C as c}from"./framework-c8643d23.js";const i={},r=s("h1",{id:"算法模板",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#算法模板","aria-hidden":"true"},"#"),n(" 算法模板")],-1),u=s("p",null,"光看模板肯定看不懂的，刷几道题就明白了",-1),d={href:"https://github.com/labuladong/fucking-algorithm",target:"_blank",rel:"noopener noreferrer"},k=e(`<h2 id="二分查找" tabindex="-1"><a class="header-anchor" href="#二分查找" aria-hidden="true">#</a> 二分查找</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            right <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="↖️↗️双指针" tabindex="-1"><a class="header-anchor" href="#↖️↗️双指针" aria-hidden="true">#</a> ↖️↗️双指针</h2><h3 id="快慢指针的常见算法" tabindex="-1"><a class="header-anchor" href="#快慢指针的常见算法" aria-hidden="true">#</a> 快慢指针的常见算法</h3><h4 id="判定链表中是否含有环" tabindex="-1"><a class="header-anchor" href="#判定链表中是否含有环" aria-hidden="true">#</a> 判定链表中是否含有环</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ListNode</span> fast<span class="token punctuation">,</span> slow<span class="token punctuation">;</span>
    fast <span class="token operator">=</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> slow<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="已知链表中含有环-返回这个环的起始位置" tabindex="-1"><a class="header-anchor" href="#已知链表中含有环-返回这个环的起始位置" aria-hidden="true">#</a> 已知链表中含有环，返回这个环的起始位置</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ListNode</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ListNode</span> fast<span class="token punctuation">,</span> slow<span class="token punctuation">;</span>
    fast <span class="token operator">=</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> slow<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 上面的代码类似 hasCycle 函数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> fast<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// fast 遇到空指针说明没有环</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>slow <span class="token operator">!=</span> fast<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> slow<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="寻找链表的中点" tabindex="-1"><a class="header-anchor" href="#寻找链表的中点" aria-hidden="true">#</a> 寻找链表的中点</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// slow 就在中间位置</span>
<span class="token keyword">return</span> slow<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="寻找链表的倒数第-k-个元素" tabindex="-1"><a class="header-anchor" href="#寻找链表的倒数第-k-个元素" aria-hidden="true">#</a> 寻找链表的倒数第 k 个元素</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ListNode</span> slow<span class="token punctuation">,</span> fast<span class="token punctuation">;</span>
slow <span class="token operator">=</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> 
    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> slow<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="左右指针的常用算法" tabindex="-1"><a class="header-anchor" href="#左右指针的常用算法" aria-hidden="true">#</a> 左右指针的常用算法</h3><h4 id="二分查找-1" tabindex="-1"><a class="header-anchor" href="#二分查找-1" aria-hidden="true">#</a> 二分查找</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
    <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">+</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span>
            <span class="token keyword">return</span> mid<span class="token punctuation">;</span> 
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> 
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span>
            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="两数之和" tabindex="-1"><a class="header-anchor" href="#两数之和" aria-hidden="true">#</a> 两数之和</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 题目要求的索引是从 1 开始的</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 让 sum 大一点</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            right<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 让 sum 小一点</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="反转数组" tabindex="-1"><a class="header-anchor" href="#反转数组" aria-hidden="true">#</a> 反转数组</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// swap(nums[left], nums[right])</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        left<span class="token operator">++</span><span class="token punctuation">;</span> right<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="滑动窗口算法" tabindex="-1"><a class="header-anchor" href="#滑动窗口算法" aria-hidden="true">#</a> 滑动窗口算法</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/* 滑动窗口算法框架 */</span>
<span class="token keyword">void</span> <span class="token function">slidingWindow</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> string t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    unordered_map<span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> need<span class="token punctuation">,</span> window<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> t<span class="token punctuation">)</span> need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> valid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// c 是将移入窗口的字符</span>
        <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 右移窗口</span>
        right<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token comment">// 进行窗口内数据的一系列更新</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

        <span class="token doc-comment comment">/*** debug 输出的位置 ***/</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;window: [%d, %d)\\n&quot;</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token doc-comment comment">/********************/</span>

        <span class="token comment">// 判断左侧窗口是否要收缩</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>window needs shrink<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// d 是将移出窗口的字符</span>
            <span class="token keyword">char</span> d <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 左移窗口</span>
            left<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token comment">// 进行窗口内数据的一系列更新</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="↩️-回溯" tabindex="-1"><a class="header-anchor" href="#↩️-回溯" aria-hidden="true">#</a> ↩️ 回溯</h2><p>回溯的大致模板就是以下，掌握三个核心点就行：</p><ul><li>递归函数</li><li>递归里肯定有一个if（至少一个）</li><li>递归里或者外面有一个for循环 完毕，剩下的自己刷题领悟，下面是模板</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* 主函数，输入一组不重复的数字，返回它们的全排列 */</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">permute</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 记录「路径」</span>
    <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> track <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> track<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 路径：记录在 track 中</span>
<span class="token comment">// 选择列表：nums 中不存在于 track 的那些元素</span>
<span class="token comment">// 结束条件：nums 中的元素全都在 track 中出现</span>
<span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> track<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 触发结束条件</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>track<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span>track<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 排除不合法的选择</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>track<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token comment">// 做选择</span>
        track<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 进入下一层决策树</span>
        <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> track<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 取消选择</span>
        track<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例题：</p>`,27),m={href:"https://leetcode.cn/problems/permutations/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://leetcode.cn/submissions/detail/432257030/",target:"_blank",rel:"noopener noreferrer"},h=e(`<h2 id="🔝-贪心" tabindex="-1"><a class="header-anchor" href="#🔝-贪心" aria-hidden="true">#</a> 🔝 贪心</h2><p>贪心的3个核心点：</p><ul><li>for循环</li><li>Math.max</li><li>数组中的当前元素和前一个元素相关（至于为什么刷完题就知道了）</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>bool <span class="token function">canJump</span><span class="token punctuation">(</span>vector<span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> farthest <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 不断计算能跳到的最远距离</span>
        farthest <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>farthest<span class="token punctuation">,</span> i <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 可能碰到了 0，卡住跳不动了</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>farthest <span class="token operator">&lt;=</span> i<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> farthest <span class="token operator">&gt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>贪心就是通过局部最优求全局最优，最两道题就明白了</p>`,5),_={href:"https://leetcode.cn/problems/jump-game/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/description/",target:"_blank",rel:"noopener noreferrer"},f=e(`<h2 id="🛣️-动态规划" tabindex="-1"><a class="header-anchor" href="#🛣️-动态规划" aria-hidden="true">#</a> 🛣️ 动态规划</h2><p>动态规划是我最怕的题目之一，主要是要思考状态转移方程</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code># 初始化 base <span class="token keyword">case</span>
dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token operator">=</span> base
# 进行状态转移
<span class="token keyword">for</span> 状态<span class="token number">1</span> in 状态<span class="token number">1</span>的所有取值：
    <span class="token keyword">for</span> 状态<span class="token number">2</span> in 状态<span class="token number">2</span>的所有取值：
        <span class="token keyword">for</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            dp<span class="token punctuation">[</span>状态<span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>状态<span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token operator">=</span> 求最值<span class="token punctuation">(</span>选择<span class="token number">1</span>，选择<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>推荐两道题去理解动态规划：</p>`,4),g={href:"https://leetcode.cn/problems/unique-paths/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://leetcode.cn/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/",target:"_blank",rel:"noopener noreferrer"},w=s("blockquote",null,[s("p",null,"更进阶的动态规划可能还要考虑更多情况")],-1),x={href:"https://leetcode.cn/problems/maximum-product-subarray/description/",target:"_blank",rel:"noopener noreferrer"},j=e('<h2 id="🌈-分治" tabindex="-1"><a class="header-anchor" href="#🌈-分治" aria-hidden="true">#</a> 🌈 分治</h2><p>@todo</p><h2 id="🔎-并查集" tabindex="-1"><a class="header-anchor" href="#🔎-并查集" aria-hidden="true">#</a> 🔎 并查集</h2><p>@todo</p><h1 id="刷题顺序" tabindex="-1"><a class="header-anchor" href="#刷题顺序" aria-hidden="true">#</a> 刷题顺序</h1><h2 id="二叉树" tabindex="-1"><a class="header-anchor" href="#二叉树" aria-hidden="true">#</a> 二叉树</h2><ul><li>掌握二叉树递归与非递归遍历</li><li>理解 DFS 前序遍历与分治法</li><li>理解 BFS 层次遍历</li></ul><p>精选：</p>',8),I={class:"task-list-container"},L={class:"task-list-item"},N=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-0",disabled:"disabled"},null,-1),q={class:"task-list-item-label",for:"task-item-0"},z={href:"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/",target:"_blank",rel:"noopener noreferrer"},B={class:"task-list-item"},M=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-1",disabled:"disabled"},null,-1),S={class:"task-list-item-label",for:"task-item-1"},C={href:"https://leetcode-cn.com/problems/balanced-binary-tree/",target:"_blank",rel:"noopener noreferrer"},O={class:"task-list-item"},D=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-2",disabled:"disabled"},null,-1),H={class:"task-list-item-label",for:"task-item-2"},P={href:"https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/",target:"_blank",rel:"noopener noreferrer"},T={class:"task-list-item"},V=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-3",disabled:"disabled"},null,-1),E={class:"task-list-item-label",for:"task-item-3"},F={href:"https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/",target:"_blank",rel:"noopener noreferrer"},W={class:"task-list-item"},J=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-4",disabled:"disabled"},null,-1),K={class:"task-list-item-label",for:"task-item-4"},X={href:"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/",target:"_blank",rel:"noopener noreferrer"},Z={class:"task-list-item"},$=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-5",disabled:"disabled"},null,-1),A={class:"task-list-item-label",for:"task-item-5"},G={href:"https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/",target:"_blank",rel:"noopener noreferrer"},Q={class:"task-list-item"},R=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-6",disabled:"disabled"},null,-1),U={class:"task-list-item-label",for:"task-item-6"},Y={href:"https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/",target:"_blank",rel:"noopener noreferrer"},ss={class:"task-list-item"},ns=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-7",disabled:"disabled"},null,-1),as={class:"task-list-item-label",for:"task-item-7"},ts={href:"https://leetcode-cn.com/problems/validate-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"},es={class:"task-list-item"},os=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-8",disabled:"disabled"},null,-1),ls={class:"task-list-item-label",for:"task-item-8"},ps={href:"https://leetcode-cn.com/problems/insert-into-a-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"},cs=e('<h2 id="链表" tabindex="-1"><a class="header-anchor" href="#链表" aria-hidden="true">#</a> 链表</h2><ul><li>null/nil异常处理</li><li>dummy node哑巴节点</li><li>快慢指针</li><li>插入一个节点到排序链表</li><li>从一个链表中移除一个节点</li><li>翻转链表</li><li>合并两个链表</li><li>找到链表的中间节点</li></ul>',2),is={class:"task-list-container"},rs={class:"task-list-item"},us=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-9",disabled:"disabled"},null,-1),ds={class:"task-list-item-label",for:"task-item-9"},ks={href:"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/",target:"_blank",rel:"noopener noreferrer"},ms={class:"task-list-item"},bs=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-10",disabled:"disabled"},null,-1),hs={class:"task-list-item-label",for:"task-item-10"},_s={href:"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/",target:"_blank",rel:"noopener noreferrer"},vs={class:"task-list-item"},fs=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-11",disabled:"disabled"},null,-1),gs={class:"task-list-item-label",for:"task-item-11"},ys={href:"https://leetcode-cn.com/problems/reverse-linked-list/",target:"_blank",rel:"noopener noreferrer"},ws={class:"task-list-item"},xs=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-12",disabled:"disabled"},null,-1),js={class:"task-list-item-label",for:"task-item-12"},Is={href:"https://leetcode-cn.com/problems/reverse-linked-list-ii/",target:"_blank",rel:"noopener noreferrer"},Ls={class:"task-list-item"},Ns=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-13",disabled:"disabled"},null,-1),qs={class:"task-list-item-label",for:"task-item-13"},zs={href:"https://leetcode-cn.com/problems/merge-two-sorted-lists/",target:"_blank",rel:"noopener noreferrer"},Bs={class:"task-list-item"},Ms=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-14",disabled:"disabled"},null,-1),Ss={class:"task-list-item-label",for:"task-item-14"},Cs={href:"https://leetcode-cn.com/problems/partition-list/",target:"_blank",rel:"noopener noreferrer"},Os={class:"task-list-item"},Ds=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-15",disabled:"disabled"},null,-1),Hs={class:"task-list-item-label",for:"task-item-15"},Ps={href:"https://leetcode-cn.com/problems/sort-list/",target:"_blank",rel:"noopener noreferrer"},Ts={class:"task-list-item"},Vs=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-16",disabled:"disabled"},null,-1),Es={class:"task-list-item-label",for:"task-item-16"},Fs={href:"https://leetcode-cn.com/problems/reorder-list/",target:"_blank",rel:"noopener noreferrer"},Ws={class:"task-list-item"},Js=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-17",disabled:"disabled"},null,-1),Ks={class:"task-list-item-label",for:"task-item-17"},Xs={href:"https://leetcode-cn.com/problems/linked-list-cycle/",target:"_blank",rel:"noopener noreferrer"},Zs={class:"task-list-item"},$s=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-18",disabled:"disabled"},null,-1),As={class:"task-list-item-label",for:"task-item-18"},Gs={href:"https://leetcode-cn.com/problems/linked-list-cycle-ii/",target:"_blank",rel:"noopener noreferrer"},Qs={class:"task-list-item"},Rs=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-19",disabled:"disabled"},null,-1),Us={class:"task-list-item-label",for:"task-item-19"},Ys={href:"https://leetcode-cn.com/problems/palindrome-linked-list/",target:"_blank",rel:"noopener noreferrer"},sn={class:"task-list-item"},nn=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-20",disabled:"disabled"},null,-1),an={class:"task-list-item-label",for:"task-item-20"},tn={href:"https://leetcode-cn.com/problems/copy-list-with-random-pointer/",target:"_blank",rel:"noopener noreferrer"},en=s("h2",{id:"字符串",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#字符串","aria-hidden":"true"},"#"),n(" 字符串")],-1),on=s("p",null,"需要考虑的问题：",-1),ln=s("ol",null,[s("li",null,"要不要使用库函数"),s("li",null,"双指针法"),s("li",null,"反转系列"),s("li",null,"KMP")],-1),pn={class:"task-list-container"},cn={class:"task-list-item"},rn=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-21",disabled:"disabled"},null,-1),un={class:"task-list-item-label",for:"task-item-21"},dn={href:"https://leetcode-cn.com/problems/reverse-string/",target:"_blank",rel:"noopener noreferrer"},kn={class:"task-list-item"},mn=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-22",disabled:"disabled"},null,-1),bn={class:"task-list-item-label",for:"task-item-22"},hn={href:"https://leetcode-cn.com/problems/reverse-string-ii/",target:"_blank",rel:"noopener noreferrer"},_n={class:"task-list-item"},vn=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-23",disabled:"disabled"},null,-1),fn={class:"task-list-item-label",for:"task-item-23"},gn={href:"https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/",target:"_blank",rel:"noopener noreferrer"},yn={class:"task-list-item"},wn=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-24",disabled:"disabled"},null,-1),xn={class:"task-list-item-label",for:"task-item-24"},jn={href:"https://leetcode-cn.com/problems/reverse-words-in-a-string/",target:"_blank",rel:"noopener noreferrer"},In={class:"task-list-item"},Ln=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-25",disabled:"disabled"},null,-1),Nn={class:"task-list-item-label",for:"task-item-25"},qn={href:"https://leetcode-cn.com/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/",target:"_blank",rel:"noopener noreferrer"},zn={class:"task-list-item"},Bn=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-26",disabled:"disabled"},null,-1),Mn={class:"task-list-item-label",for:"task-item-26"},Sn={href:"https://leetcode-cn.com/problems/implement-strstr/",target:"_blank",rel:"noopener noreferrer"},Cn={class:"task-list-item"},On=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-27",disabled:"disabled"},null,-1),Dn={class:"task-list-item-label",for:"task-item-27"},Hn={href:"https://leetcode-cn.com/problems/repeated-substring-pattern/",target:"_blank",rel:"noopener noreferrer"},Pn=s("h2",{id:"动态规划",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#动态规划","aria-hidden":"true"},"#"),n(" 动态规划")],-1),Tn=s("p",null,"最长递增子序列 ➡️ 单词拆分 ➡️ 编辑距离",-1),Vn=s("p",null,"矩阵DP",-1),En={class:"task-list-container"},Fn={class:"task-list-item"},Wn=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-28",disabled:"disabled"},null,-1),Jn={class:"task-list-item-label",for:"task-item-28"},Kn={href:"https://leetcode-cn.com/problems/triangle/",target:"_blank",rel:"noopener noreferrer"},Xn={class:"task-list-item"},Zn=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-29",disabled:"disabled"},null,-1),$n={class:"task-list-item-label",for:"task-item-29"},An={href:"https://leetcode-cn.com/problems/minimum-path-sum/",target:"_blank",rel:"noopener noreferrer"},Gn={class:"task-list-item"},Qn=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-30",disabled:"disabled"},null,-1),Rn={class:"task-list-item-label",for:"task-item-30"},Un={href:"https://leetcode-cn.com/problems/unique-paths/",target:"_blank",rel:"noopener noreferrer"},Yn={class:"task-list-item"},sa=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-31",disabled:"disabled"},null,-1),na={class:"task-list-item-label",for:"task-item-31"},aa={href:"https://leetcode-cn.com/problems/unique-paths-ii/",target:"_blank",rel:"noopener noreferrer"},ta=s("p",null,"序列",-1),ea={class:"task-list-container"},oa={class:"task-list-item"},la=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-32",disabled:"disabled"},null,-1),pa={class:"task-list-item-label",for:"task-item-32"},ca={href:"https://leetcode-cn.com/problems/climbing-stairs/",target:"_blank",rel:"noopener noreferrer"},ia={class:"task-list-item"},ra=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-33",disabled:"disabled"},null,-1),ua={class:"task-list-item-label",for:"task-item-33"},da={href:"https://leetcode-cn.com/problems/jump-game/",target:"_blank",rel:"noopener noreferrer"},ka={class:"task-list-item"},ma=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-34",disabled:"disabled"},null,-1),ba={class:"task-list-item-label",for:"task-item-34"},ha={href:"https://leetcode-cn.com/problems/jump-game-ii/",target:"_blank",rel:"noopener noreferrer"},_a={class:"task-list-item"},va=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-35",disabled:"disabled"},null,-1),fa={class:"task-list-item-label",for:"task-item-35"},ga={href:"https://leetcode-cn.com/problems/palindrome-partitioning-ii/",target:"_blank",rel:"noopener noreferrer"},ya={class:"task-list-item"},wa=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-36",disabled:"disabled"},null,-1),xa={class:"task-list-item-label",for:"task-item-36"},ja={href:"https://leetcode-cn.com/problems/longest-increasing-subsequence/",target:"_blank",rel:"noopener noreferrer"},Ia={class:"task-list-item"},La=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-37",disabled:"disabled"},null,-1),Na={class:"task-list-item-label",for:"task-item-37"},qa={href:"https://leetcode-cn.com/problems/word-break/",target:"_blank",rel:"noopener noreferrer"},za=s("p",null,"两个序列的DP",-1),Ba={class:"task-list-container"},Ma={class:"task-list-item"},Sa=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-38",disabled:"disabled"},null,-1),Ca={class:"task-list-item-label",for:"task-item-38"},Oa={href:"https://leetcode-cn.com/problems/longest-common-subsequence/",target:"_blank",rel:"noopener noreferrer"},Da={class:"task-list-item"},Ha=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-39",disabled:"disabled"},null,-1),Pa={class:"task-list-item-label",for:"task-item-39"},Ta={href:"https://leetcode-cn.com/problems/edit-distance/",target:"_blank",rel:"noopener noreferrer"},Va=s("p",null,"背包 & 零钱兑换",-1),Ea={class:"task-list-container"},Fa={class:"task-list-item"},Wa=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-40",disabled:"disabled"},null,-1),Ja={class:"task-list-item-label",for:"task-item-40"},Ka={href:"https://leetcode-cn.com/problems/coin-change/",target:"_blank",rel:"noopener noreferrer"},Xa={class:"task-list-item"},Za=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-41",disabled:"disabled"},null,-1),$a={class:"task-list-item-label",for:"task-item-41"},Aa={href:"https://www.lintcode.com/problem/92/",target:"_blank",rel:"noopener noreferrer"},Ga={class:"task-list-item"},Qa=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-42",disabled:"disabled"},null,-1),Ra={class:"task-list-item-label",for:"task-item-42"},Ua={href:"https://www.lintcode.com/problem/125/",target:"_blank",rel:"noopener noreferrer"},Ya=s("h2",{id:"回溯",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#回溯","aria-hidden":"true"},"#"),n(" 回溯")],-1),st={class:"task-list-container"},nt={class:"task-list-item"},at=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-43",disabled:"disabled"},null,-1),tt={class:"task-list-item-label",for:"task-item-43"},et={href:"https://leetcode.cn/problems/subsets/",target:"_blank",rel:"noopener noreferrer"},ot={class:"task-list-item"},lt=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-44",disabled:"disabled"},null,-1),pt={class:"task-list-item-label",for:"task-item-44"},ct={href:"https://leetcode.cn/problems/subsets-ii/",target:"_blank",rel:"noopener noreferrer"},it={class:"task-list-item"},rt=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-45",disabled:"disabled"},null,-1),ut={class:"task-list-item-label",for:"task-item-45"},dt={href:"https://leetcode.cn/problems/permutations/",target:"_blank",rel:"noopener noreferrer"},kt={class:"task-list-item"},mt=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-46",disabled:"disabled"},null,-1),bt={class:"task-list-item-label",for:"task-item-46"},ht={href:"https://leetcode.cn/problems/permutations-ii/",target:"_blank",rel:"noopener noreferrer"},_t={class:"task-list-item"},vt=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-47",disabled:"disabled"},null,-1),ft={class:"task-list-item-label",for:"task-item-47"},gt={href:"https://leetcode.cn/problems/combination-sum/",target:"_blank",rel:"noopener noreferrer"},yt={class:"task-list-item"},wt=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-48",disabled:"disabled"},null,-1),xt={class:"task-list-item-label",for:"task-item-48"},jt={href:"https://leetcode.cn/problems/letter-combinations-of-a-phone-number/",target:"_blank",rel:"noopener noreferrer"},It={class:"task-list-item"},Lt=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-49",disabled:"disabled"},null,-1),Nt={class:"task-list-item-label",for:"task-item-49"},qt={href:"https://leetcode.cn/problems/palindrome-partitioning/",target:"_blank",rel:"noopener noreferrer"},zt={class:"task-list-item"},Bt=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-50",disabled:"disabled"},null,-1),Mt={class:"task-list-item-label",for:"task-item-50"},St={href:"https://leetcode.cn/problems/restore-ip-addresses/",target:"_blank",rel:"noopener noreferrer"},Ct=s("h2",{id:"滑动窗口",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#滑动窗口","aria-hidden":"true"},"#"),n(" 滑动窗口")],-1),Ot={class:"task-list-container"},Dt={class:"task-list-item"},Ht=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-51",disabled:"disabled"},null,-1),Pt={class:"task-list-item-label",for:"task-item-51"},Tt={href:"https://leetcode.cn/problems/sliding-window-maximum/",target:"_blank",rel:"noopener noreferrer"},Vt={class:"task-list-item"},Et=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-52",disabled:"disabled"},null,-1),Ft={class:"task-list-item-label",for:"task-item-52"},Wt={href:"https://leetcode.cn/problems/longest-substring-without-repeating-characters/",target:"_blank",rel:"noopener noreferrer"},Jt={class:"task-list-item"},Kt=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-53",disabled:"disabled"},null,-1),Xt={class:"task-list-item-label",for:"task-item-53"},Zt={href:"https://leetcode.cn/problems/find-all-anagrams-in-a-string/",target:"_blank",rel:"noopener noreferrer"},$t=s("h2",{id:"位运算",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#位运算","aria-hidden":"true"},"#"),n(" 位运算")],-1),At={class:"task-list-container"},Gt={class:"task-list-item"},Qt=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-54",disabled:"disabled"},null,-1),Rt={class:"task-list-item-label",for:"task-item-54"},Ut={href:"https://leetcode.cn/problems/power-of-two/",target:"_blank",rel:"noopener noreferrer"},Yt={class:"task-list-item"},se=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-55",disabled:"disabled"},null,-1),ne={class:"task-list-item-label",for:"task-item-55"},ae={href:"https://leetcode.cn/problems/number-of-1-bits/",target:"_blank",rel:"noopener noreferrer"},te={class:"task-list-item"},ee=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-56",disabled:"disabled"},null,-1),oe={class:"task-list-item-label",for:"task-item-56"},le={href:"https://leetcode.cn/problems/single-number/",target:"_blank",rel:"noopener noreferrer"},pe={class:"task-list-item"},ce=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-57",disabled:"disabled"},null,-1),ie={class:"task-list-item-label",for:"task-item-57"},re={href:"https://leetcode.cn/problems/single-number-ii/",target:"_blank",rel:"noopener noreferrer"},ue={class:"task-list-item"},de=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-58",disabled:"disabled"},null,-1),ke={class:"task-list-item-label",for:"task-item-58"},me={href:"https://leetcode.cn/problems/missing-number/",target:"_blank",rel:"noopener noreferrer"},be=e('<h2 id="分治" tabindex="-1"><a class="header-anchor" href="#分治" aria-hidden="true">#</a> 分治</h2><p>@todo</p><h2 id="贪心算法" tabindex="-1"><a class="header-anchor" href="#贪心算法" aria-hidden="true">#</a> 贪心算法</h2><p>@todo</p><h2 id="参考刷题顺序的仓库" tabindex="-1"><a class="header-anchor" href="#参考刷题顺序的仓库" aria-hidden="true">#</a> 参考刷题顺序的仓库</h2>',5),he={href:"https://greyireland.gitbook.io/algorithm-pattern/shu-ju-jie-gou-pian/binary_tree",target:"_blank",rel:"noopener noreferrer"},_e={href:"https://labuladong.gitee.io/algo/",target:"_blank",rel:"noopener noreferrer"},ve={href:"https://github.com/youngyangyang04/leetcode-master",target:"_blank",rel:"noopener noreferrer"},fe={href:"https://www.geekxh.com/",target:"_blank",rel:"noopener noreferrer"},ge=e(`<h1 id="力扣常用方法封装" tabindex="-1"><a class="header-anchor" href="#力扣常用方法封装" aria-hidden="true">#</a> 力扣常用方法封装</h1><h2 id="快慢指针找中间位置" tabindex="-1"><a class="header-anchor" href="#快慢指针找中间位置" aria-hidden="true">#</a> 快慢指针找中间位置</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">ListNode</span> <span class="token function">endOfFirstHalf</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">,</span> fast <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">return</span> slow<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="反转链表" tabindex="-1"><a class="header-anchor" href="#反转链表" aria-hidden="true">#</a> 反转链表</h2><p>这里用的是力扣官方的代码，我的声明的变量稍微有点多</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ListNode</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> curr <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>curr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ListNode</span> next <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        curr<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>
        prev <span class="token operator">=</span> curr<span class="token punctuation">;</span>
        curr <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> prev<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="后序遍历" tabindex="-1"><a class="header-anchor" href="#后序遍历" aria-hidden="true">#</a> 后序遍历</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postorder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">postorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">postorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="计算最大深度" tabindex="-1"><a class="header-anchor" href="#计算最大深度" aria-hidden="true">#</a> 计算最大深度</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="判断是否是平衡二叉树" tabindex="-1"><a class="header-anchor" href="#判断是否是平衡二叉树" aria-hidden="true">#</a> 判断是否是平衡二叉树</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如果要用hashmap统计个数" tabindex="-1"><a class="header-anchor" href="#如果要用hashmap统计个数" aria-hidden="true">#</a> 如果要用HashMap统计个数</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 遍历数组，统计每个数字出现的次数</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function ye(we,xe){const a=c("ExternalLinkIcon");return l(),p("div",null,[r,u,s("ul",null,[s("li",null,[n("部分参考了"),s("a",d,[n("lambdadong的算法小炒"),t(a)])])]),k,s("ul",null,[s("li",null,[s("a",m,[n("全排列"),t(a)])]),s("li",null,[s("a",b,[n("单词搜索"),t(a)])])]),h,s("ul",null,[s("li",null,[s("a",_,[n("跳跃游戏"),t(a)])]),s("li",null,[s("a",v,[n("买卖股票的最佳时机 II"),t(a)])])]),f,s("ul",null,[s("li",null,[s("a",g,[n("不同路径"),t(a)])]),s("li",null,[s("a",y,[n("剑指 Offer 13. 机器人的运动范围"),t(a)])])]),w,s("ul",null,[s("li",null,[n("考虑负数情况："),s("a",x,[n("乘积最大子数组"),t(a)])])]),j,s("ul",I,[s("li",L,[N,s("label",q,[s("a",z,[n("二叉树的最大深度"),t(a)])])]),s("li",B,[M,s("label",S,[s("a",C,[n(" 平衡二叉树"),t(a)])])]),s("li",O,[D,s("label",H,[s("a",P,[n("二叉树中的最大路径和"),t(a)])])]),s("li",T,[V,s("label",E,[s("a",F,[n("二叉树的最近公共祖先"),t(a)])])]),s("li",W,[J,s("label",K,[s("a",X,[n("二叉树的层序遍历"),t(a)])])]),s("li",Z,[$,s("label",A,[s("a",G,[n("二叉树的层序遍历 II"),t(a)])])]),s("li",Q,[R,s("label",U,[s("a",Y,[n("二叉树的锯齿形层序遍历"),t(a)])])]),s("li",ss,[ns,s("label",as,[s("a",ts,[n("验证二叉搜索树"),t(a)])])]),s("li",es,[os,s("label",ls,[s("a",ps,[n("二叉搜索树中的插入操作"),t(a)])])])]),cs,s("ul",is,[s("li",rs,[us,s("label",ds,[s("a",ks,[n("删除排序链表中的重复元素"),t(a)])])]),s("li",ms,[bs,s("label",hs,[s("a",_s,[n("删除排序链表中的重复元素 II"),t(a)])])]),s("li",vs,[fs,s("label",gs,[s("a",ys,[n("反转链表"),t(a)])])]),s("li",ws,[xs,s("label",js,[s("a",Is,[n("反转链表 II"),t(a)])])]),s("li",Ls,[Ns,s("label",qs,[s("a",zs,[n("合并两个有序链表"),t(a)])])]),s("li",Bs,[Ms,s("label",Ss,[s("a",Cs,[n("分隔链表"),t(a)])])]),s("li",Os,[Ds,s("label",Hs,[s("a",Ps,[n("排序链表"),t(a)])])]),s("li",Ts,[Vs,s("label",Es,[s("a",Fs,[n("重排链表"),t(a)])])]),s("li",Ws,[Js,s("label",Ks,[s("a",Xs,[n("环形链表"),t(a)])])]),s("li",Zs,[$s,s("label",As,[s("a",Gs,[n("环形链表 II"),t(a)])])]),s("li",Qs,[Rs,s("label",Us,[s("a",Ys,[n("回文链表"),t(a)])])]),s("li",sn,[nn,s("label",an,[s("a",tn,[n("复制带随机指针的链表"),t(a)])])])]),en,on,ln,s("ul",pn,[s("li",cn,[rn,s("label",un,[s("a",dn,[n("反转字符串"),t(a)])])]),s("li",kn,[mn,s("label",bn,[s("a",hn,[n("反转字符串 II"),t(a)])])]),s("li",_n,[vn,s("label",fn,[s("a",gn,[n("剑指 Offer 05. 替换空格"),t(a)])])]),s("li",yn,[wn,s("label",xn,[s("a",jn,[n("颠倒字符串中的单词"),t(a)])])]),s("li",In,[Ln,s("label",Nn,[s("a",qn,[n("剑指 Offer 58 - II. 左旋转字符串"),t(a)])])]),s("li",zn,[Bn,s("label",Mn,[s("a",Sn,[n("实现 strStr()"),t(a)])])]),s("li",Cn,[On,s("label",Dn,[s("a",Hn,[n("重复的子字符串"),t(a)])])])]),Pn,Tn,Vn,s("ul",En,[s("li",Fn,[Wn,s("label",Jn,[s("a",Kn,[n("三角形最小路径和"),t(a)])])]),s("li",Xn,[Zn,s("label",$n,[s("a",An,[n("最小路径和"),t(a)])])]),s("li",Gn,[Qn,s("label",Rn,[s("a",Un,[n("不同路径"),t(a)])])]),s("li",Yn,[sa,s("label",na,[s("a",aa,[n("不同路径 II"),t(a)])])])]),ta,s("ul",ea,[s("li",oa,[la,s("label",pa,[s("a",ca,[n("爬楼梯"),t(a)])])]),s("li",ia,[ra,s("label",ua,[s("a",da,[n("跳跃游戏"),t(a)])])]),s("li",ka,[ma,s("label",ba,[s("a",ha,[n("跳跃游戏 II"),t(a)])])]),s("li",_a,[va,s("label",fa,[s("a",ga,[n("分割回文串 II"),t(a)])])]),s("li",ya,[wa,s("label",xa,[s("a",ja,[n("最长递增子序列"),t(a)])])]),s("li",Ia,[La,s("label",Na,[s("a",qa,[n("单词拆分"),t(a)])])])]),za,s("ul",Ba,[s("li",Ma,[Sa,s("label",Ca,[s("a",Oa,[n("最长公共子序列"),t(a)])])]),s("li",Da,[Ha,s("label",Pa,[s("a",Ta,[n("编辑距离"),t(a)])])])]),Va,s("ul",Ea,[s("li",Fa,[Wa,s("label",Ja,[s("a",Ka,[n("零钱兑换"),t(a)])])]),s("li",Xa,[Za,s("label",$a,[s("a",Aa,[n("背包问题"),t(a)])])]),s("li",Ga,[Qa,s("label",Ra,[s("a",Ua,[n("背包问题（二）"),t(a)])])])]),Ya,s("ul",st,[s("li",nt,[at,s("label",tt,[s("a",et,[n("子集"),t(a)])])]),s("li",ot,[lt,s("label",pt,[s("a",ct,[n("子集 II"),t(a)])])]),s("li",it,[rt,s("label",ut,[s("a",dt,[n("全排列"),t(a)])])]),s("li",kt,[mt,s("label",bt,[s("a",ht,[n("全排列 II"),t(a)])])]),s("li",_t,[vt,s("label",ft,[s("a",gt,[n("组合总和"),t(a)])])]),s("li",yt,[wt,s("label",xt,[s("a",jt,[n("电话号码的字母组合"),t(a)])])]),s("li",It,[Lt,s("label",Nt,[s("a",qt,[n("分割回文串"),t(a)])])]),s("li",zt,[Bt,s("label",Mt,[s("a",St,[n("复原 IP 地址"),t(a)])])])]),Ct,s("ul",Ot,[s("li",Dt,[Ht,s("label",Pt,[s("a",Tt,[n("滑动窗口最大值"),t(a)])])]),s("li",Vt,[Et,s("label",Ft,[s("a",Wt,[n("无重复字符的最长子串"),t(a)])])]),s("li",Jt,[Kt,s("label",Xt,[s("a",Zt,[n("字母异位词"),t(a)])])])]),$t,s("ul",At,[s("li",Gt,[Qt,s("label",Rt,[s("a",Ut,[n("2的幂"),t(a)])])]),s("li",Yt,[se,s("label",ne,[s("a",ae,[n("返回二进制中1的个数"),t(a)])])]),s("li",te,[ee,s("label",oe,[s("a",le,[n("只出现一次的数字"),t(a)])])]),s("li",pe,[ce,s("label",ie,[s("a",re,[n("只出现一次的数字Ⅱ"),t(a)])])]),s("li",ue,[de,s("label",ke,[s("a",me,[n("缺失数字"),t(a)])])])]),be,s("ul",null,[s("li",null,[n("算法模板："),s("a",he,[n("https://greyireland.gitbook.io/algorithm-pattern/shu-ju-jie-gou-pian/binary_tree"),t(a)])]),s("li",null,[n("labuladong 的算法："),s("a",_e,[n("https://labuladong.gitee.io/algo/"),t(a)])]),s("li",null,[n("代码随想录："),s("a",ve,[n("https://github.com/youngyangyang04/leetcode-master"),t(a)])]),s("li",null,[n("小浩算法："),s("a",fe,[n("https://www.geekxh.com/"),t(a)])])]),ge])}const Ie=o(i,[["render",ye],["__file","leetcode.html.vue"]]);export{Ie as default};
