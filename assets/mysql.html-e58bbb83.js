import{_ as t,W as p,X as c,$ as n,a0 as a,Z as e,a2 as o,C as l}from"./framework-6a3aa88c.js";const d="/java-tips/assets/image-20220612134312190-d59563e7.webp",i="/java-tips/assets/image-20220712154711271-e0ba122d.webp",r="/java-tips/assets/image-20220712154456833-6675cad9.webp",g="/java-tips/assets/image-20220712154548420-9432a891.webp",u="/java-tips/assets/image-20220712154624540-f3c25e5d.webp",m="/java-tips/assets/image-20220712154658288-2e010d6d.webp",k="/java-tips/assets/image-20220712155601299-688173c4.webp",b="/java-tips/assets/image-20220718134133927-0798d21d.webp",h="/java-tips/assets/image-20220613143832546-7a3eb484.webp",v="/java-tips/assets/image-20220613143851071-2b4a3eac.webp",f="/java-tips/assets/image-20220613144017540-3b8d3d5e.webp",_="/java-tips/assets/v2-404a11c565a99a9382aa3ed1d8e05e9a_r-87280a93.webp",y="/java-tips/assets/image-20220706223058381-c10dff18.webp",w="/java-tips/assets/v2-0b5257fd270ef7e6e619e2eec293ec37_r-12db019c.webp",B="/java-tips/assets/image-20220706223114814-c510e235.webp",x="/java-tips/assets/v2-f470fb471caacb70acf65bc2a597b0c5_r-448268c9.webp",E="/java-tips/assets/image-20220706222414240-04047b87.webp",L="/java-tips/assets/v2-c698e64414f7cb1428e3025e133d9592_r-323cdc6f.webp",D="/java-tips/assets/image-20220706222426455-ce1b3e8b.webp",M="/java-tips/assets/image-20220718133551150-f5c9cbea.webp",I="/java-tips/assets/image-20220718133843334-a3cba1a2.webp",S="/java-tips/assets/image-20220718133843334-a3cba1a2.webp",T="/java-tips/assets/image-20220613210057735-3405f813.webp",R="/java-tips/assets/image-20220706212928940-9f985671.webp",C="/java-tips/assets/image-20220706212937926-4c76fc52.webp",q="/java-tips/assets/image-20220725150519009-928961eb.webp",A="/java-tips/assets/image-20220725150553230-aad57dff.webp",Q="/java-tips/assets/image-20220706213001613-272aa1b5.webp",O="/java-tips/assets/image-20220706213009977-ed8e5c3a.webp",j="/java-tips/assets/image-20220706213032809-a6b32db9.webp",z="/java-tips/assets/image-20220706213045311-b0f10d5d.webp",N="/java-tips/assets/image-20220706213100010-0c8b2e75.webp",V="/java-tips/assets/image-20220706213128010-62b339d2.webp",U="/java-tips/assets/image-20220706213147439-a6a4ae7e.webp",P="/java-tips/assets/image-20220706213155597-7c02b4b7.webp",H="/java-tips/assets/image-20220404124818143-6e372a84.webp",F="/java-tips/assets/image-20220404124827143-2464fc74.webp",X="/java-tips/assets/image-20220404124853946-1bf8530f.webp",W="/java-tips/assets/image-20220404124910100-4527cc14.webp",K="/java-tips/assets/image-20220404124922094-36cb6a1a.webp",G="/java-tips/assets/image-20220706213448142-2e2f91d0.webp",Z="/java-tips/assets/image-20220706213523943-e5b275fc.webp",J="/java-tips/assets/image-20220706213531140-4fa9fbe5.webp",Y="/java-tips/assets/image-20220706213538608-532adfbe.webp",$="/java-tips/assets/image-20220706213548852-ebd0ca80.webp",nn="/java-tips/assets/image-20220706213556183-d50957ba.webp",an="/java-tips/assets/image-20220706213728255-ecffebbf.webp",sn="/java-tips/assets/image-20220706213736248-e806d77f.webp",en="/java-tips/assets/image-20220706231641283-87918b77.webp",on="/java-tips/assets/image-20220706220605710-9176e408.webp",tn="/java-tips/assets/image-20220711215228405-f5de2499.webp",pn="/java-tips/assets/image-20220711215325716-1b10c31d.webp",cn="/java-tips/assets/image-20220711215339796-894a5b5a.webp",ln="/java-tips/assets/image-20220711215345905-ac17ff8d.webp",dn="/java-tips/assets/image-20220711215410118-12e6af92.webp",rn="/java-tips/assets/image-20220801004733873-47cd342d.webp",gn="/java-tips/assets/image-20220801004755753-55773cff.webp",un="/java-tips/assets/image-20220801004842095-7945a7d8.webp",mn="/java-tips/assets/image-20220801004923275-c16a74f7.webp",kn="/java-tips/assets/image-20220801004942686-1f52b65b.webp",bn="/java-tips/assets/image-20220617163230641-f153c134.webp",hn="/java-tips/assets/image-20220617163247933-65545f8c.webp",vn="/java-tips/assets/image-20220617163123694-a4eed476.webp",fn={},_n=o('<h2 id="🐬-mysql" tabindex="-1"><a class="header-anchor" href="#🐬-mysql" aria-hidden="true">#</a> 🐬 MYSQL</h2><h3 id="mysql-基础架构-一条-sql-查询语句是如何执行的" tabindex="-1"><a class="header-anchor" href="#mysql-基础架构-一条-sql-查询语句是如何执行的" aria-hidden="true">#</a> MySql 基础架构 | 一条 SQL 查询语句是如何执行的</h3><figure><img src="'+d+'" alt="image-20220613104147805" tabindex="0" loading="lazy"><figcaption>image-20220613104147805</figcaption></figure><ul><li><strong>连接器：</strong> 身份认证和权限相关(登录 MySQL 的时候)。</li><li><strong>查询缓存：</strong> 执行查询语句的时候，会先查询缓存（MySQL 8.0 版本后移除，因为这个功能不太实用）。</li><li><strong>分析器：</strong> 没有命中缓存的话，SQL 语句就会经过分析器，分析器说白了就是要先看你的 SQL 语句要干嘛，再检查你的 SQL 语句语法是否正确。</li><li><strong>优化器：</strong> 按照 MySQL 认为最优的方案去执行。</li><li><strong>执行器：</strong> 执行语句，然后从存储引擎返回数据。 执行语句之前会先判断是否有权限，如果没有权限的话，就会报错。</li><li><strong>插件式存储引擎</strong> ： 主要负责数据的存储和读取，采用的是插件式架构，支持 InnoDB、MyISAM、Memory 等多种存储引擎。</li></ul><h3 id="⭐myisam-和-innodb-的区别是什么" tabindex="-1"><a class="header-anchor" href="#⭐myisam-和-innodb-的区别是什么" aria-hidden="true">#</a> ⭐MyISAM 和 InnoDB 的区别是什么？</h3><p>除了6，都是InnoDB支持，前者不支持</p><p><strong>1.是否支持行级锁</strong></p><p><strong>2.是否支持事务</strong></p><p><strong>3.是否支持外键</strong></p><p><strong>4.是否支持数据库异常崩溃后的安全恢复</strong></p><blockquote><p>MyISAM 不支持，而 InnoDB 支持。</p><p>使用 InnoDB 的数据库在异常崩溃后，数据库重新启动的时候会保证数据库恢复到崩溃前的状态。这个恢复的过程依赖于 <code>redo log</code> 。</p></blockquote><p><strong>5.是否支持 MVCC</strong></p><p><strong>6.索引实现不一样。</strong></p><blockquote><p>虽然 MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是两者的实现方式不太一样。</p><p>InnoDB 引擎中，其数据文件本身就是索引文件。相比 MyISAM，索引文件和数据文件是分离的，其表数据文件本身就是按 B+Tree 组织的一个索引结构，树的叶节点 data 域保存了完整的数据记录。</p></blockquote><h3 id="什么是回表" tabindex="-1"><a class="header-anchor" href="#什么是回表" aria-hidden="true">#</a> 什么是回表？</h3><p>先检二级索引中的 B+Tree 的索引值（商品编码，product_no），找到对应的叶子节点，然后获取主键值，然后再通过主键索引中的 B+Tree 树查询到对应的叶子节点，然后获取整行数据。<strong>这个过程叫「回表」，也就是说要查两个 B+Tree 才能查到数据</strong>。</p><figure><img src="'+i+'" alt="image-20220712154711271" tabindex="0" loading="lazy"><figcaption>image-20220712154711271</figcaption></figure><h3 id="🪐数据库的索引分类" tabindex="-1"><a class="header-anchor" href="#🪐数据库的索引分类" aria-hidden="true">#</a> 🪐数据库的索引分类</h3><ul><li>按「数据结构」分类：<strong>B+tree索引、Hash索引、Full-text索引</strong>。</li><li>按「物理存储」分类：<strong>聚簇索引（主键索引）、二级索引（辅助索引）</strong>。</li><li>按「字段特性」分类：<strong>主键索引、唯一索引、普通索引、前缀索引</strong>。</li><li>按「字段个数」分类：<strong>单列索引、联合索引</strong>。</li></ul><p>另一种分类：</p><ol><li><strong>B-Tree索引（B+ 树索引）</strong>：是MySQL中最常用的索引类型，用于InnoDB、MyISAM、NDB等存储引擎。在B-Tree索引中，索引项按照键值的大小进行排序，每一个索引页中的索引项是有序的。</li><li><strong>哈希索引</strong>：哈希索引基于哈希表，适用于等值查询的场景，MySQL的Memory引擎提供了可选的哈希索引。</li><li><strong>空间数据索引</strong>：这是MyISAM的特殊索引类型，主要用于地理空间数据的查询，比如查找附近的点等等。</li><li><strong>全文索引</strong>：这也是MyISAM的特殊索引，主要用于文本数据的全文搜索。InnoDB从MySQL 5.6版本开始也支持全文索引。</li><li><strong>复合索引</strong>：复合索引是由两个或更多的列构成一个索引，主要用于复合查询，其效果远超多个单列索引。</li><li><strong>唯一索引</strong>：唯一索引是不允许其中任何两行具有相同索引值的索引。</li><li><strong>主键索引</strong>：主键索引是一种特殊的唯一索引，不允许有空值。每个表可以有一个主键。</li></ol><h4 id="按数据结构分类" tabindex="-1"><a class="header-anchor" href="#按数据结构分类" aria-hidden="true">#</a> 按数据结构分类</h4><p>从数据结构的角度来看，MySQL 常见索引有 B+Tree 索引、HASH 索引、Full-Text 索引。</p><p>每一种存储引擎支持的索引类型不一定相同，我在表中总结了 MySQL 常见的存储引擎 InnoDB、MyISAM 和 Memory 分别支持的索引类型。</p><figure><img src="'+r+'" alt="image-20220712154456833" tabindex="0" loading="lazy"><figcaption>image-20220712154456833</figcaption></figure><p>InnoDB 是在 MySQL 5.5 之后成为默认的 MySQL 存储引擎，B+Tree 索引类型也是 MySQL 存储引擎采用最多的索引类型。</p><p>在创建表时，InnoDB 存储引擎会根据不同的场景选择不同的列作为索引：</p><ul><li>如果有主键，默认会使用主键作为聚簇索引的索引键（key）；</li><li>如果没有主键，就选择第一个不包含 NULL 值的唯一列作为聚簇索引的索引键（key）；</li><li>在上面两个都没有的情况下，InnoDB 将自动生成一个隐式自增 id 列作为聚簇索引的索引键（key）；</li></ul><p>其它索引都属于辅助索引（Secondary Index），也被称为二级索引或非聚簇索引。<strong>创建的主键索引和二级索引默认使用的是 B+Tree 索引</strong>。</p><p>举个🌰，有这样一个表</p><figure><img src="'+g+'" alt="image-20220712154548420" tabindex="0" loading="lazy"><figcaption>image-20220712154548420</figcaption></figure><p>这些行数据，存储在 B+Tree 索引时是长什么样子的？</p><p>B+Tree 是一种多叉树，叶子节点才存放数据，非叶子节点只存放索引，而且每个节点里的数据是<strong>按主键顺序存放</strong>的。每一层父节点的索引值都会出现在下层子节点的索引值中，因此在叶子节点中，包括了所有的索引值信息，并且每一个叶子节点都指向下一个叶子节点，形成一个链表。</p><p>主键索引的 B+Tree 如图所示：</p><figure><img src="'+u+'" alt="image-20220712154624540" tabindex="0" loading="lazy"><figcaption>image-20220712154624540</figcaption></figure><h5 id="通过主键查询商品数据的过程" tabindex="-1"><a class="header-anchor" href="#通过主键查询商品数据的过程" aria-hidden="true">#</a> 通过主键查询商品数据的过程</h5><p>比如，我们执行了下面这条查询语句，这条语句使用了主键索引查询 id 号为 5 的商品。查询过程是这样的，B+Tree 会自顶向下逐层进行查找：</p><ul><li>将 5 与根节点的索引数据 (1，10，20) 比较，5 在 1 和 10 之间，所以根据 B+Tree的搜索逻辑，找到第二层的索引数据 (1，4，7)；</li><li>在第二层的索引数据 (1，4，7)中进行查找，因为 5 在 4 和 7 之间，所以找到第三层的索引数据（4，5，6）；</li><li>在叶子节点的索引数据（4，5，6）中进行查找，然后我们找到了索引值为 5 的行数据。</li></ul><p>数据库的索引和数据都是存储在硬盘的，我们可以把读取一个节点当作一次磁盘 I/O 操作。那么上面的整个查询过程一共经历了 3 个节点，也就是进行了 3 次 I/O 操作。</p><p>B+Tree 存储千万级的数据只需要 3-4 层高度就可以满足，这意味着从千万级的表查询目标数据最多需要 3-4 次磁盘 I/O，所以<strong>B+Tree 相比于 B 树和二叉树来说，最大的优势在于查询效率很高，因为即使在数据量很大的情况，查询一个数据的磁盘 I/O 依然维持在 3-4次。</strong></p><h5 id="通过二级索引查询商品数据的过程" tabindex="-1"><a class="header-anchor" href="#通过二级索引查询商品数据的过程" aria-hidden="true">#</a> 通过二级索引查询商品数据的过程</h5><p>主键索引的 B+Tree 和二级索引的 B+Tree 区别如下：</p><ul><li>主键索引的 B+Tree 的叶子节点存放的是实际数据，所有完整的用户记录都存放在主键索引的 B+Tree 的叶子节点里；</li><li>二级索引的 B+Tree 的叶子节点存放的是主键值，而不是实际数据。</li></ul><p>我这里将前面的商品表中的 product_no （商品编码）字段设置为二级索引，那么二级索引的 B+Tree 如下图，其中非叶子的 key 值是 product_no（图中橙色部分），叶子节点存储的数据是主键值（图中绿色部分）。</p><figure><img src="'+m+`" alt="image-20220712154658288" tabindex="0" loading="lazy"><figcaption>image-20220712154658288</figcaption></figure><p>如果我用 product_no 二级索引查询商品，如下查询语句：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> product_no <span class="token operator">=</span> <span class="token string">&#39;0002&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>会先检二级索引中的 B+Tree 的索引值（商品编码，product_no），找到对应的叶子节点，然后获取主键值，然后再通过主键索引中的 B+Tree 树查询到对应的叶子节点，然后获取整行数据。<strong>这个过程叫「回表」，也就是说要查两个 B+Tree 才能查到数据</strong>。如下图：</p><figure><img src="`+i+`" alt="image-20220712154711271" tabindex="0" loading="lazy"><figcaption>image-20220712154711271</figcaption></figure><p>不过，当查询的数据是能在二级索引的 B+Tree 的叶子节点里查询到，这时就不用再查主键索引查，比如下面这条查询语句：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> id <span class="token keyword">from</span> product <span class="token keyword">where</span> product_no <span class="token operator">=</span> <span class="token string">&#39;0002&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>这种在二级索引的 B+Tree 就能查询到结果的过程就叫作「覆盖索引」，也就是只需要查一个 B+Tree 就能找到数据</strong>。</p><h4 id="按物理存储分类" tabindex="-1"><a class="header-anchor" href="#按物理存储分类" aria-hidden="true">#</a> 按物理存储分类</h4><p>从物理存储的角度来看，索引分为聚簇索引（主键索引）、二级索引（辅助索引）。</p><p>这两个区别在前面也提到了：</p><ul><li>主键索引的 B+Tree 的叶子节点存放的是实际数据，所有完整的用户记录都存放在主键索引的 B+Tree 的叶子节点里；</li><li>二级索引的 B+Tree 的叶子节点存放的是主键值，而不是实际数据。</li></ul><h4 id="按字段特性分类" tabindex="-1"><a class="header-anchor" href="#按字段特性分类" aria-hidden="true">#</a> 按字段特性分类</h4><p>从字段特性的角度来看，索引分为主键索引、唯一索引、普通索引、前缀索引。</p><ul><li><strong>主键索引</strong>就是建立在主键字段上的索引，通常在创建表的时候一起创建，一张表最多只有一个主键索引，索引列的值不允许有空值。</li><li><strong>唯一索引</strong>建立在 UNIQUE 字段上的索引，一张表可以有多个唯一索引，索引列的值必须唯一，但是允许有空值。</li><li><strong>普通索引</strong>就是建立在普通字段上的索引，既不要求字段为主键，也不要求字段为 UNIQUE。</li><li><strong>前缀索引</strong>是指对字符类型字段的前几个字符建立的索引，而不是在整个字段上建立的索引，前缀索引可以建立在字段类型为 char、 varchar、binary、varbinary 的列上。 <ul><li>使用前缀索引的目的是为了减少索引占用的存储空间，提升查询效率。</li></ul></li></ul><h4 id="按字段个数分类" tabindex="-1"><a class="header-anchor" href="#按字段个数分类" aria-hidden="true">#</a> 按字段个数分类</h4><p>从字段个数的角度来看，索引分为单列索引、联合索引（复合索引）。</p><ul><li>建立在单列上的索引称为单列索引，比如主键索引；</li><li>建立在多列上的索引称为联合索引；</li></ul><h5 id="联合索引" tabindex="-1"><a class="header-anchor" href="#联合索引" aria-hidden="true">#</a> 联合索引</h5><p>通过将多个字段组合成一个索引，该索引就被称为联合索引。比如将商品表中的 product_no 和 name 字段组合成联合索引 <code>(product_no, name)</code>，创建联合索引的方式如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> index_product_no_name <span class="token keyword">ON</span> product<span class="token punctuation">(</span>product_no<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>联合索引 <code>(product_no, name)</code> 的 B+Tree 示意图如下：</p><figure><img src="`+k+'" alt="image-20220712155601299" tabindex="0" loading="lazy"><figcaption>image-20220712155601299</figcaption></figure><h3 id="⭐️聚簇索引和非聚簇索引" tabindex="-1"><a class="header-anchor" href="#⭐️聚簇索引和非聚簇索引" aria-hidden="true">#</a> ⭐️聚簇索引和非聚簇索引</h3><blockquote><p>简洁回答</p></blockquote><ul><li>一个表中只能拥有一个聚集索引，而非聚集索引一个表可以存在多个。</li><li>索引是通过二叉树的数据结构来描述的，我们可以这么理解聚簇索引：索引的叶节点就是数据节点。而非聚簇索引的叶节点仍然是索引节点，只不过有一个指针指向对应的数据块。</li><li>聚集索引：物理存储按照索引排序；非聚集索引：物理存储不按照索引排序</li></ul><blockquote><p>详细</p></blockquote><p>另外，索引又可以分成聚簇索引和非聚簇索引（二级索引），它们区别就在于叶子节点存放的是什么数据：</p><ul><li>聚簇索引的叶子节点存放的是实际数据，所有完整的用户记录都存放在聚簇索引的叶子节点；</li><li>二级索引的叶子节点存放的是主键值，而不是实际数据。</li></ul><p>因为表的数据都是存放在聚簇索引的叶子节点里，所以 InnoDB 存储引擎一定会为表创建一个聚簇索引，且由于数据在物理上只会保存一份，所以聚簇索引只能有一个。</p><p>InnoDB 在创建聚簇索引时，会根据不同的场景选择不同的列作为索引：</p><ul><li>如果有主键，默认会使用主键作为聚簇索引的索引键；</li><li>如果没有主键，就选择第一个不包含 NULL 值的唯一列作为聚簇索引的索引键；</li><li>在上面两个都没有的情况下，InnoDB 将自动生成一个隐式自增 id 列作为聚簇索引的索引键；</li></ul><p>一张表只能有一个聚簇索引，那为了实现非主键字段的快速搜索，就引出了二级索引（非聚簇索引/辅助索引），它也是利用了 B+ 树的数据结构，但是二级索引的叶子节点存放的是主键值，不是实际数据。</p><p>二级索引的 B+ 树如下图，数据部分为主键值：</p><figure><img src="'+b+`" alt="image-20220718134133927" tabindex="0" loading="lazy"><figcaption>image-20220718134133927</figcaption></figure><p>因此，<strong>如果某个查询语句使用了二级索引，但是查询的数据不是主键值，这时在二级索引找到主键值后，需要去聚簇索引中获得数据行，这个过程就叫作「回表」，也就是说要查两个 B+ 树才能查到数据。不过，当查询的数据是主键值时，因为只在二级索引就能查询到，不用再去聚簇索引查，这个过程就叫作「索引覆盖」，也就是只需要查一个 B+ 树就能找到数据。</strong></p><h3 id="数据库事务" tabindex="-1"><a class="header-anchor" href="#数据库事务" aria-hidden="true">#</a> 数据库事务？</h3><p>简单来说，数据库事务可以保证多个对数据库的操作（也就是 SQL 语句）构成一个逻辑上的整体。构成这个逻辑上的整体的这些数据库操作遵循：<strong>要么全部执行成功,要么全部不执行</strong> 。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 开启一个事务</span>
<span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span>
<span class="token comment"># 多条 SQL 语句</span>
SQL1<span class="token punctuation">,</span>SQL2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment">## 提交事务</span>
<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+h+'" alt="image-20220613143832546" tabindex="0" loading="lazy"><figcaption>image-20220613143832546</figcaption></figure><p>另外，关系型数据库（例如：<code>MySQL</code>、<code>SQL Server</code>、<code>Oracle</code> 等）事务都有 <strong>ACID</strong> 特性：</p><figure><img src="'+v+'" alt="image-20220613143851071" tabindex="0" loading="lazy"><figcaption>image-20220613143851071</figcaption></figure><ol><li><strong>原子性</strong>（<code>Atomicity</code>） ： 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；</li><li><strong>一致性</strong>（<code>Consistency</code>）： 执行事务前后，数据保持一致，例如转账业务中，无论事务是否成功，转账者和收款人的总额应该是不变的；</li><li><strong>隔离性</strong>（<code>Isolation</code>）： 并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；</li><li><strong>持久性</strong>（<code>Durabilily</code>）： 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</li></ol><p>🌈 这里要额外补充一点：<strong>只有保证了事务的持久性、原子性、隔离性之后，一致性才能得到保障。也就是说 A、I、D 是手段，C 是目的！</strong> 想必大家也和我一样，被 ACID 这个概念被误导了很久!</p><figure><img src="'+f+'" alt="image-20220613144017540" tabindex="0" loading="lazy"><figcaption>image-20220613144017540</figcaption></figure>',89),yn={href:"https://book.douban.com/subject/30329536/",target:"_blank",rel:"noopener noreferrer"},wn=o('<p>的作者在他的这本书中如是说：</p><blockquote><p>Atomicity, isolation, and durability are properties of the database, whereas consis‐ tency (in the ACID sense) is a property of the application. The application may rely on the database’s atomicity and isolation properties in order to achieve consistency, but it’s not up to the database alone.</p><p>翻译过来的意思是：原子性，隔离性和持久性是数据库的属性，而一致性（在 ACID 意义上）是应用程序的属性。应用可能依赖数据库的原子性和隔离属性来实现一致性，但这并不仅取决于数据库。因此，字母 C 不属于 ACID 。</p></blockquote><h3 id="并发事务带来了哪些问题" tabindex="-1"><a class="header-anchor" href="#并发事务带来了哪些问题" aria-hidden="true">#</a> 并发事务带来了哪些问题</h3><blockquote><p>部分图选自《MySQL是怎样运行的》</p></blockquote><p>在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对同一数据进行操作）。并发虽然是必须的，但可能会导致以下的问题。</p><ul><li><strong>脏读（Dirty read）:</strong> 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。</li></ul><figure><img src="'+_+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="'+y+'" alt="image-20220706223058381" tabindex="0" loading="lazy"><figcaption>image-20220706223058381</figcaption></figure><ul><li><strong>丢失修改（Lost to modify）/ 脏写:</strong> 指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务 1 读取某表中的数据 A=20，事务 2 也读取 A=20，事务 1 修改 A=A-1，事务 2 也修改 A=A-1，最终结果 A=19，事务 1 的修改被丢失。</li></ul><figure><img src="'+w+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="'+B+'" alt="image-20220706223114814" tabindex="0" loading="lazy"><figcaption>image-20220706223114814</figcaption></figure><ul><li><strong>不可重复读（Unrepeatable read）:</strong> 指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。</li></ul><figure><img src="'+x+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="'+E+'" alt="image-20220706222414240" tabindex="0" loading="lazy"><figcaption>image-20220706222414240</figcaption></figure><ul><li><strong>幻读（Phantom read）:</strong> 幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</li></ul><figure><img src="'+L+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="'+D+`" alt="image-20220706222426455" tabindex="0" loading="lazy"><figcaption>image-20220706222426455</figcaption></figure><p><strong>不可重复读和幻读区别</strong> ：<code>&lt;u&gt;</code>不可重复读的重点是修改<code>&lt;/u&gt;</code>比如多次读取一条记录发现其中某些列的值被修改，<code>&lt;u&gt;</code>幻读的重点在于新增或者删除<code>&lt;/u&gt;</code>比如多次查询同一条查询语句（DQL）时，记录发现记录增多或减少了。</p><blockquote><p>混淆理解：脏读和脏写有什么区别？ 脏读（Dirty Read）和脏写（Dirty Write）是两个并发事务的问题，它们的区别在于操作的对象和后果。 脏读是指一个事务读取了另一个事务未提交的数据。例如，事务A读取了事务B修改但未提交的数据，然后事务B回滚了操作，这导致事务A读取到的数据是无效的或不一致的。 脏写则发生在两个事务尝试同时修改相同数据的情况下。例如，事务A和事务B同时修改相同的数据，但是事务B先提交操作，这样事务A的修改将被覆盖，意味着事务A的操作是无效的。</p></blockquote><blockquote><p>加深理解：</p><ol><li>脏读（Dirty Read）：一个事务读取到了另一个未提交的事务的数据。这意味着，在并发事务中，一个事务可以读取其他事务尚未提交的数据，这些数据可能会在提交之前被回滚，因此读取的数据可能是无效的或不一致的。</li><li>脏写（Dirty Write）：一个事务读取到了另一个修改了数据但是未提交的数据。这经常发生在两个事务试图同时修改相同的数据时。当一个事务尝试写入一个被另一个事务修改但未提交的数据时，就会发生脏写。</li><li>不可重复读（Non-repeatable Read）：一个事务读取数据的同时另一个事务对事务进行了修改导致第一个事务读到的数据不是第一次读到的数据导致没法进行回滚。不可重复读是指在串行事务的隔离级别下是不会发生的现象，但在并行事务的情况下会出现。</li><li>幻读（Phantom Read）：一个事务在读取数据的同时另一个事务对数据进行插入导致第一个事务读取到的数据和第一次看到的还多出很多数据。幻读是在修改数据时，一个事务读取了数据的一部分，然后另一个事务插入了新的数据，并且在提交之后，第一个事务再次读取时发现了新的数据。</li></ol></blockquote><h3 id="⭐有哪些事务隔离级别-mysql-的默认隔离级别是什么" tabindex="-1"><a class="header-anchor" href="#⭐有哪些事务隔离级别-mysql-的默认隔离级别是什么" aria-hidden="true">#</a> ⭐有哪些事务隔离级别，MySQL 的默认隔离级别是什么?</h3><p>MySQL 的隔离级别基于锁和 MVCC 机制共同实现的。</p><ul><li><strong>READ-UNCOMMITTED(读取未提交)</strong> ： 最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。</li><li><strong>READ-COMMITTED(读取已提交)</strong> ： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。</li><li><strong>REPEATABLE-READ(可重复读)</strong> ： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。</li><li><strong>SERIALIZABLE(可串行化)</strong> ： 最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。</li></ul><hr><table><thead><tr><th style="text-align:center;">隔离级别</th><th style="text-align:center;">脏读</th><th style="text-align:center;">不可重复读</th><th style="text-align:center;">幻读</th></tr></thead><tbody><tr><td style="text-align:center;">READ-UNCOMMITTED</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td></tr><tr><td style="text-align:center;">READ-COMMITTED</td><td style="text-align:center;">×</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td></tr><tr><td style="text-align:center;">REPEATABLE-READ</td><td style="text-align:center;">×</td><td style="text-align:center;">×</td><td style="text-align:center;">√</td></tr><tr><td style="text-align:center;">SERIALIZABLE</td><td style="text-align:center;">×</td><td style="text-align:center;">×</td><td style="text-align:center;">×</td></tr></tbody></table><h3 id="表级锁和行级锁了解吗-有什么区别" tabindex="-1"><a class="header-anchor" href="#表级锁和行级锁了解吗-有什么区别" aria-hidden="true">#</a> 表级锁和行级锁了解吗？有什么区别？</h3><p>MyISAM 仅仅支持表级锁(table-level locking)，一锁就锁整张表，这在并发写的情况下性非常差。</p><p>InnoDB 不光支持表级锁(table-level locking)，还支持行级锁(row-level locking)，默认为行级锁。行级锁的粒度更小，仅对相关的记录上锁即可（对一行或者多行记录加锁），所以对于并发写入操作来说， InnoDB 的性能更高。</p><p><strong>表级锁和行级锁对比</strong> ：</p><ul><li><strong>表级锁：</strong> MySQL 中锁定粒度最大的一种锁，是针<strong>对非索引字段加的锁</strong>，对当前操作的整张表加锁，实现简单，资源消耗也比较少，加锁快，不会出现死锁。其锁定粒度最大，触发锁冲突的概率最高，并发度最低，MyISAM 和 InnoDB 引擎都支持表级锁。</li><li><strong>行级锁：</strong> MySQL 中锁定粒度最小的一种锁，是针<strong>对索引字段加的锁</strong>，只针对当前操作的记录进行加锁。 行级锁能大大减少数据库操作的冲突。其加锁粒度最小，并发度高，但加锁的开销也最大，加锁慢，会出现死锁。</li></ul><h3 id="共享锁和排他锁" tabindex="-1"><a class="header-anchor" href="#共享锁和排他锁" aria-hidden="true">#</a> 共享锁和排他锁</h3><p>不论是表级锁还是行级锁，都存在共享锁（Share Lock，S 锁）和排他锁（Exclusive Lock，X 锁）这两类：</p><ul><li><strong>共享锁（S 锁）</strong> ：又称读锁，事务在读取记录的时候获取共享锁，允许多个事务同时获取（锁兼容）。</li><li><strong>排他锁（X 锁）</strong> ：又称写锁/独占锁，事务在修改记录的时候获取排他锁，不允许多个事务同时获取。如果一个记录已经被加了排他锁，那其他事务不能再对这条事务加任何类型的锁（锁不兼容）。</li></ul><p>排他锁与任何的锁都不兼容，共享锁仅和共享锁兼容。</p><table><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">S 锁</th><th style="text-align:left;">X 锁</th></tr></thead><tbody><tr><td style="text-align:left;">S 锁</td><td style="text-align:left;">不冲突</td><td style="text-align:left;">冲突</td></tr><tr><td style="text-align:left;">X 锁</td><td style="text-align:left;">冲突</td><td style="text-align:left;">冲突</td></tr></tbody></table><p>由于 MVCC 的存在，对于一般的 <code>SELECT</code> 语句，InnoDB 不会加任何锁。不过， 你可以通过以下语句显式加共享锁或排他锁。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 共享锁</span>
<span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">LOCK</span> <span class="token operator">IN</span> <span class="token keyword">SHARE</span> <span class="token keyword">MODE</span><span class="token punctuation">;</span>
<span class="token comment"># 排他锁</span>
<span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FOR</span> <span class="token keyword">UPDATE</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据库索引失效有哪些" tabindex="-1"><a class="header-anchor" href="#数据库索引失效有哪些" aria-hidden="true">#</a> 数据库索引失效有哪些</h3>`,38),Bn={href:"https://xiaolincoding.com/mysql/index/index_lose.html",target:"_blank",rel:"noopener noreferrer"},xn=o(`<p>MySQL数据库中的索引主要用于提高查询效率，但在某些情况下，索引可能失效，不能正常工作。以下是一些常见的索引失效的情况：</p><ul><li><strong>使用!=或&lt;&gt;运算符</strong>: 当我们在查询中使用不等于的条件时，MySQL无法有效地使用索引。</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> age <span class="token operator">!=</span> <span class="token number">30</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这个例子中，即使age字段有索引，也无法有效使用，因为MySQL无法预测哪些行将满足这个条件。</p><ul><li><strong>对字段进行函数操作</strong>: 如果你对一个索引字段进行函数操作，那么索引也不会被使用。例如，使用YEAR(date)，LOWER(name)等函数操作字段。</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> LOWER<span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">&#39;john&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这个例子中，username字段上的索引不会被使用，因为查询是对函数操作的结果进行比较。</p><ul><li><strong>使用OR关键字</strong>: 如果你在WHERE子句中使用OR，那么MySQL只会在OR条件两边的字段都进行了索引的情况下才使用索引。</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">123</span> <span class="token operator">OR</span> username <span class="token operator">=</span> <span class="token string">&#39;john&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这个例子中，即使id和username都有索引，但只有当它们都被索引时，索引才会被使用。</p><ul><li><strong>索引列的顺序</strong>: 如果你在多列上创建了复合索引，那么你在查询时必须按照创建索引时列的顺序来查询，否则索引可能不会被使用。</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_name_age <span class="token keyword">ON</span> users<span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，虽然在name和age上创建了复合索引，但是查询没有按照索引列的顺序，因此索引不会被使用。</p><ul><li><strong>采用范围查询</strong>：在复合索引中，如果在查询中对第一列用了范围查询（&gt;, &lt;, between, like），那么后面的列索引都会失效。</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_name_age <span class="token keyword">ON</span> users<span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> name <span class="token operator">like</span> <span class="token string">&#39;J%&#39;</span> <span class="token operator">AND</span> age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，尽管我们创建了复合索引，但由于在复合索引的第一列上使用了范围查询，age上的索引将不会被使用。</p><ul><li><strong>LIKE操作以通配符开始</strong>: 如果你在LIKE操作中以%开始，那么索引将不会被使用。</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">&#39;%john&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>数据类型不一致</strong>: 如果在查询中，字段的数据类型和索引的数据类型不一致，那么索引不会被使用。例如，如果一个列是数字类型，但你以字符串形式在WHERE子句中引用它，索引将无法使用。</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> age <span class="token operator">=</span> <span class="token string">&#39;30&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这个例子中，尽管age字段有索引，但因为在查询中将数字类型的age和字符串进行比较，所以索引将无法使用。</p><ul><li><strong>使用NULL</strong>: 在MySQL中，对NULL的比较是特殊的，如果列中包含NULL值，那么即使有索引，也可能不会被使用。</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> age <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="数据库sql优化有哪些方法" tabindex="-1"><a class="header-anchor" href="#数据库sql优化有哪些方法" aria-hidden="true">#</a> 数据库sql优化有哪些方法</h3><blockquote><p>规范</p></blockquote>`,25),En={href:"https://javaguide.cn/database/mysql/mysql-high-performance-optimization-specification-recommendations.html#%E6%95%B0%E6%8D%AE%E5%BA%93%E5%91%BD%E4%BB%A4%E8%A7%84%E8%8C%83",target:"_blank",rel:"noopener noreferrer"},Ln=o("<ol><li>尽量避免使用子查询</li><li>用IN来替换OR</li><li>读取适当的记录LIMIT M,N，而不要读多余的记录</li><li>禁止不必要的Order By排序</li><li>总和查询可以禁止排重用union all</li><li>避免随机取记录</li><li>将多次插入换成批量Insert插入</li><li>只返回必要的列，用具体的字段列表代替 select * 语句</li><li>区分in和exists</li><li>优化Group By语句</li><li>尽量使用数字型字段</li><li>优化Join语句</li></ol><blockquote><p>步骤</p></blockquote>",2),Dn={href:"https://www.pdai.tech/md/db/sql-lan/sql-lan-optimize.html#sql%E8%AF%AD%E8%A8%80---sql%E8%AF%AD%E5%8F%A5%E4%BC%98%E5%8C%96",target:"_blank",rel:"noopener noreferrer"},Mn=n("h3",{id:"innodb-有哪几类行锁",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#innodb-有哪几类行锁","aria-hidden":"true"},"#"),a(" InnoDB 有哪几类行锁")],-1),In=n("p",null,"MySQL InnoDB 支持三种行锁定方式：",-1),Sn=n("ul",null,[n("li",null,[n("strong",null,"记录锁（Record Lock）"),a(" ：也被称为记录锁，属于单个行记录上的锁。记录锁锁定单个数据行。当一个事务试图修改或删除某行数据时，它会对该行数据加上记录锁，以防止其他事务同时修改或删除该行。")]),n("li",null,[n("strong",null,"间隙锁（Gap Lock）"),a(" ：锁定一个范围，不包括记录本身。间隙锁锁定记录之间的间隙。它可以确保在锁定范围内不会插入新的数据行，从而有效地解决幻读问题。")]),n("li",null,[n("strong",null,"临键锁（Next-key Lock）"),a(" ：Record Lock+Gap Lock（ps. 意思是它结合了Record Lock（记录锁）和Gap Lock（间隙锁）），锁定一个范围，包含记录本身。记录锁只能锁住已经存在的记录，为了避免插入新记录，需要依赖间隙锁。")])],-1),Tn={href:"https://www.percona.com/blog/innodbs-gap-locks/%EF%BC%89",target:"_blank",rel:"noopener noreferrer"},Rn=n("strong",null,'"间隙锁"（Gap Locks）',-1),Cn=n("ol",null,[n("li",null,"Next-key Locks: 这是 InnoDB 默认的锁定方式，它锁定一个索引记录以及它之前的 gap。这种方式可以解决幻读的问题，但可能会对并发性能产生影响。"),n("li",null,[a("True Gap Locks: 这种锁定方式只锁定 gap，不包括索引记录本身。 "),n("mark",null,"需要注意的是"),a("，对于 READ COMMITTED 和 READ UNCOMMITTED 的隔离级别，InnoDB 不会使用 gap locks 来防止幻读。另外，如果一个表中定义了多个唯一索引，即使其中一个唯一索引已经加了锁，其他事务仍然可以通过其他唯一索引在锁定范围内插入新的记录，这可能会导致出现幻读的情况，因此在设计表结构和编写 SQL 查询时，需要特别注意这一点。")])],-1),qn={href:"https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html%EF%BC%89",target:"_blank",rel:"noopener noreferrer"},An=n("strong",null,"记录锁（Record Locks）",-1),Qn={href:"https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html%EF%BC%89",target:"_blank",rel:"noopener noreferrer"},On=n("strong",null,"临键锁（Next-key Locks）",-1),jn=o(`<p>InnoDB 的默认隔离级别 REPEATABLE-READ（可重读）是可以解决幻读问题发生的，主要有下面两种情况：</p><ul><li><strong>快照读</strong> ：由 MVCC 机制来保证不出现幻读。它在事务开始时创建一个数据快照。在事务期间的所有普通SELECT操作都将基于这个快照进行，这意味着在同一个事务中，多次读取相同的数据会得到相同的结果，即使在此期间其他事务对数据进行了修改。快照读不会对数据加锁，因此可以实现非阻塞读操作，提高并发性能。</li><li><strong>当前读</strong> ： 使用 Next-Key Lock 进行加锁来保证不出现幻读。当前读是针对需要修改数据的操作（如SELECT ... FOR UPDATE、UPDATE、DELETE等）进行的一种读取方式。与快照读不同，当前读会读取最新版本的数据，并对所读取的数据加锁，以确保在当前事务完成之前其他事务无法修改这些数据。这种加锁方式有助于解决幻读问题，并确保修改操作的正确性和隔离性。</li></ul><p>在REPEATABLE READ（可重读）隔离级别下，快照读和当前读的引入分别满足了不同场景的需求：快照读适用于不需要修改数据的查询操作，能保证事务期间看到的数据一致性；当前读适用于需要修改数据的操作，可以解决幻读问题并确保数据的正确性和隔离性。</p><h3 id="为什么mysql-没有使用hash表作为索引的数据结构呢" tabindex="-1"><a class="header-anchor" href="#为什么mysql-没有使用hash表作为索引的数据结构呢" aria-hidden="true">#</a> 为什么MySQL 没有使用Hash表作为索引的数据结构呢？</h3><p><strong>1.Hash 冲突问题</strong> ：JDK1.8 之前 <code>HashMap</code> 就是通过链地址法来解决哈希冲突的。不过，JDK1.8 以后 <code>HashMap</code>为了减少链表过长的时候搜索时间过长引入了红黑树，不过对于数据库来说这还不算最大的缺点。</p><p><strong>2.Hash 索引不支持顺序和范围查询(Hash 索引不支持顺序和范围查询是它最大的缺点：</strong> 假如我们要对表中的数据进行排序或者进行范围查询，那 Hash 索引可就不行了。</p><p>试想一种情况:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> tb1 <span class="token constant">WHERE</span> id <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这种范围查询中，优势非常大，直接遍历比 500 小的叶子节点就够了。而 Hash 索引是根据 hash 算法来定位的，难不成还要把 1 - 499 的数据，每个都进行一次 hash 计算来定位吗?这就是 Hash 最大的缺点了。</p><h3 id="⭐️为什么mysql底层要用b-树-和b树有什么区别" tabindex="-1"><a class="header-anchor" href="#⭐️为什么mysql底层要用b-树-和b树有什么区别" aria-hidden="true">#</a> ⭐️为什么MySQL底层要用B+树？和B树有什么区别？</h3>`,10),zn={href:"https://zhuanlan.zhihu.com/p/54102723",target:"_blank",rel:"noopener noreferrer"},Nn=o('<p>B 树也称 B-树,全称为 <strong>多路平衡查找树</strong> ，B+ 树是 B 树的一种变体。B 树和 B+树中的 B 是 <code>Balanced</code> （平衡）的意思。</p><p>目前大部分数据库系统及文件系统都采用 B-Tree 或其变种 B+Tree 作为索引结构。</p><p><strong>MySQL数据库底层选择使用B+树，而不是B树，主要有以下几个原因</strong>：</p><ul><li><strong>范围查询的优化</strong>：B+树的所有关键字数据都出现在叶子节点，所有数据记录都链在一起，因此对整个区间的数据能够进行快速地遍历，适合文件索引和数据库索引。而在B树中，数据分布在整个树中，如果进行范围查询，可能需要遍历整个树，效率较低。</li><li><strong>查询效率的稳定性</strong>：B+树的内部节点并不包含数据信息，只包含子节点的指针，这意呈现每个内部节点所能保存的子节点指针数量更多，树的高度较低，查询的效率更加稳定。而B树因为非叶子节点也可能包含数据，所以每个节点能保存的子节点指针数量较少，树的高度可能会增加，导致查询效率的波动。</li><li><strong>磁盘I/O操作优化</strong>：因为磁盘I/O操作相对于内存访问来说，代价要高得多，B+树的设计更加注重减少磁盘I/O次数。B+树每一个节点的子节点数量都较多，这意味着可以通过一次I/O取得更多的索引信息。</li></ul><p><strong>B 树&amp; B+树两者有何异同呢？</strong></p><ul><li>B 树的所有节点既存放键(key) 也存放 数据(data)，而 B+树只有叶子节点存放 key 和 data，其他内节点只存放 key。</li><li>B 树的叶子节点都是独立的;B+树的叶子节点有一条引用链指向与它相邻的叶子节点。</li><li>B 树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而 B+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。</li></ul><p>在 MySQL 中，MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是，两者的实现方式不太一样。</p><p>MyISAM 引擎中，B+Tree 叶节点的 data 域存放的是数据记录的地址。在索引检索的时候，首先按照 B+Tree 搜索算法搜索索引，如果指定的 Key 存在，则取出其 data 域的值，然后<strong>以 data 域的值为地址读取相应的数据记录</strong>。这被称为“<strong>非聚簇索引</strong>”。</p><p>InnoDB 引擎中，其数据文件本身就是索引文件。相比 MyISAM，索引文件和数据文件是分离的，其表数据文件本身就是按 B+Tree 组织的一个索引结构，<strong>树的叶节点 data 域保存了完整的数据记录</strong>。这个索引的 key 是数据表的主键，因此 InnoDB 表数据文件本身就是主索引。这被称为**“聚簇索引（或聚集索引）**”，而其余的索引都作为辅助索引，辅助索引的 data 域存储相应记录主键的值而不是地址，这也是和 MyISAM 不同的地方。在根据主索引搜索时，直接找到 key 所在的节点即可取出数据；在根据辅助索引查找时，则需要先取出主键的值，再走一遍主索引。 因此，在设计表的时候，不建议使用过长的字段作为主键，也不建议使用非单调的字段作为主键，这样会造成主索引频繁分裂。</p><h3 id="详解b-树" tabindex="-1"><a class="header-anchor" href="#详解b-树" aria-hidden="true">#</a> 详解B+树</h3><h4 id="什么是-b-树" tabindex="-1"><a class="header-anchor" href="#什么是-b-树" aria-hidden="true">#</a> 什么是 B+ 树？</h4><p>B+ 树就是对 B 树做了一个升级，MySQL 中索引的数据结构就是采用了 B+ 树，B+ 树结构如下图：</p><figure><img src="'+M+'" alt="image-20220718133551150" tabindex="0" loading="lazy"><figcaption>image-20220718133551150</figcaption></figure><p>B+ 树与 B 树差异的点，主要是以下这几点：</p><ul><li>叶子节点（最底部的节点）才会存放实际数据（索引+记录），非叶子节点只会存放索引；</li><li>所有索引都会在叶子节点出现，叶子节点之间构成一个有序链表；</li><li>非叶子节点的索引也会同时存在在子节点中，并且是在子节点中所有索引的最大（或最小）。</li><li>非叶子节点中有多少个子节点，就有多少个索引；</li></ul><p>下面通过三个方面，比较下 B+ 和 B 树的性能区别。</p><h4 id="b-树是如何进行查询的" tabindex="-1"><a class="header-anchor" href="#b-树是如何进行查询的" aria-hidden="true">#</a> B+ 树是如何进行查询的？</h4><p>一个数据页中的记录检索，因为一个数据页中的记录是有限的，且主键值是有序的，所以通过对所有记录进行分组，然后将组号（槽号）存储到页目录，使其起到索引作用，通过二分查找的方法快速检索到记录在哪个分组，来降低检索的时间复杂度。</p><p>但是，当我们需要存储大量的记录时，就需要多个数据页，这时我们就需要考虑如何建立合适的索引，才能方便定位记录所在的页。</p><p>为了解决这个问题，<strong>InnoDB 采用了 B+ 树作为索引</strong>。磁盘的 I/O 操作次数对索引的使用效率至关重要，因此在构造索引的时候，我们更倾向于采用“矮胖”的 B+ 树数据结构，这样所需要进行的磁盘 I/O 次数更少，而且 B+ 树 更适合进行关键字的范围查询。</p><p>InnoDB 里的 B+ 树中的<strong>每个节点都是一个数据页</strong>，结构示意图如下：</p><figure><img src="'+I+'" alt="image-20220718134312198" tabindex="0" loading="lazy"><figcaption>image-20220718134312198</figcaption></figure><p>通过上图，我们看出 B+ 树的特点：</p><ul><li>只有叶子节点（最底层的节点）才存放了数据，非叶子节点（其他上层节）仅用来存放目录项作为索引。</li><li>非叶子节点分为不同层次，通过分层来降低每一层的搜索量；</li><li>所有节点按照索引键大小排序，构成一个双向链表，便于范围查询；</li></ul><p>我们再看看 B+ 树如何实现快速查找主键为 6 的记录，以上图为例子：</p><ul><li>从根节点开始，通过二分法快速定位到符合页内范围包含查询值的页，因为查询的主键值为 6，在[1, 7)范围之间，所以到页 30 中查找更详细的目录项；</li><li>在非叶子节点（页30）中，继续通过二分法快速定位到符合页内范围包含查询值的页，主键值大于 5，所以就到叶子节点（页16）查找记录；</li><li>接着，在叶子节点（页16）中，通过槽查找记录时，使用二分法快速定位要查询的记录在哪个槽（哪个记录分组），定位到槽后，再遍历槽内的所有记录，找到主键为 6 的记录。</li></ul><p>可以看到，在定位记录所在哪一个页时，也是通过二分法快速定位到包含该记录的页。定位到该页后，又会在该页内进行二分法快速定位记录所在的分组（槽号），最后在分组内进行遍历查找。</p><h4 id="单点查询" tabindex="-1"><a class="header-anchor" href="#单点查询" aria-hidden="true">#</a> 单点查询</h4><p>B 树进行单个索引查询时，最快可以在 O(1) 的时间代价内就查到，而从平均时间代价来看，会比 B+ 树稍快一些。</p><p>但是 B 树的查询波动会比较大，因为每个节点即存索引又存记录，所以有时候访问到了非叶子节点就可以找到索引，而有时需要访问到叶子节点才能找到索引。</p><p><strong>B+ 树的非叶子节点不存放实际的记录数据，仅存放索引，因此数据量相同的情况下，相比存储即存索引又存记录的 B 树，B+树的非叶子节点可以存放更多的索引，因此 B+ 树可以比 B 树更「矮胖」，查询底层节点的磁盘 I/O次数会更少</strong>。</p><h4 id="插入和删除效率" tabindex="-1"><a class="header-anchor" href="#插入和删除效率" aria-hidden="true">#</a> 插入和删除效率</h4><p>B+ 树有大量的冗余节点，这样使得删除一个节点的时候，可以直接从叶子节点中删除，甚至可以不动非叶子节点，这样删除非常快，</p><p>比如下面这个动图是删除 B+ 树 0004 节点的过程，因为非叶子节点有 0004 的冗余节点，所以在删除的时候，树形结构变化很小：</p><figure><img src="https://img-blog.csdnimg.cn/25508b0cd9c44ef6937fdd737020a7f1.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>注意，：B+ 树对于非叶子节点的子节点和索引的个数，定义方式可能会有不同，有的是说非叶子节点的子节点的个数为 M 阶，而索引的个数为 M-1（这个是维基百科里的定义），因此我本文关于 B+ 树的动图都是基于这个。但是我在前面介绍 B+ 树与 B+ 树的差异时，说的是「非叶子节点中有多少个子节点，就有多少个索引」，主要是 MySQL 用到的 B+ 树就是这个特性。</p></blockquote><p>下面这个动图是删除 B 树 0008 节点的过程，可能会导致树的复杂变化：</p><figure><img src="https://img-blog.csdnimg.cn/2be62679487640bbaac663fa96c7f35f.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>甚至，B+ 树在删除根节点的时候，由于存在冗余的节点，所以不会发生复杂的树的变形，比如下面这个动图是删除 B+ 树根节点的过程：</p><figure><img src="https://img-blog.csdnimg.cn/23730b5af987480fabff0f1d142a2b6c.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>B 树则不同，B 树没有冗余节点，删除节点的时候非常复杂，比如删除根节点中的数据，可能涉及复杂的树的变形，比如下面这个动图是删除 B 树根节点的过程：</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/7552002f9b8195ab650d431bfe66cce2.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>B+ 树的插入也是一样，有冗余节点，插入可能存在节点的分裂（如果节点饱和），但是最多只涉及树的一条路径。而且 B+ 树会自动平衡，不需要像更多复杂的算法，类似红黑树的旋转操作等。</p><p>因此，<strong>B+ 树的插入和删除效率更高</strong>。</p><h4 id="范围查询" tabindex="-1"><a class="header-anchor" href="#范围查询" aria-hidden="true">#</a> 范围查询</h4><p>B 树和 B+ 树等值查询原理基本一致，先从根节点查找，然后对比目标数据的范围，最后递归的进入子节点查找。</p><p>因为 <strong>B+ 树所有叶子节点间还有一个链表进行连接，这种设计对范围查找非常有帮助</strong>，比如说我们想知道 12 月 1 日和 12 月 12 日之间的订单，这个时候可以先查找到 12 月 1 日所在的叶子节点，然后利用链表向右遍历，直到找到 12 月12 日的节点，这样就不需要从根节点查询了，进一步节省查询需要的时间。</p><p>而 B 树没有将所有叶子节点用链表串联起来的结构，因此只能通过树的遍历来完成范围查询，这会涉及多个节点的磁盘 I/O 操作，范围查询效率不如 B+ 树。</p><p>因此，存在大量范围检索的场景，适合使用 B+树，比如数据库。而对于大量的单个索引查询的场景，可以考虑 B 树，比如 nosql 的MongoDB</p><h4 id="mysql-中的-b-树" tabindex="-1"><a class="header-anchor" href="#mysql-中的-b-树" aria-hidden="true">#</a> MySQL 中的 B+ 树</h4><p>MySQL 的存储方式根据存储引擎的不同而不同，我们最常用的就是 Innodb 存储引擎，它就是采用了 B+ 树作为了索引的数据结构。</p><p>下图就是 Innodb 里的 B+ 树：</p><figure><img src="'+S+'" alt="image-20220718133843334" tabindex="0" loading="lazy"><figcaption>image-20220718133843334</figcaption></figure><p>但是 Innodb 使用的 B+ 树有一些特别的点，比如：</p><ul><li>B+ 树的叶子节点之间是用「双向链表」进行连接，这样的好处是既能向右遍历，也能向左遍历。</li><li>B+ 树点节点内容是数据页，数据页里存放了用户的记录以及各种信息，每个数据页默认大小是 16 KB。</li></ul><p>Innodb 根据索引类型不同，分为聚集和二级索引。他们区别在于，聚集索引的叶子节点存放的是实际数据，所有完整的用户记录都存放在聚集索引的叶子节点，而二级索引的叶子节点存放的是主键值，而不是实际数据。</p><p>因为表的数据都是存放在聚集索引的叶子节点里，所以 InnoDB 存储引擎一定会为表创建一个聚集索引，且由于数据在物理上只会保存一份，所以聚簇索引只能有一个，而二级索引可以创建多个。</p><h3 id="mysql三大日志-binlog、redo-log、undo-log" tabindex="-1"><a class="header-anchor" href="#mysql三大日志-binlog、redo-log、undo-log" aria-hidden="true">#</a> MySQL三大日志（binlog、redo log、undo log）</h3><blockquote><p>简洁介绍</p></blockquote><p>当然可以。在MySQL中，binlog、redo log和undo log都是用于保证数据一致性和可恢复性的重要组件，但它们的用途和工作方式各有不同。</p><ul><li><strong>bin log（二进制日志）</strong>：Binlog主要是用于记录数据库所有的DDL（Data Definition Language，数据定义语言，如CREATE、DROP、ALTER等）和DML（Data Manipulation Language，数据操作语言，如INSERT、UPDATE、DELETE等）语句，以及这些语句的执行时间。它的主要作用是<strong>用于MySQL的主从复制（Replication）和数据的恢复（Point-In-Time Recovery）</strong>。在主从复制中，主服务器上的改动通过Binlog同步到从服务器，以保持数据的一致性。在数据恢复中，可以利用Binlog回放事务，将数据恢复到某一特定的时间点。</li><li><strong>undo log（回滚日志）</strong>：undo log是InnoDB存储引擎特有的日志，用来<strong>保存旧数据的，即在事务开始之前，数据的状态</strong>。Undo日志主要是为了实现事务的原子性和一致性。undo log记录了数据在进行修改前的原始值。如果一个事务执行失败，或者一个正在执行的<strong>事务需要被中断</strong>（例如，由于其他事务的回滚或者明确的撤销要求），MySQL可以利用undo log中的信息把数据<strong>恢复到之前的状态</strong>。此外，undo日志也用于实现MVCC（多版本并发控制），使得每个事务都能看到一致的“快照”数据，而不会受到其他并发事务的影响。</li><li><strong>redo log（重做日志）</strong>：redo log是InnoDB存储引擎特有的日志文件，是物理日志，<strong>记录的是在某个数据页上做了什么修改，即在事务执行过程中，数据的变更情况</strong>。它确保了即使<strong>MySQL意外崩溃</strong>，通过redo log也可以恢复数据。当我们对数据进行更改时，首先会将更改写入到redo log（这个过程叫做prepare），并且此时更改还未真正地应用到磁盘的数据页上，然后再把更改应用到磁盘的数据页上，这个过程称为commit。</li></ul><hr><p><code>MySQL</code> 日志 主要包括错误日志、查询日志、慢查询日志、事务日志、二进制日志几大类。其中，比较重要的还要属二进制日志 <code>binlog</code>（归档日志）和事务日志 <code>redo log</code>（重做日志）和 <code>undo log</code>（回滚日志）</p><figure><img src="'+T+'" alt="image-20220613210057735" tabindex="0" loading="lazy"><figcaption>image-20220613210057735</figcaption></figure><h4 id="redo-log" tabindex="-1"><a class="header-anchor" href="#redo-log" aria-hidden="true">#</a> redo log</h4><p><code>redo log</code>（重做日志）是 <code>InnoDB</code>存储引擎独有的，它让 <code>MySQL</code>拥有了崩溃恢复能力。</p><p>比如 <code>MySQL</code> 实例挂了或宕机了，重启时，<code>InnoDB</code>存储引擎会使用 <code>redo log</code>恢复数据，保证数据的持久性与完整性。</p><figure><img src="'+R+'" alt="image-20220706212928940" tabindex="0" loading="lazy"><figcaption>image-20220706212928940</figcaption></figure><p><code>MySQL</code> 中数据是以页为单位，你查询一条记录，会从硬盘把一页的数据加载出来，加载出来的数据叫数据页，会放入到 <code>Buffer Pool</code> 中。</p><p>后续的查询都是先从 <code>Buffer Pool</code> 中找，没有命中再去硬盘加载，减少硬盘 <code>IO</code> 开销，提升性能。</p><p>更新表数据的时候，也是如此，发现 <code>Buffer Pool</code> 里存在要更新的数据，就直接在 <code>Buffer Pool</code> 里更新。</p><p>然后会把“在某个数据页上做了什么修改”记录到重做日志缓存（<code>redo log buffer</code>）里，接着刷盘到 <code>redo log</code> 文件里。</p><figure><img src="'+C+'" alt="image-20220706212937926" tabindex="0" loading="lazy"><figcaption>image-20220706212937926</figcaption></figure><blockquote><p>图片笔误提示：第 4 步 “清空 redo log buffe 刷盘到 redo 日志中”这句话中的 buffe 应该是 buffer。</p></blockquote><p>理想情况，事务一提交就会进行刷盘操作，但实际上，刷盘的时机是根据策略来进行的。</p><blockquote><p>小贴士：每条 redo 记录由“表空间号+数据页号+偏移量+修改数据长度+具体修改的数据”组成</p></blockquote><h5 id="pagecache" tabindex="-1"><a class="header-anchor" href="#pagecache" aria-hidden="true">#</a> PageCache</h5><p>我们知道文件一般存放在硬盘（机械硬盘或固态硬盘）中，CPU 并不能直接访问硬盘中的数据，而是需要先将硬盘中的数据读入到内存中，然后才能被 CPU 访问。</p><p>由于读写硬盘的速度比读写内存要慢很多（DDR4 内存读写速度是机械硬盘500倍，是固态硬盘的200倍），所以为了避免每次读写文件时，都需要对硬盘进行读写操作，Linux 内核使用 <code>页缓存（Page Cache）</code> 机制来对文件中的数据进行缓存。</p><blockquote><p>本文使用的 Linux 内核版本为：Linux-2.6.23</p></blockquote><h6 id="什么是页缓存" tabindex="-1"><a class="header-anchor" href="#什么是页缓存" aria-hidden="true">#</a> 什么是页缓存</h6><p>为了提升对文件的读写效率，Linux 内核会以页大小（4KB）为单位，将文件划分为多数据块。当用户对文件中的某个数据块进行读写操作时，内核首先会申请一个内存页（称为 <code>页缓存</code>）与文件中的数据块进行绑定。如下图所示：</p><figure><img src="'+q+`" alt="image-20220725150519009" tabindex="0" loading="lazy"><figcaption>image-20220725150519009</figcaption></figure><p>如上图所示，当用户对文件进行读写时，实际上是对文件的 <code>页缓存</code> 进行读写。所以对文件进行读写操作时，会分以下两种情况进行处理：</p><ul><li>当从文件中读取数据时，如果要读取的数据所在的页缓存已经存在，那么就直接把页缓存的数据拷贝给用户即可。否则，内核首先会申请一个空闲的内存页（页缓存），然后从文件中读取数据到页缓存，并且把页缓存的数据拷贝给用户。</li><li>当向文件中写入数据时，如果要写入的数据所在的页缓存已经存在，那么直接把新数据写入到页缓存即可。否则，内核首先会申请一个空闲的内存页（页缓存），然后从文件中读取数据到页缓存，并且把新数据写入到页缓存中。对于被修改的页缓存，内核会定时把这些页缓存刷新到文件中。</li></ul><h6 id="页缓存的实现" tabindex="-1"><a class="header-anchor" href="#页缓存的实现" aria-hidden="true">#</a> 页缓存的实现</h6><p>前面主要介绍了页缓存的作用和原理，接下来我们将会分析 Linux 内核是怎么实现页缓存机制的。</p><ol><li>address_space</li></ol><p>在 Linux 内核中，使用 <code>file</code> 对象来描述一个被打开的文件，其中有个名为 <code>f_mapping</code> 的字段，定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">struct</span> <span class="token class-name">address_space</span> <span class="token operator">*</span>f_mapping<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面代码可以看出，<code>f_mapping</code> 字段的类型为 <code>address_space</code> 结构，其定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">address_space</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">inode</span>           <span class="token operator">*</span>host<span class="token punctuation">;</span>      <span class="token comment">/* owner: inode, block_device */</span>
    <span class="token keyword">struct</span> <span class="token class-name">radix_tree_root</span> page_tree<span class="token punctuation">;</span>  <span class="token comment">/* radix tree of all pages */</span>
    <span class="token class-name">rwlock_t</span>               tree_lock<span class="token punctuation">;</span>  <span class="token comment">/* and rwlock protecting it */</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>address_space</code> 结构其中的一个作用就是用于存储文件的 <code>页缓存</code>，下面介绍一下各个字段的作用：</p><ul><li><code>host</code>：指向当前 <code>address_space</code> 对象所属的文件 <code>inode</code> 对象（每个文件都使用一个 <code>inode</code> 对象表示）。</li><li><code>page_tree</code>：用于存储当前文件的 <code>页缓存</code>。</li><li><code>tree_lock</code>：用于防止并发访问 <code>page_tree</code> 导致的资源竞争问题。</li></ul><p>从 <code>address_space</code> 对象的定义可以看出，文件的 <code>页缓存</code> 使用了 <code>radix树</code> 来存储。</p><blockquote><p><code>radix树</code>：又名基数树，它使用键值（key-value）对的形式来保存数据，并且可以通过键快速查找到其对应的值。内核以文件读写操作中的数据 <code>偏移量</code> 作为键，以数据偏移量所在的 <code>页缓存</code> 作为值，存储在 <code>address_space</code> 结构的 <code>page_tree</code> 字段中。</p></blockquote><p>下图展示了上述各个结构之间的关系：</p><figure><img src="`+A+`" alt="image-20220725150553230" tabindex="0" loading="lazy"><figcaption>image-20220725150553230</figcaption></figure><p>如果对 <code>radix树</code> 不太了解，可以简单将其看成可以通过文件偏移量快速找到其所在 <code>页缓存</code> 的结构，有机会我会另外写一篇关于 <code>radix树</code> 的文章。</p><ol start="2"><li>读文件操作</li></ol><p>现在我们来分析一下读取文件数据的过程，用户可以通过调用 <code>read</code> 系统调用来读取文件中的数据，其调用链如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>read()
└→ sys_read()
   └→ vfs_read()
      └→ do_sync_read()
         └→ generic_file_aio_read()
            └→ do_generic_file_read()
               └→ do_generic_mapping_read()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的调用链可以看出，<code>read</code> 系统调用最终会调用 <code>do_generic_mapping_read</code> 函数来读取文件中的数据，其实现如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_generic_mapping_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">address_space</span> <span class="token operator">*</span>mapping<span class="token punctuation">,</span>
                        <span class="token keyword">struct</span> <span class="token class-name">file_ra_state</span> <span class="token operator">*</span>_ra<span class="token punctuation">,</span>
                        <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>filp<span class="token punctuation">,</span>
                        <span class="token class-name">loff_t</span> <span class="token operator">*</span>ppos<span class="token punctuation">,</span>
                        <span class="token class-name">read_descriptor_t</span> <span class="token operator">*</span>desc<span class="token punctuation">,</span>
                        <span class="token class-name">read_actor_t</span> actor<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode <span class="token operator">=</span> mapping<span class="token operator">-&gt;</span>host<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> index<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>cached_page<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    cached_page <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    index <span class="token operator">=</span> <span class="token operator">*</span>ppos <span class="token operator">&gt;&gt;</span> PAGE_CACHE_SHIFT<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

find_page<span class="token operator">:</span>
        <span class="token comment">// 1. 查找文件偏移量所在的页缓存是否存在</span>
        page <span class="token operator">=</span> <span class="token function">find_get_page</span><span class="token punctuation">(</span>mapping<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>page<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token comment">// 2. 如果页缓存不存在, 那么跳到 no_cached_page 进行处理</span>
            <span class="token keyword">goto</span> no_cached_page<span class="token punctuation">;</span> 
        <span class="token punctuation">}</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

page_ok<span class="token operator">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token comment">// 3. 如果页缓存存在, 那么把页缓存的数据拷贝到用户应用程序的内存中</span>
        ret <span class="token operator">=</span> <span class="token function">actor</span><span class="token punctuation">(</span>desc<span class="token punctuation">,</span> page<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> nr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> nr <span class="token operator">&amp;&amp;</span> desc<span class="token operator">-&gt;</span>count<span class="token punctuation">)</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

readpage<span class="token operator">:</span>
        <span class="token comment">// 4. 从文件读取数据到页缓存中</span>
        error <span class="token operator">=</span> mapping<span class="token operator">-&gt;</span>a_ops<span class="token operator">-&gt;</span><span class="token function">readpage</span><span class="token punctuation">(</span>filp<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token keyword">goto</span> page_ok<span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

no_cached_page<span class="token operator">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cached_page<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 5. 申请一个内存页作为页缓存</span>
            cached_page <span class="token operator">=</span> <span class="token function">page_cache_alloc_cold</span><span class="token punctuation">(</span>mapping<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 6. 把新申请的页缓存添加到文件页缓存中</span>
        error <span class="token operator">=</span> <span class="token function">add_to_page_cache_lru</span><span class="token punctuation">(</span>cached_page<span class="token punctuation">,</span> mapping<span class="token punctuation">,</span> index<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        page <span class="token operator">=</span> cached_page<span class="token punctuation">;</span>
        cached_page <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> readpage<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

out<span class="token operator">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>do_generic_mapping_read</code> 函数的实现比较复杂，经过精简后，上面代码只留下最重要的逻辑，可以归纳为以下几个步骤：</p><ul><li>通过调用 <code>find_get_page</code> 函数查找要读取的文件偏移量所对应的页缓存是否存在，如果存在就把页缓存中的数据拷贝到应用程序的内存中。</li><li>否则调用 <code>page_cache_alloc_cold</code> 函数申请一个空闲的内存页作为新的页缓存，并且通过调用 <code>add_to_page_cache_lru</code> 函数把新申请的页缓存添加到文件页缓存和 LRU 队列中（后面会介绍）。</li><li>通过调用 <code>readpage</code> 接口从文件中读取数据到页缓存中，并且把页缓存的数据拷贝到应用程序的内存中。</li></ul><p>从上面代码可以看出，当页缓存不存在时会申请一块空闲的内存页作为页缓存，并且通过调用 <code>add_to_page_cache_lru</code> 函数把其添加到文件的页缓存和 LRU 队列中。我们来看看 <code>add_to_page_cache_lru</code> 函数的实现：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code> <span class="token keyword">int</span> <span class="token function">add_to_page_cache_lru</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">address_space</span> <span class="token operator">*</span>mapping<span class="token punctuation">,</span>
                           <span class="token class-name">pgoff_t</span> offset<span class="token punctuation">,</span> <span class="token class-name">gfp_t</span> gfp_mask<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1. 把页缓存添加到文件页缓存中</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">add_to_page_cache</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> mapping<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> gfp_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">lru_cache_add</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2. 把页缓存添加到 LRU 队列中</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>add_to_page_cache_lru</code> 函数主要完成两个工作：</p><ul><li>通过调用 <code>add_to_page_cache</code> 函数把页缓存添加到文件页缓存中，也就是添加到 <code>address_space</code> 结构的 <code>page_tree</code> 字段中。</li><li>通过调用 <code>lru_cache_add</code> 函数把页缓存添加到 LRU 队列中。LRU 队列用于当系统内存不足时，对页缓存进行清理时使用。</li></ul><h6 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h6><p>本文主要介绍了 <code>页缓存</code> 的作用和原理，并且介绍了在读取文件数据时对页缓存的处理过程。本文并没有介绍写文件操作对应的页缓存处理和当系统内存不足时怎么释放页缓存，有兴趣的话可以自行阅读相关的代码实现。</p><h5 id="刷盘时机" tabindex="-1"><a class="header-anchor" href="#刷盘时机" aria-hidden="true">#</a> 刷盘时机</h5><p><code>InnoDB</code> 存储引擎为 <code>redo log</code> 的刷盘策略提供了 <code>innodb_flush_log_at_trx_commit</code> 参数，它支持三种策略：</p><ul><li><strong>0</strong> ：设置为 0 的时候，表示每次事务提交时不进行刷盘操作</li><li><strong>1</strong> ：设置为 1 的时候，表示每次事务提交时都将进行刷盘操作（默认值）</li><li><strong>2</strong> ：设置为 2 的时候，表示每次事务提交时都只把 redo log buffer 内容写入 page cache</li></ul><p><code>innodb_flush_log_at_trx_commit</code> 参数默认为 1 ，也就是说当事务提交时会调用 <code>fsync</code> 对 redo log 进行刷盘</p><p>另外，<code>InnoDB</code> 存储引擎有一个后台线程，每隔 <code>1</code> 秒，就会把 <code>redo log buffer</code> 中的内容写到文件系统缓存（<code>page cache</code>），然后调用 <code>fsync</code> 刷盘。</p><figure><img src="`+Q+'" alt="image-20220706213001613" tabindex="0" loading="lazy"><figcaption>image-20220706213001613</figcaption></figure><p>也就是说，一个没有提交事务的 <code>redo log</code> 记录，也可能会刷盘。</p><p><strong>为什么呢？</strong></p><p>因为在事务执行过程 <code>redo log</code> 记录是会写入 <code>redo log buffer</code> 中，这些 <code>redo log</code> 记录会被后台线程刷盘。</p><figure><img src="'+O+'" alt="image-20220706213009977" tabindex="0" loading="lazy"><figcaption>image-20220706213009977</figcaption></figure><p>除了后台线程每秒 <code>1</code>次的轮询操作，还有一种情况，当 <code>redo log buffer</code> 占用的空间即将达到 <code>innodb_log_buffer_size</code> 一半的时候，后台线程会主动刷盘。</p><p>下面是不同刷盘策略的流程图</p><p>innodb_flush_log_at_trx_commit=0</p><figure><img src="'+j+'" alt="image-20220706213032809" tabindex="0" loading="lazy"><figcaption>image-20220706213032809</figcaption></figure><p>为 <code>0</code>时，如果 <code>MySQL</code>挂了或宕机可能会有 <code>1</code>秒数据的丢失。</p><p>innodb_flush_log_at_trx_commit=1</p><figure><img src="'+z+'" alt="image-20220706213045311" tabindex="0" loading="lazy"><figcaption>image-20220706213045311</figcaption></figure><p>为 <code>1</code>时， 只要事务提交成功，<code>redo log</code>记录就一定在硬盘里，不会有任何数据丢失。</p><p>如果事务执行期间 <code>MySQL</code>挂了或宕机，这部分日志丢了，但是事务并没有提交，所以日志丢了也不会有损失。</p><p>innodb_flush_log_at_trx_commit=2</p><figure><img src="'+N+'" alt="image-20220706213100010" tabindex="0" loading="lazy"><figcaption>image-20220706213100010</figcaption></figure><p>为 <code>2</code>时， 只要事务提交成功，<code>redo log buffer</code>中的内容只写入文件系统缓存（<code>page cache</code>）。</p><p>如果仅仅只是 <code>MySQL</code>挂了不会有任何数据丢失，但是宕机可能会有 <code>1</code>秒数据的丢失。</p><h5 id="日志文件组" tabindex="-1"><a class="header-anchor" href="#日志文件组" aria-hidden="true">#</a> 日志文件组</h5><p>硬盘上存储的 <code>redo log</code> 日志文件不只一个，而是以一个<strong>日志文件组</strong>的形式出现的，每个的 <code>redo</code>日志文件大小都是一样的。</p><p>比如可以配置为一组 <code>4</code>个文件，每个文件的大小是 <code>1GB</code>，整个 <code>redo log</code> 日志文件组可以记录 <code>4G</code>的内容。</p><p>它采用的是环形数组形式，从头开始写，写到末尾又回到头循环写，如下图所示。</p><figure><img src="'+V+'" alt="image-20220706213128010" tabindex="0" loading="lazy"><figcaption>image-20220706213128010</figcaption></figure><p>在个<strong>日志文件组</strong>中还有两个重要的属性，分别是 <code>write pos、checkpoint</code></p><ul><li><strong>write pos</strong> 是当前记录的位置，一边写一边后移</li><li><strong>checkpoint</strong> 是当前要擦除的位置，也是往后推移</li></ul><p>每次刷盘 <code>redo log</code> 记录到<strong>日志文件组</strong>中，<code>write pos</code> 位置就会后移更新。</p><p>每次 <code>MySQL</code> 加载<strong>日志文件组</strong>恢复数据时，会清空加载过的 <code>redo log</code> 记录，并把 <code>checkpoint</code> 后移更新。</p><p><code>write pos</code> 和 <code>checkpoint</code> 之间的还空着的部分可以用来写入新的 <code>redo log</code> 记录。</p><figure><img src="'+U+'" alt="image-20220706213147439" tabindex="0" loading="lazy"><figcaption>image-20220706213147439</figcaption></figure><p>如果 <code>write pos</code> 追上 <code>checkpoint</code> ，表示<strong>日志文件组</strong>满了，这时候不能再写入新的 <code>redo log</code> 记录，<code>MySQL</code> 得停下来，清空一些记录，把 <code>checkpoint</code> 推进一下。</p><figure><img src="'+P+`" alt="image-20220706213155597" tabindex="0" loading="lazy"><figcaption>image-20220706213155597</figcaption></figure><h5 id="redo-log-小结" tabindex="-1"><a class="header-anchor" href="#redo-log-小结" aria-hidden="true">#</a> redo log 小结</h5><p>相信大家都知道 <code>redo log</code> 的作用和它的刷盘时机、存储形式。</p><p>现在我们来思考一个问题： <strong>只要每次把修改后的数据页直接刷盘不就好了，还有 <code>redo log</code> 什么事？</strong></p><p>它们不都是刷盘么？差别在哪里？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">1</span> <span class="token class-name">Byte</span> <span class="token operator">=</span> <span class="token number">8</span>bit
<span class="token number">1</span> <span class="token constant">KB</span> <span class="token operator">=</span> <span class="token number">1024</span> <span class="token class-name">Byte</span>
<span class="token number">1</span> <span class="token constant">MB</span> <span class="token operator">=</span> <span class="token number">1024</span> <span class="token constant">KB</span>
<span class="token number">1</span> <span class="token constant">GB</span> <span class="token operator">=</span> <span class="token number">1024</span> <span class="token constant">MB</span>
<span class="token number">1</span> <span class="token constant">TB</span> <span class="token operator">=</span> <span class="token number">1024</span> <span class="token constant">GB</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上，数据页大小是 <code>16KB</code>，刷盘比较耗时，可能就修改了数据页里的几 <code>Byte</code> 数据，有必要把完整的数据页刷盘吗？</p><p>而且数据页刷盘是随机写，因为一个数据页对应的位置可能在硬盘文件的随机位置，所以性能是很差。</p><p>如果是写 <code>redo log</code>，一行记录可能就占几十 <code>Byte</code>，只包含表空间号、数据页号、磁盘文件偏移 量、更新值，再加上是顺序写，所以刷盘速度很快。</p><p>所以用 <code>redo log</code> 形式记录修改内容，性能会远远超过刷数据页的方式，这也让数据库的并发能力更强。</p><blockquote><p>其实内存的数据页在一定时机也会刷盘，我们把这称为页合并，讲 <code>Buffer Pool</code>的时候会对这块细说</p></blockquote><h4 id="binlog" tabindex="-1"><a class="header-anchor" href="#binlog" aria-hidden="true">#</a> binlog</h4><p><code>redo log</code> 它是物理日志，记录内容是“在某个数据页上做了什么修改”，属于 <code>InnoDB</code> 存储引擎。</p><p>而 <code>binlog</code> 是逻辑日志，记录内容是语句的原始逻辑，类似于“给 ID=2 这一行的 c 字段加 1”，属于 <code>MySQL Server</code> 层。</p><p>不管用什么存储引擎，只要发生了表数据更新，都会产生 <code>binlog</code> 日志。</p><p>那 <code>binlog</code> 到底是用来干嘛的？</p><p>可以说 <code>MySQL</code>数据库的<strong>数据备份、主备、主主、主从</strong>都离不开 <code>binlog</code>，需要依靠 <code>binlog</code>来同步数据，保证数据一致性。</p><h5 id="记录格式" tabindex="-1"><a class="header-anchor" href="#记录格式" aria-hidden="true">#</a> 记录格式</h5><p><code>binlog</code> 日志有三种格式，可以通过 <code>binlog_format</code>参数指定。</p><ul><li><strong>statement</strong></li><li><strong>row</strong></li><li><strong>mixed</strong></li></ul><p>指定 <code>statement</code>，记录的内容是 <code>SQL</code>语句原文，比如执行一条 <code>update T set update_time=now() where id=1</code>，记录的内容如下</p><figure><img src="`+H+'" alt="image-20220706213326407" tabindex="0" loading="lazy"><figcaption>image-20220706213326407</figcaption></figure><p>同步数据时，会执行记录的 <code>SQL</code>语句，但是</p><p>有个问题，<code>update_time=now()</code>这里会获取当前系统时间，直接执行会导致与原库的数据不一致。</p><p>为了解决这种问题，我们需要指定为 <code>row</code>，记录的内容不再是简单的 <code>SQL</code>语句了，还包含操作的具体数据，记录内容如下</p><figure><img src="'+F+'" alt="image-20220706213333425" tabindex="0" loading="lazy"><figcaption>image-20220706213333425</figcaption></figure><p><code>row</code>格式记录的内容看不到详细信息，要通过 <code>mysqlbinlog</code>工具解析出来。</p><p><code>update_time=now()</code>变成了具体的时间 <code>update_time=1627112756247</code>，条件后面的@1、@2、@3 都是该行数据第 1 个~3 个字段的原始值（<strong>假设这张表只有 3 个字段</strong>）。</p><p>这样就能保证同步数据的一致性，通常情况下都是指定为 <code>row</code>，这样可以为数据库的恢复与同步带来更好的可靠性。</p><p>但是这种格式，需要更大的容量来记录，比较占用空间，恢复与同步时会更消耗 <code>IO</code>资源，影响执行速度。</p><p>所以就有了一种折中的方案，指定为 <code>mixed</code>，记录的内容是前两者的混合。</p><p><code>MySQL</code>会判断这条 <code>SQL</code>语句是否可能引起数据不一致，如果是，就用 <code>row</code>格式，否则就用 <code>statement</code>格式</p><h5 id="写入机制" tabindex="-1"><a class="header-anchor" href="#写入机制" aria-hidden="true">#</a> 写入机制</h5><p><code>binlog</code>的写入时机也非常简单，事务执行过程中，先把日志写到 <code>binlog cache</code>，事务提交的时候，再把 <code>binlog cache</code>写到 <code>binlog</code>文件中。</p><p>因为一个事务的 <code>binlog</code>不能被拆开，无论这个事务多大，也要确保一次性写入，所以系统会给每个线程分配一个块内存作为 <code>binlog cache</code>。</p><p>我们可以通过 <code>binlog_cache_size</code>参数控制单个线程 binlog cache 大小，如果存储内容超过了这个参数，就要暂存到磁盘（<code>Swap</code>）。</p><p><code>binlog</code>日志刷盘流程如下</p><figure><img src="'+X+'" alt="image-20220706213409674" tabindex="0" loading="lazy"><figcaption>image-20220706213409674</figcaption></figure><ul><li><strong>上图的 write，是指把日志写入到文件系统的 page cache，并没有把数据持久化到磁盘，所以速度比较快</strong></li><li><strong>上图的 fsync，才是将数据持久化到磁盘的操作</strong></li></ul><p><code>write</code>和 <code>fsync</code>的时机，可以由参数 <code>sync_binlog</code>控制，默认是 <code>0</code>。</p><p>为 <code>0</code>的时候，表示每次提交事务都只 <code>write</code>，由系统自行判断什么时候执行 <code>fsync</code>。</p><figure><img src="'+W+'" alt="image-20220706213418556" tabindex="0" loading="lazy"><figcaption>image-20220706213418556</figcaption></figure><p>虽然性能得到提升，但是机器宕机，<code>page cache</code>里面的 binlog 会丢失。</p><p>为了安全起见，可以设置为 <code>1</code>，表示每次提交事务都会执行 <code>fsync</code>，就如同 <strong>redo log 日志刷盘流程</strong> 一样。</p><p>最后还有一种折中方式，可以设置为 <code>N(N&gt;1)</code>，表示每次提交事务都 <code>write</code>，但累积 <code>N</code>个事务后才 <code>fsync</code></p><figure><img src="'+K+'" alt="image-20220706213426711" tabindex="0" loading="lazy"><figcaption>image-20220706213426711</figcaption></figure><p>在出现 <code>IO</code>瓶颈的场景里，将 <code>sync_binlog</code>设置成一个比较大的值，可以提升性能。</p><p>同样的，如果机器宕机，会丢失最近 <code>N</code>个事务的 <code>binlog</code>日志</p><h4 id="两阶段提交" tabindex="-1"><a class="header-anchor" href="#两阶段提交" aria-hidden="true">#</a> 两阶段提交</h4><p><code>redo log</code>（重做日志）让 <code>InnoDB</code>存储引擎拥有了崩溃恢复能力。</p><p><code>binlog</code>（归档日志）保证了 <code>MySQL</code>集群架构的数据一致性。</p><p>虽然它们都属于持久化的保证，但是侧重点不同。</p><p>在执行更新语句过程，会记录 <code>redo log</code>与 <code>binlog</code>两块日志，以基本的事务为单位，<code>redo log</code>在事务执行过程中可以不断写入，而 <code>binlog</code>只有在提交事务时才写入，所以 <code>redo log</code>与 <code>binlog</code>的写入时机不一样。</p><figure><img src="'+G+'" alt="image-20220706213448142" tabindex="0" loading="lazy"><figcaption>image-20220706213448142</figcaption></figure><p>回到正题，<code>redo log</code>与 <code>binlog</code>两份日志之间的逻辑不一致，会出现什么问题？</p><p>我们以 <code>update</code>语句为例，假设 <code>id=2</code>的记录，字段 <code>c</code>值是 <code>0</code>，把字段 <code>c</code>值更新成 <code>1</code>，<code>SQL</code>语句为 <code>update T set c=1 where id=2</code>。</p><p>假设执行过程中写完 <code>redo log</code>日志后，<code>binlog</code>日志写期间发生了异常，会出现什么情况呢？</p><figure><img src="'+Z+'" alt="image-20220706213523943" tabindex="0" loading="lazy"><figcaption>image-20220706213523943</figcaption></figure><p>由于 <code>binlog</code>没写完就异常，这时候 <code>binlog</code>里面没有对应的修改记录。因此，之后用 <code>binlog</code>日志恢复数据时，就会少这一次更新，恢复出来的这一行 <code>c</code>值是 <code>0</code>，而原库因为 <code>redo log</code>日志恢复，这一行 <code>c</code>值是 <code>1</code>，最终数据不一致。</p><figure><img src="'+J+'" alt="image-20220706213531140" tabindex="0" loading="lazy"><figcaption>image-20220706213531140</figcaption></figure><p>为了解决两份日志之间的逻辑一致问题，<code>InnoDB</code>存储引擎使用<strong>两阶段提交</strong>方案。</p><p>原理很简单，将 <code>redo log</code>的写入拆成了两个步骤 <code>prepare</code>和 <code>commit</code>，这就是<strong>两阶段提交</strong>。</p><figure><img src="'+Y+'" alt="image-20220706213538608" tabindex="0" loading="lazy"><figcaption>image-20220706213538608</figcaption></figure><p>使用<strong>两阶段提交</strong>后，写入 <code>binlog</code>时发生异常也不会有影响，因为 <code>MySQL</code>根据 <code>redo log</code>日志恢复数据时，发现 <code>redo log</code>还处于 <code>prepare</code>阶段，并且没有对应 <code>binlog</code>日志，就会回滚该事务。<img src="'+$+'" alt="image-20220706213548852" loading="lazy"></p><p>再看一个场景，<code>redo log</code>设置 <code>commit</code>阶段发生异常，那会不会回滚事务呢？</p><figure><img src="'+nn+'" alt="image-20220706213556183" tabindex="0" loading="lazy"><figcaption>image-20220706213556183</figcaption></figure><p>并不会回滚事务，它会执行上图框住的逻辑，虽然 <code>redo log</code>是处于 <code>prepare</code>阶段，但是能通过事务 <code>id</code>找到对应的 <code>binlog</code>日志，所以 <code>MySQL</code>认为是完整的，就会提交事务恢复数据</p><h4 id="undo-log" tabindex="-1"><a class="header-anchor" href="#undo-log" aria-hidden="true">#</a> undo log</h4><p>我们在执行执行一条“增删改”语句的时候，虽然没有输入 begin 开启事务和 commit 提交事务，但是 MySQL 会<strong>隐式开启事务</strong>来执行“增删改”语句的，执行完就自动提交事务的，这样就保证了执行完“增删改”语句后，我们可以及时在数据库表看到“增删改”的结果了。</p><p>执行一条语句是否自动提交事务，是由 <code>autocommit</code> 参数决定的，默认是开启。所以，执行一条 update 语句也是会使用事务的。</p><p>那么，考虑一个问题。一个事务在执行过程中，在还没有提交事务之前，如果MySQL 发生了崩溃，要怎么回滚到事务之前的数据呢？</p><p>如果我们每次在事务执行过程中，都记录下回滚时需要的信息到一个日志里，那么在事务执行中途发生了 MySQL 崩溃后，就不用担心无法回滚到事务之前的数据，我们可以通过这个日志回滚到事务之前的数据。</p><p>实现这一机制就是 <strong>undo log（回滚日志），它保证了事务的 ACID 特性 (opens new window)中的原子性（Atomicity）。</strong></p><p>undo log 是一种用于撤销回退的日志。在事务没提交之前，MySQL 会先记录更新前的数据到 undo log 日志文件里面，当事务回滚时，可以利用 undo log 来进行回滚。如下图：</p><figure><img src="'+an+'" alt="image-20220706213728255" tabindex="0" loading="lazy"><figcaption>image-20220706213728255</figcaption></figure><p>每当 InnoDB 引擎对一条记录进行操作（修改、删除、新增）时，要把回滚时需要的信息都记录到 undo log 里，比如：</p><ul><li>在<strong>插入</strong>一条记录时，要把这条记录的主键值记下来，这样之后回滚时只需要把这个主键值对应的记录<strong>删掉</strong>就好了；</li><li>在<strong>删除</strong>一条记录时，要把这条记录中的内容都记下来，这样之后回滚时再把由这些内容组成的记录<strong>插入</strong>到表中就好了；</li><li>在<strong>更新</strong>一条记录时，要把被更新的列的旧值记下来，这样之后回滚时再把这些列<strong>更新为旧值</strong>就好了。</li></ul><p>在发生回滚时，就读取 undo log 里的数据，然后做原先相反操作。比如当 delete 一条记录时，undo log 中会把记录中的内容都记下来，然后执行回滚操作的时候，就读取 undo log 里的数据，然后进行 insert 操作。</p><p>不同的操作，需要记录的内容也是不同的，所以不同类型的操作（修改、删除、新增）产生的 undo log 的格式也是不同的，具体的每一个操作的 undo log 的格式我就不详细介绍了，感兴趣的可以自己去查查。</p><p>一条记录的每一次更新操作产生的 undo log 格式都有一个 roll_pointer 指针和一个 trx_id 事务id：</p><ul><li>通过 trx_id 可以知道该记录是被哪个事务修改的；</li><li>通过 roll_pointer 指针可以将这些 undo log 串成一个链表，这个链表就被称为版本链；</li></ul><p>版本链如下图：</p><figure><img src="'+sn+'" alt="image-20220706213736248" tabindex="0" loading="lazy"><figcaption>image-20220706213736248</figcaption></figure><p>另外，<strong>undo log 还有一个作用，通过 ReadView + undo log 实现 MVCC（多版本并发控制）</strong>。</p><p>对于「读提交」和「可重复读」隔离级别的事务来说，它们的快照读（普通 select 语句）是通过 Read View + undo log 来实现的，它们的区别在于创建 Read View 的时机不同：</p><ul><li>「读提交」隔离级别是在每个 select 都会生成一个新的 Read View，也意味着，事务期间的多次读取同一条数据，前后两次读的数据可能会出现不一致，因为可能这期间另外一个事务修改了该记录，并提交了事务。</li><li>「可重复读」隔离级别是启动事务时生成一个 Read View，然后整个事务期间都在用这个 Read View，这样就保证了在事务期间读到的数据都是事务启动前的记录。</li></ul>',233),Vn={href:"https://xiaolincoding.com/mysql/transaction/mvcc.html#%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E6%9C%89%E5%93%AA%E4%BA%9B",target:"_blank",rel:"noopener noreferrer"},Un=o('<ul><li><strong>实现事务回滚，保障事务的原子性</strong>。事务处理过程中，如果出现了错误或者用户执 行了 ROLLBACK 语句，MySQL 可以利用 undo log 中的历史数据将数据恢复到事务开始之前的状态。</li><li><strong>实现 MVCC（多版本并发控制）关键因素之一</strong>。MVCC 是通过 ReadView + undo log 实现的。undo log 为每条记录保存多份历史数据，MySQL 在执行快照读（普通 select 语句）的时候，会根据事务的 Read View 里的信息，顺着 undo log 的版本链找到满足其可见性的记录。</li></ul><h3 id="图解mvcc" tabindex="-1"><a class="header-anchor" href="#图解mvcc" aria-hidden="true">#</a> 图解MVCC</h3><p><strong>MVCC</strong>，全称为<strong>Multi-Version Concurrency Control</strong>，中文可以翻译为<strong>多版本并发控制</strong>。它是一种并发控制的方法，主要用于解决数据库系统中读写冲突的问题，允许多个用户同时对同一份数据进行读写操作，提高了数据库的并发性能。</p><p>在不使用MVCC的数据库中，读写操作往往需要对数据进行加锁，但这样会导致并发性能下降。MVCC通过为每一条数据维护多个版本，让读操作和写操作可以同时进行，提高了并发性能。具体来说：</p><p>读操作：在MVCC中，读操作不会阻塞写操作，也不会被写操作阻塞。当进行读操作时，MVCC会找到符合条件的数据版本，返回给用户。这样可以保证读操作的快速性，也避免了因写操作而导致的读操作阻塞。</p><p>写操作：当进行写操作时，MVCC会创建一个新的数据版本，而不是直接修改原始数据。这样就不会影响到正在进行的读操作。当新的数据版本创建完成后，MVCC会进行版本管理，把旧的数据版本删除。</p><p>在MySQL数据库中，InnoDB存储引擎就使用了MVCC技术。它通过使用undolog（回滚日志）和read view（读视图）来实现MVCC，使得数据库在处理高并发的读写请求时，可以保证数据的一致性，同时也能提高性能。</p><p>纲要：</p><ul><li>当前读和快照读的概念</li><li>事务隔离级别</li><li>MVCC 的两个概念 <ul><li>版本链</li><li>读视图（读已提交和可重复读）</li></ul></li></ul><figure><img src="'+en+'" alt="image-20220706231641283" tabindex="0" loading="lazy"><figcaption>image-20220706231641283</figcaption></figure><ul><li>当理解了上述概念可以对此例子进行加深理解</li></ul><figure><img src="'+on+'" alt="image-20220706220605710" tabindex="0" loading="lazy"><figcaption>image-20220706220605710</figcaption></figure><blockquote><p><strong>个人理解</strong>：<strong>MVCC（多版本并发控制）</strong> 可以在某种程度上看作是实现了乐观锁的一种手段。乐观锁假定大多数事务在执行时并不会发生冲突，即对于读操作而言，大多数情况下并不需要等待写操作。因此，读操作可以立即进行，而不需要获得锁。只有在实际进行写操作时，才会检查是否存在版本冲突，如果存在，则需要进行相应的处理。 在MVCC的实现中，<strong>read view（读视图）</strong> 用于确定哪个版本的数据可以被当前事务看到，保证了读一致性和非阻塞性读。undolog（回滚日志）则用于存储每个事务对数据的修改操作，在事务失败或并发冲突时，可以根据undolog进行回滚，恢复数据到事务开始之前的状态。 需要注意的是，虽然MVCC实现了类似乐观锁的特性，但这两者之间还是有区别的。乐观锁是一种并发控制策略，可以在任何数据库系统中实现，而MVCC是MySQL数据库中InnoDB存储引擎的一种实现方式，它更加关注于版本控制和并发性能的提升。 在MySQL的InnoDB存储引擎中，Read View（读视图）是一个系统级的概念，它并不会因为读操作而进行写入，而是用于确定在当前事务中，哪些行的版本是可见的。 <strong>读提交（Read Committed）</strong> 是MySQL中的一种事务隔离级别。在这个隔离级别下，每个SELECT操作都会生成一个新的Read View，这意味着在这个隔离级别下，一个事务中后发生的SELECT可以看到该事务开始后其他事务提交的修改。这也是为什么在&quot;读提交&quot;隔离级别下，可以避免不可重复读的现象。</p></blockquote><h3 id="mvcc是每个select都会创建一个快照吗" tabindex="-1"><a class="header-anchor" href="#mvcc是每个select都会创建一个快照吗" aria-hidden="true">#</a> MVCC是每个select都会创建一个快照吗？</h3><p>MVCC（多版本并发控制）在事务进行读取操作时会创建一个数据快照，但并非每个SELECT操作都会创建一个新的快照。实际上，快照的创建取决于事务的隔离级别和操作类型。</p><p>在MySQL的InnoDB存储引擎中，有四种事务隔离级别：读未提交（READ UNCOMMITTED）、读已提交（READ COMMITTED）、可重复读（REPEATABLE READ）和串行化（SERIALIZABLE）。MVCC的快照创建方式与这些隔离级别有关。</p><ul><li>对于**读未提交（READ UNCOMMITTED）**级别，事务可以看到其他事务未提交的修改，因此不需要创建快照。</li><li>对于**读已提交（READ COMMITTED）**级别，每个SELECT操作都会创建一个新的快照，这意味着在同一个事务中，不同的SELECT操作可能看到不同版本的数据。</li><li>对于**可重复读（REPEATABLE READ）**级别，事务在第一次读取数据时创建一个快照。在同一个事务中，多个SELECT操作将使用相同的快照，从而确保在事务期间看到的数据保持一致。</li><li>对于**串行化（SERIALIZABLE）**级别，所有事务都会串行执行，因此快照不是必需的，但会在必要时创建。</li></ul><h3 id="innodb存储引擎对mvcc的实现" tabindex="-1"><a class="header-anchor" href="#innodb存储引擎对mvcc的实现" aria-hidden="true">#</a> InnoDB存储引擎对MVCC的实现</h3><p>MVCC 的实现依赖于：隐藏字段、Read View、undo log。在内部实现中，InnoDB 通过数据行的 DB_TRX_ID 和 Read View 来判断数据的可见性，如不可见，则通过数据行的 DB_ROLL_PTR 找到 undo log 中的历史版本。每个事务读到的数据版本可能是不一样的，在同一个事务中，用户只能看到该事务创建 Read View 之前已经提交的修改和该事务本身做的修改</p><h4 id="隐藏字段" tabindex="-1"><a class="header-anchor" href="#隐藏字段" aria-hidden="true">#</a> 隐藏字段</h4>',20),Pn=n("code",null,"InnoDB",-1),Hn={href:"https://dev.mysql.com/doc/refman/5.7/en/innodb-multi-versioning.html",target:"_blank",rel:"noopener noreferrer"},Fn=o(`<ul><li><code>DB_TRX_ID（6字节）</code>：表示最后一次插入或更新该行的事务 id。此外，<code>delete</code> 操作在内部被视为更新，只不过会在记录头 <code>Record header</code> 中的 <code>deleted_flag</code> 字段将其标记为已删除</li><li><code>DB_ROLL_PTR（7字节）</code> 回滚指针，指向该行的 <code>undo log</code> 。指向该行记录的上一个版本的指针。这个指针用于在Undo Log中找到上一个版本的数据。</li><li><code>DB_ROW_ID（6字节）</code>：如果没有设置主键且该表没有唯一非空索引时，<code>InnoDB</code> 会使用该 id 来生成聚簇索引</li></ul><h4 id="readview" tabindex="-1"><a class="header-anchor" href="#readview" aria-hidden="true">#</a> ReadView</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>class ReadView <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
private<span class="token operator">:</span>
  <span class="token class-name">trx_id_t</span> m_low_limit_id<span class="token punctuation">;</span>      <span class="token comment">/* 大于等于这个 ID 的事务均不可见 */</span>

  <span class="token class-name">trx_id_t</span> m_up_limit_id<span class="token punctuation">;</span>       <span class="token comment">/* 小于这个 ID 的事务均可见 */</span>

  <span class="token class-name">trx_id_t</span> m_creator_trx_id<span class="token punctuation">;</span>    <span class="token comment">/* 创建该 Read View 的事务ID */</span>

  <span class="token class-name">trx_id_t</span> m_low_limit_no<span class="token punctuation">;</span>      <span class="token comment">/* 事务 Number, 小于该 Number 的 Undo Logs 均可以被 Purge */</span>

  <span class="token class-name">ids_t</span> m_ids<span class="token punctuation">;</span>                  <span class="token comment">/* 创建 Read View 时的活跃事务列表 */</span>

  m_closed<span class="token punctuation">;</span>                     <span class="token comment">/* 标记 Read View 是否 close */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Read View主要是用来做可见性判断（可以帮助事务根据隐藏字段DB_TRX_ID和DB_ROLL_PTR判断某一行记录是否可见。），里面保存了 “当前对本事务不可见的其他活跃事务”。</p><p>主要有以下字段：</p><ul><li><code>m_low_limit_id</code>：目前出现过的最大的事务 ID+1，即下一个将被分配的事务 ID。大于等于这个 ID 的数据版本均不可见</li><li><code>m_up_limit_id</code>：活跃事务列表 <code>m_ids</code> 中最小的事务 ID，如果 <code>m_ids</code> 为空，则 <code>m_up_limit_id</code> 为 <code>m_low_limit_id</code>。小于这个 ID 的数据版本均可见</li><li><code>m_ids</code>：<code>Read View</code> 创建时其他未提交的活跃事务 ID 列表。创建 <code>Read View</code>时，将当前未提交事务 ID 记录下来，后续即使它们修改了记录行的值，对于当前事务也是不可见的。<code>m_ids</code> 不包括当前事务自己和已提交的事务（正在内存中）</li><li><code>m_creator_trx_id</code>：创建该 <code>Read View</code> 的事务 ID</li></ul><p><strong>事务可见性示意图</strong></p><figure><img src="`+tn+'" alt="image-20220711215228405" tabindex="0" loading="lazy"><figcaption>image-20220711215228405</figcaption></figure><h4 id="undo-log-1" tabindex="-1"><a class="header-anchor" href="#undo-log-1" aria-hidden="true">#</a> undo-log</h4><p><code>undo log</code> 主要有两个作用：</p><ul><li>当事务回滚时用于将数据恢复到修改前的样子</li><li>另一个作用是 <code>MVCC</code> ，当读取记录时，若该记录被其他事务占用或当前版本对该事务不可见，则可以通过 <code>undo log</code> 读取之前的版本数据，以此实现非锁定读</li></ul><p><strong>在 <code>InnoDB</code> 存储引擎中 <code>undo log</code> 分为两种： <code>insert undo log</code> 和 <code>update undo log</code>：</strong></p><ol><li><strong><code>insert undo log</code></strong> ：指在 <code>insert</code> 操作中产生的 <code>undo log</code>。因为 <code>insert</code> 操作的记录只对事务本身可见，对其他事务不可见，故该 <code>undo log</code> 可以在事务提交后直接删除。不需要进行 <code>purge</code> 操作</li></ol><p><strong><code>insert</code> 时的数据初始状态：</strong></p><figure><img src="'+pn+'" alt="image-20220711215325716" tabindex="0" loading="lazy"><figcaption>image-20220711215325716</figcaption></figure><ol start="2"><li><strong><code>update undo log</code></strong> ：<code>update</code> 或 <code>delete</code> 操作中产生的 <code>undo log</code>。该 <code>undo log</code>可能需要提供 <code>MVCC</code> 机制，因此不能在事务提交时就进行删除。提交时放入 <code>undo log</code> 链表，等待 <code>purge线程</code> 进行最后的删除</li></ol><p><strong>数据第一次被修改时：</strong></p><figure><img src="'+cn+'" alt="image-20220711215339796" tabindex="0" loading="lazy"><figcaption>image-20220711215339796</figcaption></figure><p><strong>数据第二次被修改时：</strong></p><figure><img src="'+ln+'" alt="image-20220711215345905" tabindex="0" loading="lazy"><figcaption>image-20220711215345905</figcaption></figure><p>不同事务或者相同事务的对同一记录行的修改，会使该记录行的 <code>undo log</code> 成为一条链表，链首就是最新的记录，链尾就是最早的旧记录</p><h4 id="数据可见性算法" tabindex="-1"><a class="header-anchor" href="#数据可见性算法" aria-hidden="true">#</a> 数据可见性算法</h4><p>在 <code>InnoDB</code> 存储引擎中，创建一个新事务后，执行每个 <code>select</code> 语句前，都会创建一个快照（Read View），<strong>快照中保存了当前数据库系统中正处于活跃（没有 commit）的事务的 ID 号</strong>。其实简单的说保存的是系统中当前不应该被本事务看到的其他事务 ID 列表（即 m_ids）。当用户在这个事务中要读取某个记录行的时候，<code>InnoDB</code> 会将该记录行的 <code>DB_TRX_ID</code> 与 <code>Read View</code> 中的一些变量及当前事务 ID 进行比较，判断是否满足可见性条件</p><p>具体的比较算法如下</p><figure><img src="'+dn+'" alt="image-20220711215410118" tabindex="0" loading="lazy"><figcaption>image-20220711215410118</figcaption></figure><ol><li>如果记录 DB_TRX_ID &lt; m_up_limit_id，那么表明最新修改该行的事务（DB_TRX_ID）在当前事务创建快照之前就提交了，所以该记录行的值对当前事务是可见的</li><li>如果 DB_TRX_ID &gt;= m_low_limit_id，那么表明最新修改该行的事务（DB_TRX_ID）在当前事务创建快照之后才修改该行，所以该记录行的值对当前事务不可见。跳到步骤 5</li><li>m_ids 为空，则表明在当前事务创建快照之前，修改该行的事务就已经提交了，所以该记录行的值对当前事务是可见的</li><li>如果 m_up_limit_id &lt;= DB_TRX_ID &lt; m_low_limit_id，表明最新修改该行的事务（DB_TRX_ID）在当前事务创建快照的时候可能处于“活动状态”或者“已提交状态”；所以就要对活跃事务列表 m_ids 进行查找（源码中是用的二分查找，因为是有序的） <ul><li>如果在活跃事务列表 m_ids 中能找到 DB_TRX_ID，表明：① 在当前事务创建快照前，该记录行的值被事务 ID 为 DB_TRX_ID 的事务修改了，但没有提交；或者 ② 在当前事务创建快照后，该记录行的值被事务 ID 为 DB_TRX_ID 的事务修改了。这些情况下，这个记录行的值对当前事务都是不可见的。跳到步骤 5</li><li>在活跃事务列表中找不到，则表明“id 为 trx_id 的事务”在修改“该记录行的值”后，在“当前事务”创建快照前就已经提交了，所以记录行对当前事务可见</li></ul></li><li>在该记录行的 DB_ROLL_PTR 指针所指向的 <code>undo log</code> 取出快照记录，用快照记录的 DB_TRX_ID 跳到步骤 1 重新开始判断，直到找到满足的快照版本或返回空</li></ol><h3 id="mysql有几种高可用方案" tabindex="-1"><a class="header-anchor" href="#mysql有几种高可用方案" aria-hidden="true">#</a> MySQL有几种高可用方案</h3><ul><li>主从或主主半同步复制</li><li>半同步复制优化</li><li>高可用架构优化</li><li>共享存储</li><li>分布式协议</li></ul><h4 id="主从或主主半同步复制" tabindex="-1"><a class="header-anchor" href="#主从或主主半同步复制" aria-hidden="true">#</a> 主从或主主半同步复制</h4><p>用双节点数据库，搭建单向或者双向的半同步复制。架构如下：</p><figure><img src="'+rn+'" alt="image-20220801004733873" tabindex="0" loading="lazy"><figcaption>image-20220801004733873</figcaption></figure><p>通常会和proxy、keepalived等第三方软件同时使用，即可以用来监控数据库的健康，又可以执行一系列管理命令。如果主库发生故障，切换到备库后仍然可以继续使用数据库。</p><p><strong>这种方案优点</strong>是架构、部署比较简单，主机宕机直接切换即可。<strong>缺点</strong>是完全依赖于半同步复制，半同步复制退化为异步复制，无法保证数据一致性；另外，还需要额外考虑<strong>haproxy、keepalived</strong>的高可用机制。</p><h4 id="半同步复制优化" tabindex="-1"><a class="header-anchor" href="#半同步复制优化" aria-hidden="true">#</a> 半同步复制优化</h4><p>半同步复制机制是可靠的，可以保证数据一致性的。但是如果网络发生波动，半同步复制发生超时会切换为异步复制，异复制是无法保证数据的一致性的。因此，可以在半同复制的基础上优化一下，尽可能保证半同复制。如<strong>双通道复制</strong>方案</p><figure><img src="'+gn+'" alt="image-20220801004755753" tabindex="0" loading="lazy"><figcaption>image-20220801004755753</figcaption></figure><ul><li>优点：这种方案架构、部署也比较简单，主机宕机也是直接切换即可。比方案1的半同步复制，更能保证数据的一致性。</li><li>缺点：需要修改内核源码或者使用mysql通信协议，没有从根本上解决数据一致性问题</li></ul><h4 id="高可用架构优化" tabindex="-1"><a class="header-anchor" href="#高可用架构优化" aria-hidden="true">#</a> 高可用架构优化</h4><p>保证高可用，可以把主从双节点数据库扩展为数据库集群。Zookeeper可以作为集群管理，它使用分布式算法保证集群数据的一致性，可以较好的避免网络分区现象的产生。</p><figure><img src="'+un+'" alt="image-20220801004842095" tabindex="0" loading="lazy"><figcaption>image-20220801004842095</figcaption></figure><ul><li>优点：保证了整个系统的高可用性，扩展性也较好，可以扩展为大规模集群。</li><li>缺点：数据一致性<strong>仍然依赖于原生的mysql半同步复制</strong>；引入Zookeeper使系统逻辑更复杂。</li></ul><h4 id="共享存储" tabindex="-1"><a class="header-anchor" href="#共享存储" aria-hidden="true">#</a> 共享存储</h4><blockquote><p>共享存储实现了数据库服务器和存储设备的解耦，不同数据库之间的数据同步不再依赖于MySQL的原生复制功能，而是通过磁盘数据同步的手段，来保证数据的一致性。</p></blockquote><h5 id="drbd磁盘复制" tabindex="-1"><a class="header-anchor" href="#drbd磁盘复制" aria-hidden="true">#</a> DRBD磁盘复制</h5><p>DRBD是一个用软件实现的、无共享的、服务器之间镜像块设备内容的存储复制解决方案。主要用于对服务器之间的磁盘、分区、逻辑卷等进行数据镜像，当用户将数据写入本地磁盘时，还会将数据发送到网络中另一台主机的磁盘上，这样的本地主机(主节点)与远程主机(备节点)的数据就可以保证实时同步。常用架构如下：</p><figure><img src="'+mn+'" alt="image-20220801004923275" tabindex="0" loading="lazy"><figcaption>image-20220801004923275</figcaption></figure><p>当本地主机出现问题，远程主机上还保留着一份相同的数据，即可以继续使用，保证了数据的安全。</p><ul><li>优点：部署简单，价格合适，保证数据的强一致性</li><li>缺点：对IO性能影响较大，从库不提供读操作</li></ul><h4 id="分布式协议" tabindex="-1"><a class="header-anchor" href="#分布式协议" aria-hidden="true">#</a> 分布式协议</h4><p>分布式协议可以很好解决数据一致性问题。常见的部署方案就是<strong>MySQL cluster</strong>，它是官方集群的部署方案，通过使用NDB存储引擎实时备份冗余数据，实现数据库的高可用性和数据一致性。如下：</p><figure><img src="'+kn+'" alt="image-20220801004942686" tabindex="0" loading="lazy"><figcaption>image-20220801004942686</figcaption></figure><ul><li>优点：不依赖于第三方软件，可以实现数据的强一致性；</li><li>缺点：配置较复杂；需要使用NDB储存引擎；至少三节点；</li></ul><h3 id="读写分离了解吗" tabindex="-1"><a class="header-anchor" href="#读写分离了解吗" aria-hidden="true">#</a> 读写分离了解吗？</h3><p>见名思意，根据读写分离的名字，我们就可以知道：<strong>读写分离主要是为了将对数据库的读写操作分散到不同的数据库节点上。</strong> 这样的话，就能够小幅提升写性能，大幅提升读性能。</p><figure><img src="'+bn+'" alt="image-20220617163230641" tabindex="0" loading="lazy"><figcaption>image-20220617163230641</figcaption></figure><p>不论是使用哪一种读写分离具体的实现方案，想要实现读写分离一般包含如下几步：</p><ol><li>部署多台数据库，选择其中的一台作为主数据库，其他的一台或者多台作为从数据库。</li><li>保证主数据库和从数据库之间的数据是实时同步的，这个过程也就是我们常说的<strong>主从复制</strong>。</li><li>系统将写请求交给主数据库处理，读请求交给从数据库处理。</li></ol><p>落实到项目本身的话，常用的方式有两种：</p><p><strong>1.代理方式</strong></p><figure><img src="'+hn+'" alt="image-20220617163247933" tabindex="0" loading="lazy"><figcaption>image-20220617163247933</figcaption></figure><p>我们可以在应用和数据中间加了一个代理层。应用程序所有的数据请求都交给代理层处理，代理层负责分离读写请求，将它们路由到对应的数据库中。</p><p>提供类似功能的中间件有 <strong>MySQL Router</strong>（官方）、<strong>Atlas</strong>（基于 MySQL Proxy）、<strong>Maxscale</strong>、<strong>MyCat</strong>。</p><p><strong>2.组件方式</strong></p><p>在这种方式中，我们可以通过引入第三方组件来帮助我们读写请求。</p><p>这也是我比较推荐的一种方式。这种方式目前在各种互联网公司中用的最多的，相关的实际的案例也非常多。如果你要采用这种方式的话，推荐使用 <code>sharding-jdbc</code> ，直接引入 jar 包即可使用，非常方便。同时，也节省了很多运维的成本。</p><h3 id="聊聊分库分表-分表为什么要停服这种操作-如果不停服可以怎么做" tabindex="-1"><a class="header-anchor" href="#聊聊分库分表-分表为什么要停服这种操作-如果不停服可以怎么做" aria-hidden="true">#</a> 聊聊分库分表,分表为什么要停服这种操作，如果不停服可以怎么做</h3><h4 id="分库分表方案" tabindex="-1"><a class="header-anchor" href="#分库分表方案" aria-hidden="true">#</a> 分库分表方案</h4><ul><li>水平分库：以字段为依据，按照一定策略（hash、range等），将一个库中的数据拆分到多个库中。</li><li>水平分表：以字段为依据，按照一定策略（hash、range等），将一个表中的数据拆分到多个表中。</li><li>垂直分库：以表为依据，按照业务归属不同，将不同的表拆分到不同的库中。</li><li>垂直分表：以字段为依据，按照字段的活跃性，将表中字段拆到不同的表（主表和扩展表）中。</li></ul><h4 id="常用的分库分表中间件" tabindex="-1"><a class="header-anchor" href="#常用的分库分表中间件" aria-hidden="true">#</a> 常用的分库分表中间件</h4><ul><li>sharding-jdbc（当当）</li><li>Mycat</li><li>TDDL（淘宝）</li><li>Oceanus(58同城数据库中间件)</li><li>vitess（谷歌开发的数据库中间件）</li><li>Atlas(Qihoo 360)</li></ul><h4 id="分库分表可能遇到的问题" tabindex="-1"><a class="header-anchor" href="#分库分表可能遇到的问题" aria-hidden="true">#</a> 分库分表可能遇到的问题</h4><ul><li>事务问题：需要用分布式事务啦</li><li>跨节点Join的问题：解决这一问题可以分两次查询实现</li><li>跨节点的count,order by,group by以及聚合函数问题：分别在各个节点上得到结果后在应用程序端进行合并。</li><li>数据迁移，容量规划，扩容等问题</li><li>ID问题：数据库被切分后，不能再依赖数据库自身的主键生成机制啦，最简单可以考虑UUID</li><li>跨分片的排序分页问题（后台加大pagesize处理？）</li></ul><h4 id="分表要停服嘛-不停服怎么做" tabindex="-1"><a class="header-anchor" href="#分表要停服嘛-不停服怎么做" aria-hidden="true">#</a> 分表要停服嘛？不停服怎么做？</h4><p>不用。不停服的时候，应该怎么做呢，分五个步骤：</p><ol><li>编写代理层，加个开关（控制访问新的DAO还是老的DAO，或者是都访问），灰度期间，还是访问老的DAO。</li><li>发版全量后，开启双写，既在旧表新增和修改，也在新表新增和修改。日志或者临时表记下新表ID起始值，旧表中小于这个值的数据就是存量数据，这批数据就是要迁移的。</li><li>通过脚本把旧表的存量数据写入新表。</li><li>停读旧表改读新表，此时新表已经承载了所有读写业务，但是这时候不要立刻停写旧表，需要保持双写一段时间。</li><li>当读写新表一段时间之后，如果没有业务问题，就可以停写旧表</li></ol><h3 id="主从复制原理了解么" tabindex="-1"><a class="header-anchor" href="#主从复制原理了解么" aria-hidden="true">#</a> 主从复制原理了解么？</h3><p>MySQL binlog(binary log 即二进制日志文件) 主要记录了 MySQL 数据库中数据的所有变化(数据库执行的所有 DDL 和 DML 语句)。因此，我们根据主库的 MySQL binlog 日志就能够将主库的数据同步到从库中。</p><figure><img src="'+vn+`" alt="image-20220617163123694" tabindex="0" loading="lazy"><figcaption>image-20220617163123694</figcaption></figure><ol><li>主库将数据库中数据的变化写入到 binlog</li><li>从库连接主库</li><li>从库会创建一个 I/O 线程向主库请求更新的 binlog</li><li>主库会创建一个 binlog dump 线程来发送 binlog ，从库中的 I/O 线程负责接收</li><li>从库的 I/O 线程将接收的 binlog 写入到 relay log 中。</li><li>从库的 SQL 线程读取 relay log 同步数据本地（也就是再执行一遍 SQL ）。</li></ol><p>怎么样？看了我对主从复制这个过程的讲解，你应该搞明白了吧!</p><p>你一般看到 binlog 就要想到主从复制。当然，除了主从复制之外，binlog 还能帮助我们实现数据恢复。</p><p>🌈 拓展一下：</p><p>不知道大家有没有使用过阿里开源的一个叫做 canal 的工具。这个工具可以帮助我们实现 MySQL 和其他数据源比如 Elasticsearch 或者另外一台 MySQL 数据库之间的数据同步。很显然，这个工具的底层原理肯定也是依赖 binlog。canal 的原理就是模拟 MySQL 主从复制的过程，解析 binlog 将数据同步到其他的数据源。</p><p>另外，像咱们常用的分布式缓存组件 Redis 也是通过主从复制实现的读写分离。</p><p>🌕 简单总结一下：</p><p><strong>MySQL 主从复制是依赖于 binlog 。另外，常见的一些同步 MySQL 数据到其他数据源的工具（比如 canal）的底层一般也是依赖 binlog 。</strong></p><h3 id="数据库如何实现分布式锁" tabindex="-1"><a class="header-anchor" href="#数据库如何实现分布式锁" aria-hidden="true">#</a> 数据库如何实现分布式锁</h3><h4 id="基于数据库表-锁表-很少使用" tabindex="-1"><a class="header-anchor" href="#基于数据库表-锁表-很少使用" aria-hidden="true">#</a> 基于数据库表（锁表，很少使用）</h4><p>最简单的方式可能就是直接创建一张锁表，然后通过操作该表中的数据来实现了。当我们想要获得锁的时候，就可以在该表中增加一条记录，想要释放锁的时候就删除这条记录。</p><p>为了更好的演示，我们先创建一张数据库表，参考如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> database_lock <span class="token punctuation">(</span>
	<span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">BIGINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
	<span class="token identifier"><span class="token punctuation">\`</span>resource<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;锁定的资源&#39;</span><span class="token punctuation">,</span>
	<span class="token identifier"><span class="token punctuation">\`</span>description<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&quot;&quot;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;描述&#39;</span><span class="token punctuation">,</span>
	<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> uiq_idx_resource <span class="token punctuation">(</span>resource<span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">&#39;数据库分布式锁表&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们想要获得锁时，可以插入一条数据：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> database_lock<span class="token punctuation">(</span>resource<span class="token punctuation">,</span> description<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;lock&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当需要释放锁的时，可以删除这条数据：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> database_lock <span class="token keyword">WHERE</span> resource<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="基于悲观锁" tabindex="-1"><a class="header-anchor" href="#基于悲观锁" aria-hidden="true">#</a> 基于悲观锁</h4><p><strong>悲观锁实现思路</strong>？</p><ol><li>在对任意记录进行修改前，先尝试为该记录加上排他锁（exclusive locking）。</li><li>如果加锁失败，说明该记录正在被修改，那么当前查询可能要等待或者抛出异常。 具体响应方式由开发者根据实际需要决定。</li><li>如果成功加锁，那么就可以对记录做修改，事务完成后就会解锁了。</li><li>其间如果有其他对该记录做修改或加排他锁的操作，都会等待我们解锁或直接抛出异常。</li></ol><p><strong>以MySQL InnoDB中使用悲观锁为例</strong>？</p><p>要使用悲观锁，我们必须关闭mysql数据库的自动提交属性，因为MySQL默认使用autocommit模式，也就是说，当你执行一个更新操作后，MySQL会立刻将结果进行提交。set autocommit=0;</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">//0.开始事务</span>
<span class="token keyword">begin</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token keyword">begin</span> <span class="token keyword">work</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>三者选一就可以<span class="token punctuation">)</span>
<span class="token comment">//1.查询出商品信息</span>
<span class="token keyword">select</span> <span class="token keyword">status</span> <span class="token keyword">from</span> t_goods <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span>
<span class="token comment">//2.根据商品信息生成订单</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_orders <span class="token punctuation">(</span>id<span class="token punctuation">,</span>goods_id<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//3.修改商品status为2</span>
<span class="token keyword">update</span> t_goods <span class="token keyword">set</span> <span class="token keyword">status</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token comment">//4.提交事务</span>
<span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token keyword">commit</span> <span class="token keyword">work</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的查询语句中，我们使用了 <code>select…for update</code>的方式，这样就通过开启排他锁的方式实现了悲观锁。此时在t_goods表中，id为1的 那条数据就被我们锁定了，其它的事务必须等本次事务提交之后才能执行。这样我们可以保证当前的数据不会被其它事务修改。</p><p>上面我们提到，使用 <code>select…for update</code>会把数据给锁住，不过我们需要注意一些锁的级别，MySQL InnoDB默认行级锁。行级锁都是基于索引的，如果一条SQL语句用不到索引是不会使用行级锁的，会使用表级锁把整张表锁住，这点需要注意。</p><h4 id="基于乐观锁" tabindex="-1"><a class="header-anchor" href="#基于乐观锁" aria-hidden="true">#</a> 基于乐观锁</h4><p>乐观并发控制（又名“乐观锁”，Optimistic Concurrency Control，缩写“OCC”）是一种并发控制的方法。它假设多用户并发的事务在处理时不会彼此互相影响，各事务能够在不产生锁的情况下处理各自影响的那部分数据。在提交数据更新之前，每个事务会先检查在该事务读取数据后，有没有其他事务又修改了该数据。如果其他事务有更新的话，正在提交的事务会进行回滚。</p><p><strong>以使用版本号实现乐观锁为例？</strong></p><p>使用版本号时，可以在数据初始化时指定一个版本号，每次对数据的更新操作都对版本号执行+1操作。并判断当前版本号是不是该数据的最新的版本号。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token number">1.</span>查询出商品信息
<span class="token keyword">select</span> <span class="token punctuation">(</span><span class="token keyword">status</span><span class="token punctuation">,</span><span class="token keyword">status</span><span class="token punctuation">,</span>version<span class="token punctuation">)</span> <span class="token keyword">from</span> t_goods <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token comment">#{id}</span>
<span class="token number">2.</span>根据商品信息生成订单
<span class="token number">3.</span>修改商品<span class="token keyword">status</span>为<span class="token number">2</span>
<span class="token keyword">update</span> t_goods 
<span class="token keyword">set</span> <span class="token keyword">status</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>version<span class="token operator">=</span>version<span class="token operator">+</span><span class="token number">1</span>
<span class="token keyword">where</span> id<span class="token operator">=</span><span class="token comment">#{id} and version=#{version};</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，乐观锁机制往往基于系统中数据存储逻辑，因此也具备一定的局限性。由于乐观锁机制是在我们的系统中实现的，对于来自外部系统的用户数据更新操作不受我们系统的控制，因此可能会造成脏数据被更新到数据库中。在系统设计阶段，我们应该充分考虑到这些情况，并进行相应的调整（如将乐观锁策略在数据库存储过程中实现，对外只开放基于此存储过程的数据更新途径，而不是将数据库表直接对外公开）</p><ul><li><strong>缺陷</strong></li></ul><p>对数据库依赖，开销问题，行锁变表锁问题，无法解决数据库单点和可重入的问题。</p>`,111);function Xn(Wn,Kn){const s=l("ExternalLinkIcon");return p(),c("div",null,[_n,n("p",null,[a("另外，DDIA 也就是 "),n("a",yn,[a("《Designing Data-Intensive Application（数据密集型应用系统设计）》"),e(s)])]),wn,n("p",null,[n("a",Bn,[a("详细查看文章"),e(s)])]),xn,n("p",null,[n("a",En,[a("MySQL高性能优化规范建议"),e(s)])]),Ln,n("p",null,[n("a",Dn,[a("SQL语句优化"),e(s)])]),Mn,In,Sn,n("blockquote",null,[n("p",null,[a("间隙锁：（参考阅读："),n("a",Tn,[a("https://www.percona.com/blog/innodbs-gap-locks/）"),e(s)]),a(" 在 MySQL 的 InnoDB 存储引擎中，"),Rn,a(' 是一种特殊的锁机制，主要用于处理范围查询和防止幻读。 当我们执行范围查询（例如 SELECT * FROM table WHERE id BETWEEN 1 AND 100 FOR UPDATE）或使用类似 "BETWEEN", "<>", "<=", ">=", "IN" 的查询条件时，InnoDB 存储引擎会对查询的范围加上 "gap lock"，以确保在事务处理过程中，其他事务不能在这个范围内插入新的记录，从而避免了幻读的问题。')]),Cn]),n("blockquote",null,[n("p",null,[a("记录锁：（参考阅读："),n("a",qn,[a("https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html）"),e(s)]),An,a(": 记录锁是一种行锁，它锁定的是索引记录。当我们对一个记录执行 SELECT ... LOCK IN SHARE MODE 或 SELECT ... FOR UPDATE 操作时，InnoDB 存储引擎会在该记录上加一个记录锁。记录锁只阻止其他事务修改或删除该记录，但不阻止在该记录前后插入新的记录。")])]),n("blockquote",null,[n("p",null,[a("临键锁：（参考阅读："),n("a",Qn,[a("https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html）"),e(s)]),On,a(": 临键锁是记录锁和中间隙锁的组合，它锁定的是一个索引记录以及它之前的 gap。当我们对一个记录执行 SELECT ... LOCK IN SHARE MODE 或 SELECT ... FOR UPDATE 操作时，如果 InnoDB 存储引擎不能确定是否存在符合条件的下一个记录，它会在当前记录以及之前的 gap 上加一个 next-key lock。next-key lock 可以防止其他事务修改或删除当前记录，同时也防止在当前记录前后插入新的记录，因此可以有效地防止幻读。")])]),jn,n("p",null,[a("图解B+树："),n("a",zn,[a("https://zhuanlan.zhihu.com/p/54102723"),e(s)])]),Nn,n("p",null,[a("这两个隔离级别实现是通过「事务的 Read View 里的字段」和「记录中的两个隐藏列（trx_id 和 roll_pointer）」的比对，如果不满足可见行，就会顺着 undo log 版本链里找到满足其可见性的记录，从而控制并发事务访问同一个记录时的行为，这就叫 MVCC（多版本并发控制）。具体的实现可以看："),n("a",Vn,[a("事务隔离级别是怎么实现的"),e(s)]),a("？ 因此，undo log 两大作用：")]),Un,n("p",null,[a("在内部，"),Pn,a(" 存储引擎为每行数据添加了三个 "),n("a",Hn,[a("隐藏字段"),e(s)]),a("：")]),Fn])}const Zn=t(fn,[["render",Xn],["__file","mysql.html.vue"]]);export{Zn as default};
